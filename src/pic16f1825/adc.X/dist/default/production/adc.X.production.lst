

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Feb 15 19:06:16 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.42
    53                           ; Generated 13/04/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F1825 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000E                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  008C                     	;# 
   115  008E                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  010C                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  011A                     	;# 
   142  011B                     	;# 
   143  011D                     	;# 
   144  011E                     	;# 
   145  018C                     	;# 
   146  018E                     	;# 
   147  0191                     	;# 
   148  0191                     	;# 
   149  0192                     	;# 
   150  0193                     	;# 
   151  0193                     	;# 
   152  0193                     	;# 
   153  0194                     	;# 
   154  0195                     	;# 
   155  0196                     	;# 
   156  0199                     	;# 
   157  019A                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  020C                     	;# 
   165  020E                     	;# 
   166  0211                     	;# 
   167  0211                     	;# 
   168  0212                     	;# 
   169  0212                     	;# 
   170  0213                     	;# 
   171  0213                     	;# 
   172  0214                     	;# 
   173  0214                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0216                     	;# 
   178  0216                     	;# 
   179  0217                     	;# 
   180  0217                     	;# 
   181  0291                     	;# 
   182  0291                     	;# 
   183  0292                     	;# 
   184  0293                     	;# 
   185  0294                     	;# 
   186  0295                     	;# 
   187  0295                     	;# 
   188  0296                     	;# 
   189  0298                     	;# 
   190  0298                     	;# 
   191  0299                     	;# 
   192  029A                     	;# 
   193  029B                     	;# 
   194  029C                     	;# 
   195  029D                     	;# 
   196  029E                     	;# 
   197  0311                     	;# 
   198  0311                     	;# 
   199  0312                     	;# 
   200  0313                     	;# 
   201  0318                     	;# 
   202  0318                     	;# 
   203  0319                     	;# 
   204  031A                     	;# 
   205  038C                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  039A                     	;# 
   211  039C                     	;# 
   212  039D                     	;# 
   213  039E                     	;# 
   214  039F                     	;# 
   215  0415                     	;# 
   216  0416                     	;# 
   217  0417                     	;# 
   218  041C                     	;# 
   219  041D                     	;# 
   220  041E                     	;# 
   221  0FE4                     	;# 
   222  0FE5                     	;# 
   223  0FE6                     	;# 
   224  0FE7                     	;# 
   225  0FE8                     	;# 
   226  0FE9                     	;# 
   227  0FEA                     	;# 
   228  0FEB                     	;# 
   229  0FED                     	;# 
   230  0FEE                     	;# 
   231  0FEF                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000E                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  008C                     	;# 
   261  008E                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  010C                     	;# 
   277  010E                     	;# 
   278  0111                     	;# 
   279  0112                     	;# 
   280  0113                     	;# 
   281  0114                     	;# 
   282  0115                     	;# 
   283  0116                     	;# 
   284  0117                     	;# 
   285  0118                     	;# 
   286  0119                     	;# 
   287  011A                     	;# 
   288  011B                     	;# 
   289  011D                     	;# 
   290  011E                     	;# 
   291  018C                     	;# 
   292  018E                     	;# 
   293  0191                     	;# 
   294  0191                     	;# 
   295  0192                     	;# 
   296  0193                     	;# 
   297  0193                     	;# 
   298  0193                     	;# 
   299  0194                     	;# 
   300  0195                     	;# 
   301  0196                     	;# 
   302  0199                     	;# 
   303  019A                     	;# 
   304  019B                     	;# 
   305  019B                     	;# 
   306  019C                     	;# 
   307  019D                     	;# 
   308  019E                     	;# 
   309  019F                     	;# 
   310  020C                     	;# 
   311  020E                     	;# 
   312  0211                     	;# 
   313  0211                     	;# 
   314  0212                     	;# 
   315  0212                     	;# 
   316  0213                     	;# 
   317  0213                     	;# 
   318  0214                     	;# 
   319  0214                     	;# 
   320  0215                     	;# 
   321  0215                     	;# 
   322  0215                     	;# 
   323  0216                     	;# 
   324  0216                     	;# 
   325  0217                     	;# 
   326  0217                     	;# 
   327  0291                     	;# 
   328  0291                     	;# 
   329  0292                     	;# 
   330  0293                     	;# 
   331  0294                     	;# 
   332  0295                     	;# 
   333  0295                     	;# 
   334  0296                     	;# 
   335  0298                     	;# 
   336  0298                     	;# 
   337  0299                     	;# 
   338  029A                     	;# 
   339  029B                     	;# 
   340  029C                     	;# 
   341  029D                     	;# 
   342  029E                     	;# 
   343  0311                     	;# 
   344  0311                     	;# 
   345  0312                     	;# 
   346  0313                     	;# 
   347  0318                     	;# 
   348  0318                     	;# 
   349  0319                     	;# 
   350  031A                     	;# 
   351  038C                     	;# 
   352  038E                     	;# 
   353  0391                     	;# 
   354  0392                     	;# 
   355  0393                     	;# 
   356  039A                     	;# 
   357  039C                     	;# 
   358  039D                     	;# 
   359  039E                     	;# 
   360  039F                     	;# 
   361  0415                     	;# 
   362  0416                     	;# 
   363  0417                     	;# 
   364  041C                     	;# 
   365  041D                     	;# 
   366  041E                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000E                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  001E                     	;# 
   405  001F                     	;# 
   406  008C                     	;# 
   407  008E                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0093                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0098                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009B                     	;# 
   419  009C                     	;# 
   420  009D                     	;# 
   421  009E                     	;# 
   422  010C                     	;# 
   423  010E                     	;# 
   424  0111                     	;# 
   425  0112                     	;# 
   426  0113                     	;# 
   427  0114                     	;# 
   428  0115                     	;# 
   429  0116                     	;# 
   430  0117                     	;# 
   431  0118                     	;# 
   432  0119                     	;# 
   433  011A                     	;# 
   434  011B                     	;# 
   435  011D                     	;# 
   436  011E                     	;# 
   437  018C                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019C                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019F                     	;# 
   456  020C                     	;# 
   457  020E                     	;# 
   458  0211                     	;# 
   459  0211                     	;# 
   460  0212                     	;# 
   461  0212                     	;# 
   462  0213                     	;# 
   463  0213                     	;# 
   464  0214                     	;# 
   465  0214                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0216                     	;# 
   470  0216                     	;# 
   471  0217                     	;# 
   472  0217                     	;# 
   473  0291                     	;# 
   474  0291                     	;# 
   475  0292                     	;# 
   476  0293                     	;# 
   477  0294                     	;# 
   478  0295                     	;# 
   479  0295                     	;# 
   480  0296                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  029B                     	;# 
   486  029C                     	;# 
   487  029D                     	;# 
   488  029E                     	;# 
   489  0311                     	;# 
   490  0311                     	;# 
   491  0312                     	;# 
   492  0313                     	;# 
   493  0318                     	;# 
   494  0318                     	;# 
   495  0319                     	;# 
   496  031A                     	;# 
   497  038C                     	;# 
   498  038E                     	;# 
   499  0391                     	;# 
   500  0392                     	;# 
   501  0393                     	;# 
   502  039A                     	;# 
   503  039C                     	;# 
   504  039D                     	;# 
   505  039E                     	;# 
   506  039F                     	;# 
   507  0415                     	;# 
   508  0416                     	;# 
   509  0417                     	;# 
   510  041C                     	;# 
   511  041D                     	;# 
   512  041E                     	;# 
   513  0FE4                     	;# 
   514  0FE5                     	;# 
   515  0FE6                     	;# 
   516  0FE7                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEB                     	;# 
   521  0FED                     	;# 
   522  0FEE                     	;# 
   523  0FEF                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000E                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0013                     	;# 
   541  0015                     	;# 
   542  0016                     	;# 
   543  0016                     	;# 
   544  0017                     	;# 
   545  0018                     	;# 
   546  0019                     	;# 
   547  001A                     	;# 
   548  001B                     	;# 
   549  001C                     	;# 
   550  001E                     	;# 
   551  001F                     	;# 
   552  008C                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0095                     	;# 
   558  0096                     	;# 
   559  0097                     	;# 
   560  0098                     	;# 
   561  0099                     	;# 
   562  009A                     	;# 
   563  009B                     	;# 
   564  009B                     	;# 
   565  009C                     	;# 
   566  009D                     	;# 
   567  009E                     	;# 
   568  010C                     	;# 
   569  010E                     	;# 
   570  0111                     	;# 
   571  0112                     	;# 
   572  0113                     	;# 
   573  0114                     	;# 
   574  0115                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  0118                     	;# 
   578  0119                     	;# 
   579  011A                     	;# 
   580  011B                     	;# 
   581  011D                     	;# 
   582  011E                     	;# 
   583  018C                     	;# 
   584  018E                     	;# 
   585  0191                     	;# 
   586  0191                     	;# 
   587  0192                     	;# 
   588  0193                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0199                     	;# 
   595  019A                     	;# 
   596  019B                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019F                     	;# 
   602  020C                     	;# 
   603  020E                     	;# 
   604  0211                     	;# 
   605  0211                     	;# 
   606  0212                     	;# 
   607  0212                     	;# 
   608  0213                     	;# 
   609  0213                     	;# 
   610  0214                     	;# 
   611  0214                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0216                     	;# 
   616  0216                     	;# 
   617  0217                     	;# 
   618  0217                     	;# 
   619  0291                     	;# 
   620  0291                     	;# 
   621  0292                     	;# 
   622  0293                     	;# 
   623  0294                     	;# 
   624  0295                     	;# 
   625  0295                     	;# 
   626  0296                     	;# 
   627  0298                     	;# 
   628  0298                     	;# 
   629  0299                     	;# 
   630  029A                     	;# 
   631  029B                     	;# 
   632  029C                     	;# 
   633  029D                     	;# 
   634  029E                     	;# 
   635  0311                     	;# 
   636  0311                     	;# 
   637  0312                     	;# 
   638  0313                     	;# 
   639  0318                     	;# 
   640  0318                     	;# 
   641  0319                     	;# 
   642  031A                     	;# 
   643  038C                     	;# 
   644  038E                     	;# 
   645  0391                     	;# 
   646  0392                     	;# 
   647  0393                     	;# 
   648  039A                     	;# 
   649  039C                     	;# 
   650  039D                     	;# 
   651  039E                     	;# 
   652  039F                     	;# 
   653  0415                     	;# 
   654  0416                     	;# 
   655  0417                     	;# 
   656  041C                     	;# 
   657  041D                     	;# 
   658  041E                     	;# 
   659  0FE4                     	;# 
   660  0FE5                     	;# 
   661  0FE6                     	;# 
   662  0FE7                     	;# 
   663  0FE8                     	;# 
   664  0FE9                     	;# 
   665  0FEA                     	;# 
   666  0FEB                     	;# 
   667  0FED                     	;# 
   668  0FEE                     	;# 
   669  0FEF                     	;# 
   670  0000                     	;# 
   671  0001                     	;# 
   672  0002                     	;# 
   673  0003                     	;# 
   674  0004                     	;# 
   675  0005                     	;# 
   676  0006                     	;# 
   677  0007                     	;# 
   678  0008                     	;# 
   679  0009                     	;# 
   680  000A                     	;# 
   681  000B                     	;# 
   682  000C                     	;# 
   683  000E                     	;# 
   684  0011                     	;# 
   685  0012                     	;# 
   686  0013                     	;# 
   687  0015                     	;# 
   688  0016                     	;# 
   689  0016                     	;# 
   690  0017                     	;# 
   691  0018                     	;# 
   692  0019                     	;# 
   693  001A                     	;# 
   694  001B                     	;# 
   695  001C                     	;# 
   696  001E                     	;# 
   697  001F                     	;# 
   698  008C                     	;# 
   699  008E                     	;# 
   700  0091                     	;# 
   701  0092                     	;# 
   702  0093                     	;# 
   703  0095                     	;# 
   704  0096                     	;# 
   705  0097                     	;# 
   706  0098                     	;# 
   707  0099                     	;# 
   708  009A                     	;# 
   709  009B                     	;# 
   710  009B                     	;# 
   711  009C                     	;# 
   712  009D                     	;# 
   713  009E                     	;# 
   714  010C                     	;# 
   715  010E                     	;# 
   716  0111                     	;# 
   717  0112                     	;# 
   718  0113                     	;# 
   719  0114                     	;# 
   720  0115                     	;# 
   721  0116                     	;# 
   722  0117                     	;# 
   723  0118                     	;# 
   724  0119                     	;# 
   725  011A                     	;# 
   726  011B                     	;# 
   727  011D                     	;# 
   728  011E                     	;# 
   729  018C                     	;# 
   730  018E                     	;# 
   731  0191                     	;# 
   732  0191                     	;# 
   733  0192                     	;# 
   734  0193                     	;# 
   735  0193                     	;# 
   736  0193                     	;# 
   737  0194                     	;# 
   738  0195                     	;# 
   739  0196                     	;# 
   740  0199                     	;# 
   741  019A                     	;# 
   742  019B                     	;# 
   743  019B                     	;# 
   744  019C                     	;# 
   745  019D                     	;# 
   746  019E                     	;# 
   747  019F                     	;# 
   748  020C                     	;# 
   749  020E                     	;# 
   750  0211                     	;# 
   751  0211                     	;# 
   752  0212                     	;# 
   753  0212                     	;# 
   754  0213                     	;# 
   755  0213                     	;# 
   756  0214                     	;# 
   757  0214                     	;# 
   758  0215                     	;# 
   759  0215                     	;# 
   760  0215                     	;# 
   761  0216                     	;# 
   762  0216                     	;# 
   763  0217                     	;# 
   764  0217                     	;# 
   765  0291                     	;# 
   766  0291                     	;# 
   767  0292                     	;# 
   768  0293                     	;# 
   769  0294                     	;# 
   770  0295                     	;# 
   771  0295                     	;# 
   772  0296                     	;# 
   773  0298                     	;# 
   774  0298                     	;# 
   775  0299                     	;# 
   776  029A                     	;# 
   777  029B                     	;# 
   778  029C                     	;# 
   779  029D                     	;# 
   780  029E                     	;# 
   781  0311                     	;# 
   782  0311                     	;# 
   783  0312                     	;# 
   784  0313                     	;# 
   785  0318                     	;# 
   786  0318                     	;# 
   787  0319                     	;# 
   788  031A                     	;# 
   789  038C                     	;# 
   790  038E                     	;# 
   791  0391                     	;# 
   792  0392                     	;# 
   793  0393                     	;# 
   794  039A                     	;# 
   795  039C                     	;# 
   796  039D                     	;# 
   797  039E                     	;# 
   798  039F                     	;# 
   799  0415                     	;# 
   800  0416                     	;# 
   801  0417                     	;# 
   802  041C                     	;# 
   803  041D                     	;# 
   804  041E                     	;# 
   805  0FE4                     	;# 
   806  0FE5                     	;# 
   807  0FE6                     	;# 
   808  0FE7                     	;# 
   809  0FE8                     	;# 
   810  0FE9                     	;# 
   811  0FEA                     	;# 
   812  0FEB                     	;# 
   813  0FED                     	;# 
   814  0FEE                     	;# 
   815  0FEF                     	;# 
   816  0000                     	;# 
   817  0001                     	;# 
   818  0002                     	;# 
   819  0003                     	;# 
   820  0004                     	;# 
   821  0005                     	;# 
   822  0006                     	;# 
   823  0007                     	;# 
   824  0008                     	;# 
   825  0009                     	;# 
   826  000A                     	;# 
   827  000B                     	;# 
   828  000C                     	;# 
   829  000E                     	;# 
   830  0011                     	;# 
   831  0012                     	;# 
   832  0013                     	;# 
   833  0015                     	;# 
   834  0016                     	;# 
   835  0016                     	;# 
   836  0017                     	;# 
   837  0018                     	;# 
   838  0019                     	;# 
   839  001A                     	;# 
   840  001B                     	;# 
   841  001C                     	;# 
   842  001E                     	;# 
   843  001F                     	;# 
   844  008C                     	;# 
   845  008E                     	;# 
   846  0091                     	;# 
   847  0092                     	;# 
   848  0093                     	;# 
   849  0095                     	;# 
   850  0096                     	;# 
   851  0097                     	;# 
   852  0098                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  010C                     	;# 
   861  010E                     	;# 
   862  0111                     	;# 
   863  0112                     	;# 
   864  0113                     	;# 
   865  0114                     	;# 
   866  0115                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  0118                     	;# 
   870  0119                     	;# 
   871  011A                     	;# 
   872  011B                     	;# 
   873  011D                     	;# 
   874  011E                     	;# 
   875  018C                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0194                     	;# 
   884  0195                     	;# 
   885  0196                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020E                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0294                     	;# 
   916  0295                     	;# 
   917  0295                     	;# 
   918  0296                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  029B                     	;# 
   924  029C                     	;# 
   925  029D                     	;# 
   926  029E                     	;# 
   927  0311                     	;# 
   928  0311                     	;# 
   929  0312                     	;# 
   930  0313                     	;# 
   931  0318                     	;# 
   932  0318                     	;# 
   933  0319                     	;# 
   934  031A                     	;# 
   935  038C                     	;# 
   936  038E                     	;# 
   937  0391                     	;# 
   938  0392                     	;# 
   939  0393                     	;# 
   940  039A                     	;# 
   941  039C                     	;# 
   942  039D                     	;# 
   943  039E                     	;# 
   944  039F                     	;# 
   945  0415                     	;# 
   946  0416                     	;# 
   947  0417                     	;# 
   948  041C                     	;# 
   949  041D                     	;# 
   950  041E                     	;# 
   951  0FE4                     	;# 
   952  0FE5                     	;# 
   953  0FE6                     	;# 
   954  0FE7                     	;# 
   955  0FE8                     	;# 
   956  0FE9                     	;# 
   957  0FEA                     	;# 
   958  0FEB                     	;# 
   959  0FED                     	;# 
   960  0FEE                     	;# 
   961  0FEF                     	;# 
   962  0000                     	;# 
   963  0001                     	;# 
   964  0002                     	;# 
   965  0003                     	;# 
   966  0004                     	;# 
   967  0005                     	;# 
   968  0006                     	;# 
   969  0007                     	;# 
   970  0008                     	;# 
   971  0009                     	;# 
   972  000A                     	;# 
   973  000B                     	;# 
   974  000C                     	;# 
   975  000E                     	;# 
   976  0011                     	;# 
   977  0012                     	;# 
   978  0013                     	;# 
   979  0015                     	;# 
   980  0016                     	;# 
   981  0016                     	;# 
   982  0017                     	;# 
   983  0018                     	;# 
   984  0019                     	;# 
   985  001A                     	;# 
   986  001B                     	;# 
   987  001C                     	;# 
   988  001E                     	;# 
   989  001F                     	;# 
   990  008C                     	;# 
   991  008E                     	;# 
   992  0091                     	;# 
   993  0092                     	;# 
   994  0093                     	;# 
   995  0095                     	;# 
   996  0096                     	;# 
   997  0097                     	;# 
   998  0098                     	;# 
   999  0099                     	;# 
  1000  009A                     	;# 
  1001  009B                     	;# 
  1002  009B                     	;# 
  1003  009C                     	;# 
  1004  009D                     	;# 
  1005  009E                     	;# 
  1006  010C                     	;# 
  1007  010E                     	;# 
  1008  0111                     	;# 
  1009  0112                     	;# 
  1010  0113                     	;# 
  1011  0114                     	;# 
  1012  0115                     	;# 
  1013  0116                     	;# 
  1014  0117                     	;# 
  1015  0118                     	;# 
  1016  0119                     	;# 
  1017  011A                     	;# 
  1018  011B                     	;# 
  1019  011D                     	;# 
  1020  011E                     	;# 
  1021  018C                     	;# 
  1022  018E                     	;# 
  1023  0191                     	;# 
  1024  0191                     	;# 
  1025  0192                     	;# 
  1026  0193                     	;# 
  1027  0193                     	;# 
  1028  0193                     	;# 
  1029  0194                     	;# 
  1030  0195                     	;# 
  1031  0196                     	;# 
  1032  0199                     	;# 
  1033  019A                     	;# 
  1034  019B                     	;# 
  1035  019B                     	;# 
  1036  019C                     	;# 
  1037  019D                     	;# 
  1038  019E                     	;# 
  1039  019F                     	;# 
  1040  020C                     	;# 
  1041  020E                     	;# 
  1042  0211                     	;# 
  1043  0211                     	;# 
  1044  0212                     	;# 
  1045  0212                     	;# 
  1046  0213                     	;# 
  1047  0213                     	;# 
  1048  0214                     	;# 
  1049  0214                     	;# 
  1050  0215                     	;# 
  1051  0215                     	;# 
  1052  0215                     	;# 
  1053  0216                     	;# 
  1054  0216                     	;# 
  1055  0217                     	;# 
  1056  0217                     	;# 
  1057  0291                     	;# 
  1058  0291                     	;# 
  1059  0292                     	;# 
  1060  0293                     	;# 
  1061  0294                     	;# 
  1062  0295                     	;# 
  1063  0295                     	;# 
  1064  0296                     	;# 
  1065  0298                     	;# 
  1066  0298                     	;# 
  1067  0299                     	;# 
  1068  029A                     	;# 
  1069  029B                     	;# 
  1070  029C                     	;# 
  1071  029D                     	;# 
  1072  029E                     	;# 
  1073  0311                     	;# 
  1074  0311                     	;# 
  1075  0312                     	;# 
  1076  0313                     	;# 
  1077  0318                     	;# 
  1078  0318                     	;# 
  1079  0319                     	;# 
  1080  031A                     	;# 
  1081  038C                     	;# 
  1082  038E                     	;# 
  1083  0391                     	;# 
  1084  0392                     	;# 
  1085  0393                     	;# 
  1086  039A                     	;# 
  1087  039C                     	;# 
  1088  039D                     	;# 
  1089  039E                     	;# 
  1090  039F                     	;# 
  1091  0415                     	;# 
  1092  0416                     	;# 
  1093  0417                     	;# 
  1094  041C                     	;# 
  1095  041D                     	;# 
  1096  041E                     	;# 
  1097  0FE4                     	;# 
  1098  0FE5                     	;# 
  1099  0FE6                     	;# 
  1100  0FE7                     	;# 
  1101  0FE8                     	;# 
  1102  0FE9                     	;# 
  1103  0FEA                     	;# 
  1104  0FEB                     	;# 
  1105  0FED                     	;# 
  1106  0FEE                     	;# 
  1107  0FEF                     	;# 
  1108  0000                     	;# 
  1109  0001                     	;# 
  1110  0002                     	;# 
  1111  0003                     	;# 
  1112  0004                     	;# 
  1113  0005                     	;# 
  1114  0006                     	;# 
  1115  0007                     	;# 
  1116  0008                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000E                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0015                     	;# 
  1126  0016                     	;# 
  1127  0016                     	;# 
  1128  0017                     	;# 
  1129  0018                     	;# 
  1130  0019                     	;# 
  1131  001A                     	;# 
  1132  001B                     	;# 
  1133  001C                     	;# 
  1134  001E                     	;# 
  1135  001F                     	;# 
  1136  008C                     	;# 
  1137  008E                     	;# 
  1138  0091                     	;# 
  1139  0092                     	;# 
  1140  0093                     	;# 
  1141  0095                     	;# 
  1142  0096                     	;# 
  1143  0097                     	;# 
  1144  0098                     	;# 
  1145  0099                     	;# 
  1146  009A                     	;# 
  1147  009B                     	;# 
  1148  009B                     	;# 
  1149  009C                     	;# 
  1150  009D                     	;# 
  1151  009E                     	;# 
  1152  010C                     	;# 
  1153  010E                     	;# 
  1154  0111                     	;# 
  1155  0112                     	;# 
  1156  0113                     	;# 
  1157  0114                     	;# 
  1158  0115                     	;# 
  1159  0116                     	;# 
  1160  0117                     	;# 
  1161  0118                     	;# 
  1162  0119                     	;# 
  1163  011A                     	;# 
  1164  011B                     	;# 
  1165  011D                     	;# 
  1166  011E                     	;# 
  1167  018C                     	;# 
  1168  018E                     	;# 
  1169  0191                     	;# 
  1170  0191                     	;# 
  1171  0192                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0193                     	;# 
  1175  0194                     	;# 
  1176  0195                     	;# 
  1177  0196                     	;# 
  1178  0199                     	;# 
  1179  019A                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019C                     	;# 
  1183  019D                     	;# 
  1184  019E                     	;# 
  1185  019F                     	;# 
  1186  020C                     	;# 
  1187  020E                     	;# 
  1188  0211                     	;# 
  1189  0211                     	;# 
  1190  0212                     	;# 
  1191  0212                     	;# 
  1192  0213                     	;# 
  1193  0213                     	;# 
  1194  0214                     	;# 
  1195  0214                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0216                     	;# 
  1200  0216                     	;# 
  1201  0217                     	;# 
  1202  0217                     	;# 
  1203  0291                     	;# 
  1204  0291                     	;# 
  1205  0292                     	;# 
  1206  0293                     	;# 
  1207  0294                     	;# 
  1208  0295                     	;# 
  1209  0295                     	;# 
  1210  0296                     	;# 
  1211  0298                     	;# 
  1212  0298                     	;# 
  1213  0299                     	;# 
  1214  029A                     	;# 
  1215  029B                     	;# 
  1216  029C                     	;# 
  1217  029D                     	;# 
  1218  029E                     	;# 
  1219  0311                     	;# 
  1220  0311                     	;# 
  1221  0312                     	;# 
  1222  0313                     	;# 
  1223  0318                     	;# 
  1224  0318                     	;# 
  1225  0319                     	;# 
  1226  031A                     	;# 
  1227  038C                     	;# 
  1228  038E                     	;# 
  1229  0391                     	;# 
  1230  0392                     	;# 
  1231  0393                     	;# 
  1232  039A                     	;# 
  1233  039C                     	;# 
  1234  039D                     	;# 
  1235  039E                     	;# 
  1236  039F                     	;# 
  1237  0415                     	;# 
  1238  0416                     	;# 
  1239  0417                     	;# 
  1240  041C                     	;# 
  1241  041D                     	;# 
  1242  041E                     	;# 
  1243  0FE4                     	;# 
  1244  0FE5                     	;# 
  1245  0FE6                     	;# 
  1246  0FE7                     	;# 
  1247  0FE8                     	;# 
  1248  0FE9                     	;# 
  1249  0FEA                     	;# 
  1250  0FEB                     	;# 
  1251  0FED                     	;# 
  1252  0FEE                     	;# 
  1253  0FEF                     	;# 
  1254                           
  1255                           	psect	idataBANK0
  1256  045A                     __pidataBANK0:	
  1257                           
  1258                           ;initializer for main@F3040
  1259  045A  340A               	retlw	10
  1260  045B  3400               	retlw	0
  1261  045C  3400               	retlw	0
  1262  045D  3400               	retlw	0
  1263  045E  3400               	retlw	0
  1264  045F  3400               	retlw	0
  1265  0460  3400               	retlw	0
  1266  0461  3400               	retlw	0
  1267                           
  1268                           	psect	stringtext1
  1269  0450                     __pstringtext1:	
  1270  0450                     _dpowers:	
  1271  0450  3401               	retlw	1
  1272  0451  3400               	retlw	0
  1273  0452  340A               	retlw	10
  1274  0453  3400               	retlw	0
  1275  0454  3464               	retlw	100
  1276  0455  3400               	retlw	0
  1277  0456  34E8               	retlw	232
  1278  0457  3403               	retlw	3
  1279  0458  3410               	retlw	16
  1280  0459  3427               	retlw	39
  1281  045A                     __end_of_dpowers:	
  1282                           
  1283                           	psect	stringtext2
  1284  0462                     __pstringtext2:	
  1285  0462                     _ANALOG_IN:	
  1286  0462  3400               	retlw	0
  1287  0463  3401               	retlw	1
  1288  0464  3402               	retlw	2
  1289  0465  3403               	retlw	3
  1290  0466  3404               	retlw	4
  1291  0467  3405               	retlw	5
  1292  0468  3406               	retlw	6
  1293  0469  3407               	retlw	7
  1294  046A                     __end_of_ANALOG_IN:	
  1295                           
  1296                           	psect	nvBANK0
  1297  0051                     __pnvBANK0:	
  1298  0051                     _timer0ReloadVal:	
  1299  0051                     	ds	1
  1300  0052                     _eusartTxBufferRemaining:	
  1301  0052                     	ds	1
  1302  0015                     _TMR0	set	21
  1303  0011                     _PIR1bits	set	17
  1304  000B                     _INTCONbits	set	11
  1305  005A                     _TMR0IF	set	90
  1306  0095                     _OPTION_REG	set	149
  1307  009D                     _ADCON0bits	set	157
  1308  009C                     _ADRESH	set	156
  1309  009B                     _ADRESL	set	155
  1310  009E                     _ADCON1	set	158
  1311  009D                     _ADCON0	set	157
  1312  0097                     _WDTCON	set	151
  1313  0098                     _OSCTUNE	set	152
  1314  0099                     _OSCCON	set	153
  1315  0091                     _PIE1bits	set	145
  1316  0095                     _OPTION_REGbits	set	149
  1317  008E                     _TRISC	set	142
  1318  008C                     _TRISA	set	140
  1319  011D                     _APFCON0	set	285
  1320  011E                     _APFCON1	set	286
  1321  010E                     _LATC	set	270
  1322  010C                     _LATA	set	268
  1323  0196                     _EECON2	set	406
  1324  0193                     _EEDATL	set	403
  1325  0194                     _EEDATH	set	404
  1326  0195                     _EECON1bits	set	405
  1327  0192                     _EEADRH	set	402
  1328  0191                     _EEADRL	set	401
  1329  0199                     _RCREG	set	409
  1330  019A                     _TXREG	set	410
  1331  019D                     _RCSTAbits	set	413
  1332  019C                     _SPBRGH	set	412
  1333  019B                     _SPBRGL	set	411
  1334  019E                     _TXSTA	set	414
  1335  019D                     _RCSTA	set	413
  1336  019F                     _BAUDCON	set	415
  1337  018C                     _ANSELA	set	396
  1338  018E                     _ANSELC	set	398
  1339  020E                     _WPUC	set	526
  1340  020C                     _WPUA	set	524
  1341                           
  1342                           	psect	stringtext3
  1343  0495                     __pstringtext3:	
  1344  0495                     STR_4:	
  1345  0495  3425               	retlw	37	;'%'
  1346  0496  3464               	retlw	100	;'d'
  1347  0497  340A               	retlw	10
  1348  0498  3400               	retlw	0
  1349                           
  1350                           	psect	stringtext4
  1351  0499                     __pstringtext4:	
  1352  0499                     STR_3:	
  1353  0499  3425               	retlw	37	;'%'
  1354  049A  3464               	retlw	100	;'d'
  1355  049B  342C               	retlw	44	;','
  1356  049C  3400               	retlw	0
  1357                           
  1358                           	psect	stringtext5
  1359  04A5                     __pstringtext5:	
  1360  04A5                     STR_2:	
  1361  04A5  3466               	retlw	102	;'f'
  1362  04A6  343A               	retlw	58	;':'
  1363  04A7  3400               	retlw	0
  1364                           
  1365                           	psect	stringtext6
  1366  04A8                     __pstringtext6:	
  1367  04A8                     STR_1:	
  1368  04A8  3474               	retlw	116	;'t'
  1369  04A9  343A               	retlw	58	;':'
  1370  04AA  3400               	retlw	0
  1371                           
  1372                           	psect	stringtext7
  1373  0000                     __pstringtext7:	
  1374                           
  1375                           ; #config settings
  1376  0000                     
  1377                           	psect	cinit
  1378  0026                     start_initialization:	
  1379  0026                     __initialization:	
  1380                           
  1381                           ; Initialize objects allocated to BANK0
  1382  0026  305A               	movlw	low __pidataBANK0
  1383  0027  0084               	movwf	4
  1384  0028  3084               	movlw	(high __pidataBANK0)| (0+128)
  1385  0029  0085               	movwf	5
  1386  002A  3049               	movlw	low __pdataBANK0
  1387  002B  0086               	movwf	6
  1388  002C  3000               	movlw	high __pdataBANK0
  1389  002D  0087               	movwf	7
  1390  002E  3008               	movlw	8
  1391  002F  3184  2479  3180   	fcall	init_ram
  1392                           
  1393                           ; Clear objects allocated to COMMON
  1394  0032  01FA               	clrf	__pbssCOMMON& (0+127)
  1395  0033  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1396                           
  1397                           ; Clear objects allocated to BANK0
  1398  0034  3035               	movlw	low __pbssBANK0
  1399  0035  0084               	movwf	4
  1400  0036  3000               	movlw	high __pbssBANK0
  1401  0037  0085               	movwf	5
  1402  0038  3014               	movlw	20
  1403  0039  3184  247F         	fcall	clear_ram0
  1404  003B                     end_of_initialization:	
  1405                           ;End of C runtime variable initialization code
  1406                           
  1407  003B                     __end_of__initialization:	
  1408  003B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1409  003C  0020               	movlb	0
  1410  003D  3180  283F         	ljmp	_main	;jump to C main() function
  1411                           
  1412                           	psect	bssCOMMON
  1413  007A                     __pbssCOMMON:	
  1414  007A                     _eusartTxTail:	
  1415  007A                     	ds	1
  1416  007B                     _eusartTxHead:	
  1417  007B                     	ds	1
  1418                           
  1419                           	psect	bssBANK0
  1420  0035                     __pbssBANK0:	
  1421  0035                     _eusartRxBuffer:	
  1422  0035                     	ds	8
  1423  003D                     _eusartTxBuffer:	
  1424  003D                     	ds	8
  1425  0045                     _tmr:	
  1426  0045                     	ds	1
  1427  0046                     _eusartRxCount:	
  1428  0046                     	ds	1
  1429  0047                     _eusartRxTail:	
  1430  0047                     	ds	1
  1431  0048                     _eusartRxHead:	
  1432  0048                     	ds	1
  1433                           
  1434                           	psect	dataBANK0
  1435  0049                     __pdataBANK0:	
  1436  0049                     main@F3040:	
  1437  0049                     	ds	8
  1438                           
  1439                           	psect	inittext
  1440  0479                     init_ram:	
  1441  0479  00FE               	movwf	126
  1442  047A                     initloop:	
  1443  047A  0012               	moviw fsr0++
  1444  047B  001E               	movwi fsr1++
  1445  047C  0BFE               	decfsz	126,f
  1446  047D  2C7A               	goto	initloop
  1447  047E  3400               	retlw	0
  1448                           
  1449                           	psect	clrtext
  1450  047F                     clear_ram0:	
  1451                           ;	Called with FSR0 containing the base address, and
  1452                           ;	WREG with the size to clear
  1453                           
  1454  047F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1455  0480                     clrloop0:	
  1456  0480  0180               	clrf	0	;clear RAM location pointed to by FSR
  1457  0481  3101               	addfsr 0,1
  1458  0482  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1459  0483  2C80               	goto	clrloop0	;have we reached the end yet?
  1460  0484  3400               	retlw	0	;all done for this memory range, return
  1461                           
  1462                           	psect	cstackBANK1
  1463  00A0                     __pcstackBANK1:	
  1464  00A0                     main@level:	
  1465                           
  1466                           ; 16 bytes @ 0x0
  1467  00A0                     	ds	16
  1468  00B0                     main@buf:	
  1469                           
  1470                           ; 8 bytes @ 0x10
  1471  00B0                     	ds	8
  1472  00B8                     main@c:	
  1473                           
  1474                           ; 1 bytes @ 0x18
  1475  00B8                     	ds	1
  1476  00B9                     main@channels:	
  1477                           
  1478                           ; 1 bytes @ 0x19
  1479  00B9                     	ds	1
  1480  00BA                     main@cnt:	
  1481                           
  1482                           ; 1 bytes @ 0x1A
  1483  00BA                     	ds	1
  1484  00BB                     main@t_max:	
  1485                           
  1486                           ; 1 bytes @ 0x1B
  1487  00BB                     	ds	1
  1488  00BC                     main@mask:	
  1489                           
  1490                           ; 1 bytes @ 0x1C
  1491  00BC                     	ds	1
  1492  00BD                     main@i:	
  1493                           
  1494                           ; 1 bytes @ 0x1D
  1495  00BD                     	ds	1
  1496                           
  1497                           	psect	cstackCOMMON
  1498  0070                     __pcstackCOMMON:	
  1499  0070                     ?_isdigit:	
  1500  0070                     ?_EUSART_Transmit_ISR:	
  1501                           ; 1 bit 
  1502                           
  1503  0070                     ??_EUSART_Transmit_ISR:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ?_EUSART_Receive_ISR:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ??_EUSART_Receive_ISR:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_OSCILLATOR_Initialize:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_WDT_Initialize:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_TMR0_Initialize:	
  1519                           ; 1 bytes @ 0x0
  1520                           
  1521  0070                     ?_ADC_Initialize:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0070                     ?_EUSART_Initialize:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0070                     ?_DATAEE_ReadByte:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0070                     ?_PIN_MANAGER_Initialize:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0070                     ?_INTERRUPT_InterruptManager:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0070                     ?_SYSTEM_Initialize:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0070                     ?_EUSART_Read:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0070                     ?_EUSART_Write:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0070                     ?_putch:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0070                     ?_ADC_SelectChannel:	
  1549                           ; 1 bytes @ 0x0
  1550                           
  1551  0070                     ?_ADC_StartConversion:	
  1552                           ; 1 bytes @ 0x0
  1553                           
  1554  0070                     ?_ADC_IsConversionDone:	
  1555                           ; 1 bytes @ 0x0
  1556                           
  1557  0070                     ?_TMR0_HasOverflowOccured:	
  1558                           ; 1 bytes @ 0x0
  1559                           
  1560  0070                     ?_main:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563                           
  1564                           ; 1 bytes @ 0x0
  1565  0070                     	ds	1
  1566  0071                     ??_INTERRUPT_InterruptManager:	
  1567                           
  1568                           ; 1 bytes @ 0x1
  1569  0071                     	ds	1
  1570  0072                     ??_OSCILLATOR_Initialize:	
  1571  0072                     ??_WDT_Initialize:	
  1572                           ; 1 bytes @ 0x2
  1573                           
  1574  0072                     ??_TMR0_Initialize:	
  1575                           ; 1 bytes @ 0x2
  1576                           
  1577  0072                     ??_ADC_Initialize:	
  1578                           ; 1 bytes @ 0x2
  1579                           
  1580  0072                     ??_EUSART_Initialize:	
  1581                           ; 1 bytes @ 0x2
  1582                           
  1583  0072                     ??_DATAEE_ReadByte:	
  1584                           ; 1 bytes @ 0x2
  1585                           
  1586  0072                     ?_DATAEE_WriteByte:	
  1587                           ; 1 bytes @ 0x2
  1588                           
  1589  0072                     ??_isdigit:	
  1590                           ; 1 bytes @ 0x2
  1591                           
  1592  0072                     ??_PIN_MANAGER_Initialize:	
  1593                           ; 1 bytes @ 0x2
  1594                           
  1595  0072                     ??_EUSART_Read:	
  1596                           ; 1 bytes @ 0x2
  1597                           
  1598  0072                     ??_EUSART_Write:	
  1599                           ; 1 bytes @ 0x2
  1600                           
  1601  0072                     ??_ADC_SelectChannel:	
  1602                           ; 1 bytes @ 0x2
  1603                           
  1604  0072                     ??_ADC_StartConversion:	
  1605                           ; 1 bytes @ 0x2
  1606                           
  1607  0072                     ??_ADC_IsConversionDone:	
  1608                           ; 1 bytes @ 0x2
  1609                           
  1610  0072                     ??_TMR0_HasOverflowOccured:	
  1611                           ; 1 bytes @ 0x2
  1612                           
  1613  0072                     ?_strncmp:	
  1614                           ; 1 bytes @ 0x2
  1615                           
  1616  0072                     ?_ADC_GetConversionResult:	
  1617                           ; 2 bytes @ 0x2
  1618                           
  1619  0072                     ?___wmul:	
  1620                           ; 2 bytes @ 0x2
  1621                           
  1622  0072                     ?___lwdiv:	
  1623                           ; 2 bytes @ 0x2
  1624                           
  1625  0072                     DATAEE_WriteByte@bData:	
  1626                           ; 2 bytes @ 0x2
  1627                           
  1628  0072                     DATAEE_ReadByte@bAdd:	
  1629                           ; 1 bytes @ 0x2
  1630                           
  1631  0072                     _isdigit$788:	
  1632                           ; 1 bytes @ 0x2
  1633                           
  1634  0072                     ___wmul@multiplier:	
  1635                           ; 1 bytes @ 0x2
  1636                           
  1637  0072                     ___lwdiv@divisor:	
  1638                           ; 2 bytes @ 0x2
  1639                           
  1640  0072                     strncmp@s1:	
  1641                           ; 2 bytes @ 0x2
  1642                           
  1643                           
  1644                           ; 2 bytes @ 0x2
  1645  0072                     	ds	1
  1646  0073                     ??_DATAEE_WriteByte:	
  1647  0073                     ??_SYSTEM_Initialize:	
  1648                           ; 1 bytes @ 0x3
  1649                           
  1650  0073                     EUSART_Read@readValue:	
  1651                           ; 1 bytes @ 0x3
  1652                           
  1653  0073                     EUSART_Write@txData:	
  1654                           ; 1 bytes @ 0x3
  1655                           
  1656  0073                     ADC_SelectChannel@channel:	
  1657                           ; 1 bytes @ 0x3
  1658                           
  1659  0073                     DATAEE_WriteByte@bAdd:	
  1660                           ; 1 bytes @ 0x3
  1661                           
  1662  0073                     isdigit@c:	
  1663                           ; 1 bytes @ 0x3
  1664                           
  1665                           
  1666                           ; 1 bytes @ 0x3
  1667  0073                     	ds	1
  1668  0074                     ??_putch:	
  1669  0074                     ??_ADC_GetConversionResult:	
  1670                           ; 1 bytes @ 0x4
  1671                           
  1672  0074                     putch@txData:	
  1673                           ; 1 bytes @ 0x4
  1674                           
  1675  0074                     DATAEE_WriteByte@GIEBitValue:	
  1676                           ; 1 bytes @ 0x4
  1677                           
  1678  0074                     strncmp@s2:	
  1679                           ; 1 bytes @ 0x4
  1680                           
  1681  0074                     ___wmul@multiplicand:	
  1682                           ; 1 bytes @ 0x4
  1683                           
  1684  0074                     ___lwdiv@dividend:	
  1685                           ; 2 bytes @ 0x4
  1686                           
  1687                           
  1688                           ; 2 bytes @ 0x4
  1689  0074                     	ds	1
  1690  0075                     strncmp@len:	
  1691                           
  1692                           ; 2 bytes @ 0x5
  1693  0075                     	ds	1
  1694  0076                     ??___wmul:	
  1695  0076                     ??___lwdiv:	
  1696                           ; 1 bytes @ 0x6
  1697                           
  1698  0076                     ___wmul@product:	
  1699                           ; 1 bytes @ 0x6
  1700                           
  1701                           
  1702                           ; 2 bytes @ 0x6
  1703  0076                     	ds	1
  1704  0077                     ??_strncmp:	
  1705  0077                     ___lwdiv@counter:	
  1706                           ; 1 bytes @ 0x7
  1707                           
  1708                           
  1709                           ; 1 bytes @ 0x7
  1710  0077                     	ds	1
  1711  0078                     ?_atoi:	
  1712  0078                     ___lwdiv@quotient:	
  1713                           ; 2 bytes @ 0x8
  1714                           
  1715                           
  1716                           ; 2 bytes @ 0x8
  1717  0078                     	ds	2
  1718                           
  1719                           	psect	cstackBANK0
  1720  0020                     __pcstackBANK0:	
  1721  0020                     ??_atoi:	
  1722  0020                     ?___lwmod:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0020                     ___lwmod@divisor:	
  1726                           ; 2 bytes @ 0x0
  1727                           
  1728                           
  1729                           ; 2 bytes @ 0x0
  1730  0020                     	ds	2
  1731  0022                     atoi@sign:	
  1732  0022                     ___lwmod@dividend:	
  1733                           ; 1 bytes @ 0x2
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x2
  1737  0022                     	ds	1
  1738  0023                     atoi@a:	
  1739                           
  1740                           ; 2 bytes @ 0x3
  1741  0023                     	ds	1
  1742  0024                     ??___lwmod:	
  1743                           
  1744                           ; 1 bytes @ 0x4
  1745  0024                     	ds	1
  1746  0025                     atoi@s:	
  1747  0025                     ___lwmod@counter:	
  1748                           ; 1 bytes @ 0x5
  1749                           
  1750                           
  1751                           ; 1 bytes @ 0x5
  1752  0025                     	ds	1
  1753  0026                     ?_printf:	
  1754  0026                     printf@f:	
  1755                           ; 2 bytes @ 0x6
  1756                           
  1757                           
  1758                           ; 2 bytes @ 0x6
  1759  0026                     	ds	4
  1760  002A                     ??_printf:	
  1761                           
  1762                           ; 1 bytes @ 0xA
  1763  002A                     	ds	4
  1764  002E                     printf@ap:	
  1765                           
  1766                           ; 1 bytes @ 0xE
  1767  002E                     	ds	1
  1768  002F                     printf@flag:	
  1769                           
  1770                           ; 1 bytes @ 0xF
  1771  002F                     	ds	1
  1772  0030                     printf@prec:	
  1773                           
  1774                           ; 1 bytes @ 0x10
  1775  0030                     	ds	1
  1776  0031                     printf@val:	
  1777                           
  1778                           ; 2 bytes @ 0x11
  1779  0031                     	ds	2
  1780  0033                     printf@c:	
  1781                           
  1782                           ; 1 bytes @ 0x13
  1783  0033                     	ds	1
  1784  0034                     ??_main:	
  1785                           
  1786                           ; 1 bytes @ 0x14
  1787  0034                     	ds	1
  1788                           
  1789                           	psect	maintext
  1790  003F                     __pmaintext:	
  1791 ;;
  1792 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1793 ;;
  1794 ;; *************** function _main *****************
  1795 ;; Defined at:
  1796 ;;		line 16 in file "main.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  i               1   29[BANK1 ] unsigned char 
  1801 ;;  level          16    0[BANK1 ] unsigned int [8]
  1802 ;;  buf             8   16[BANK1 ] unsigned char [8]
  1803 ;;  mask            1   28[BANK1 ] unsigned char 
  1804 ;;  t_max           1   27[BANK1 ] unsigned char 
  1805 ;;  cnt             1   26[BANK1 ] unsigned char 
  1806 ;;  channels        1   25[BANK1 ] unsigned char 
  1807 ;;  c               1   24[BANK1 ] unsigned char 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : B1F/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1818 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0
  1819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1820 ;;      Totals:         0       1      30       0       0       0       0       0       0       0       0       0       
      +0       0
  1821 ;;Total ram usage:       31 bytes
  1822 ;; Hardware stack levels required when called:    5
  1823 ;; This function calls:
  1824 ;;		_ADC_GetConversionResult
  1825 ;;		_ADC_IsConversionDone
  1826 ;;		_ADC_SelectChannel
  1827 ;;		_ADC_StartConversion
  1828 ;;		_DATAEE_ReadByte
  1829 ;;		_DATAEE_WriteByte
  1830 ;;		_EUSART_Read
  1831 ;;		_SYSTEM_Initialize
  1832 ;;		_TMR0_HasOverflowOccured
  1833 ;;		_atoi
  1834 ;;		_printf
  1835 ;;		_strncmp
  1836 ;; This function is called by:
  1837 ;;		Startup code after reset
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _main
  1843  003F                     _main:	
  1844                           
  1845                           ;main.c: 19: SYSTEM_Initialize();
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1849  003F  3184  2409  3180   	fcall	_SYSTEM_Initialize
  1850                           
  1851                           ;main.c: 20: (INTCONbits.GIE = 1);
  1852  0042  178B               	bsf	11,7	;volatile
  1853                           
  1854                           ;main.c: 21: (INTCONbits.PEIE = 1);
  1855  0043  170B               	bsf	11,6	;volatile
  1856                           
  1857                           ;main.c: 24: uint8_t buf[8] = {'\n'};
  1858  0044  3049               	movlw	low main@F3040
  1859  0045  0086               	movwf	6
  1860  0046  3000               	movlw	high main@F3040
  1861  0047  0087               	movwf	7
  1862  0048  30B0               	movlw	low main@buf
  1863  0049  0084               	movwf	4
  1864  004A  3000               	movlw	high main@buf
  1865  004B  0085               	movwf	5
  1866  004C  3008               	movlw	8
  1867  004D  0020               	movlb	0	; select bank0
  1868  004E  00B4               	movwf	??_main
  1869  004F                     u1780:	
  1870  004F  0016               	moviw fsr1++
  1871  0050  001A               	movwi fsr0++
  1872  0051  0BB4               	decfsz	??_main,f
  1873  0052  284F               	goto	u1780
  1874                           
  1875                           ;main.c: 25: uint8_t cnt = 0;
  1876  0053  0021               	movlb	1	; select bank1
  1877  0054  01BA               	clrf	main@cnt^(0+128)
  1878                           
  1879                           ;main.c: 26: uint8_t c;
  1880                           ;main.c: 27: uint8_t t_max = DATAEE_ReadByte(0);
  1881  0055  3000               	movlw	0
  1882  0056  3184  2444  3180   	fcall	_DATAEE_ReadByte
  1883  0059  0020               	movlb	0	; select bank0
  1884  005A  00B4               	movwf	??_main
  1885  005B  0834               	movf	??_main,w
  1886  005C  0021               	movlb	1	; select bank1
  1887  005D  00BB               	movwf	main@t_max^(0+128)
  1888                           
  1889                           ;main.c: 28: uint8_t channels = DATAEE_ReadByte(1);
  1890  005E  3001               	movlw	1
  1891  005F  3184  2444  3180   	fcall	_DATAEE_ReadByte
  1892  0062  0020               	movlb	0	; select bank0
  1893  0063  00B4               	movwf	??_main
  1894  0064  0834               	movf	??_main,w
  1895  0065  0021               	movlb	1	; select bank1
  1896  0066  00B9               	movwf	main@channels^(0+128)
  1897                           
  1898                           ;main.c: 29: adc_result_t level[8];
  1899                           ;main.c: 30: uint8_t mask = 0b00000001;
  1900  0067  01BC               	clrf	main@mask^(0+128)
  1901  0068  0ABC               	incf	main@mask^(0+128),f
  1902  0069                     l2218:	
  1903                           ;main.c: 32: while (1)
  1904                           
  1905                           
  1906                           ;main.c: 33: {
  1907                           ;main.c: 34: uint8_t i;
  1908                           ;main.c: 35: c = EUSART_Read();
  1909  0069  3183  2347  3180   	fcall	_EUSART_Read
  1910  006C  0020               	movlb	0	; select bank0
  1911  006D  00B4               	movwf	??_main
  1912  006E  0834               	movf	??_main,w
  1913  006F  0021               	movlb	1	; select bank1
  1914  0070  00B8               	movwf	main@c^(0+128)
  1915                           
  1916                           ;main.c: 36: buf[cnt++] = c;
  1917  0071  0838               	movf	main@c^(0+128),w
  1918  0072  0020               	movlb	0	; select bank0
  1919  0073  00B4               	movwf	??_main
  1920  0074  0021               	movlb	1	; select bank1
  1921  0075  083A               	movf	main@cnt^(0+128),w
  1922  0076  3EB0               	addlw	(low (main@buf| 0))& (0+255)
  1923  0077  0086               	movwf	6
  1924  0078  0187               	clrf	7
  1925  0079  0020               	movlb	0	; select bank0
  1926  007A  0834               	movf	??_main,w
  1927  007B  0081               	movwf	1
  1928  007C  3001               	movlw	1
  1929  007D  00B4               	movwf	??_main
  1930  007E  0834               	movf	??_main,w
  1931  007F  0021               	movlb	1	; select bank1
  1932  0080  07BA               	addwf	main@cnt^(0+128),f
  1933                           
  1934                           ;main.c: 37: if (c == '\n') {
  1935  0081  300A               	movlw	10
  1936  0082  0638               	xorwf	main@c^(0+128),w
  1937  0083  1D03               	btfss	3,2
  1938  0084  28E1               	goto	l2244
  1939                           
  1940                           ;main.c: 38: buf[cnt] = '\0';
  1941  0085  083A               	movf	main@cnt^(0+128),w
  1942  0086  3EB0               	addlw	(low (main@buf| 0))& (0+255)
  1943  0087  0086               	movwf	6
  1944  0088  0187               	clrf	7
  1945  0089  0181               	clrf	1
  1946                           
  1947                           ;main.c: 39: cnt = 0;
  1948  008A  01BA               	clrf	main@cnt^(0+128)
  1949                           
  1950                           ;main.c: 40: t_max = atoi(buf);
  1951  008B  30B0               	movlw	(low (main@buf| 0))& (0+255)
  1952  008C  3182  221A  3180   	fcall	_atoi
  1953  008F  0878               	movf	?_atoi,w
  1954  0090  0020               	movlb	0	; select bank0
  1955  0091  00B4               	movwf	??_main
  1956  0092  0834               	movf	??_main,w
  1957  0093  0021               	movlb	1	; select bank1
  1958  0094  00BB               	movwf	main@t_max^(0+128)
  1959                           
  1960                           ;main.c: 41: if (strncmp("t:", buf, 2) == 0) {
  1961  0095  30A8               	movlw	low (STR_1| (0+32768))
  1962  0096  00F2               	movwf	strncmp@s1
  1963  0097  3084               	movlw	high (STR_1| (0+32768))
  1964  0098  00F3               	movwf	strncmp@s1+1
  1965  0099  30B0               	movlw	(low (main@buf| 0))& (0+255)
  1966  009A  0020               	movlb	0	; select bank0
  1967  009B  00B4               	movwf	??_main
  1968  009C  0834               	movf	??_main,w
  1969  009D  00F4               	movwf	strncmp@s2
  1970  009E  3002               	movlw	2
  1971  009F  00F5               	movwf	strncmp@len
  1972  00A0  3000               	movlw	0
  1973  00A1  00F6               	movwf	strncmp@len+1
  1974  00A2  3182  2285  3180   	fcall	_strncmp
  1975  00A5  0872               	movf	?_strncmp,w
  1976  00A6  0473               	iorwf	?_strncmp+1,w
  1977  00A7  1D03               	btfss	3,2
  1978  00A8  28BA               	goto	l2238
  1979                           
  1980                           ;main.c: 42: t_max = atoi(&buf[2]);
  1981  00A9  30B2               	movlw	(low ((main@buf| 0+2)))& (0+255)
  1982  00AA  3182  221A  3180   	fcall	_atoi
  1983  00AD  0878               	movf	?_atoi,w
  1984  00AE  0020               	movlb	0	; select bank0
  1985  00AF  00B4               	movwf	??_main
  1986  00B0  0834               	movf	??_main,w
  1987  00B1  0021               	movlb	1	; select bank1
  1988  00B2  00BB               	movwf	main@t_max^(0+128)
  1989                           
  1990                           ;main.c: 43: DATAEE_WriteByte(0, t_max);
  1991  00B3  083B               	movf	main@t_max^(0+128),w
  1992  00B4  0020               	movlb	0	; select bank0
  1993  00B5  00B4               	movwf	??_main
  1994  00B6  0834               	movf	??_main,w
  1995  00B7  00F2               	movwf	DATAEE_WriteByte@bData
  1996  00B8  3000               	movlw	0
  1997  00B9  28DE               	goto	L1
  1998  00BA                     l2238:	
  1999                           ;main.c: 44: } else if (strncmp("f:", buf, 2) == 0) {
  2000                           
  2001  00BA  30A5               	movlw	low (STR_2| (0+32768))
  2002  00BB  00F2               	movwf	strncmp@s1
  2003  00BC  3084               	movlw	high (STR_2| (0+32768))
  2004  00BD  00F3               	movwf	strncmp@s1+1
  2005  00BE  30B0               	movlw	(low (main@buf| 0))& (0+255)
  2006  00BF  0020               	movlb	0	; select bank0
  2007  00C0  00B4               	movwf	??_main
  2008  00C1  0834               	movf	??_main,w
  2009  00C2  00F4               	movwf	strncmp@s2
  2010  00C3  3002               	movlw	2
  2011  00C4  00F5               	movwf	strncmp@len
  2012  00C5  3000               	movlw	0
  2013  00C6  00F6               	movwf	strncmp@len+1
  2014  00C7  3182  2285  3180   	fcall	_strncmp
  2015  00CA  0872               	movf	?_strncmp,w
  2016  00CB  0473               	iorwf	?_strncmp+1,w
  2017  00CC  1D03               	btfss	3,2
  2018  00CD  28E1               	goto	l2244
  2019                           
  2020                           ;main.c: 45: channels = atoi(&buf[2]);
  2021  00CE  30B2               	movlw	(low ((main@buf| 0+2)))& (0+255)
  2022  00CF  3182  221A  3180   	fcall	_atoi
  2023  00D2  0878               	movf	?_atoi,w
  2024  00D3  0020               	movlb	0	; select bank0
  2025  00D4  00B4               	movwf	??_main
  2026  00D5  0834               	movf	??_main,w
  2027  00D6  0021               	movlb	1	; select bank1
  2028  00D7  00B9               	movwf	main@channels^(0+128)
  2029                           
  2030                           ;main.c: 46: DATAEE_WriteByte(1, channels);
  2031  00D8  0839               	movf	main@channels^(0+128),w
  2032  00D9  0020               	movlb	0	; select bank0
  2033  00DA  00B4               	movwf	??_main
  2034  00DB  0834               	movf	??_main,w
  2035  00DC  00F2               	movwf	DATAEE_WriteByte@bData
  2036  00DD  3001               	movlw	1
  2037  00DE                     L1:	
  2038  00DE  3183  2367  3180   	fcall	_DATAEE_WriteByte
  2039  00E1                     l2244:	
  2040                           
  2041                           ;main.c: 47: }
  2042                           ;main.c: 48: }
  2043                           ;main.c: 49: if (TMR0_HasOverflowOccured()) {
  2044  00E1  3184  249D  3180   	fcall	_TMR0_HasOverflowOccured
  2045  00E4  3A00               	xorlw	0
  2046  00E5  1903               	skipnz
  2047  00E6  2869               	goto	l2218
  2048                           
  2049                           ;main.c: 50: TMR0IF = 0;
  2050  00E7  110B               	bcf	11,2	;volatile
  2051                           
  2052                           ;main.c: 51: if (++tmr >= t_max) {
  2053  00E8  3001               	movlw	1
  2054  00E9  0020               	movlb	0	; select bank0
  2055  00EA  00B4               	movwf	??_main
  2056  00EB  0834               	movf	??_main,w
  2057  00EC  07C5               	addwf	_tmr,f
  2058  00ED  0021               	movlb	1	; select bank1
  2059  00EE  083B               	movf	main@t_max^(0+128),w
  2060  00EF  0020               	movlb	0	; select bank0
  2061  00F0  0245               	subwf	_tmr,w
  2062  00F1  1C03               	skipc
  2063  00F2  2869               	goto	l2218
  2064                           
  2065                           ;main.c: 52: tmr = 0;
  2066  00F3  01C5               	clrf	_tmr
  2067                           
  2068                           ;main.c: 53: mask = 0b00000001;
  2069  00F4  0021               	movlb	1	; select bank1
  2070  00F5  01BC               	clrf	main@mask^(0+128)
  2071  00F6  0ABC               	incf	main@mask^(0+128),f
  2072                           
  2073                           ;main.c: 54: for (i=0; i<8; i++) {
  2074  00F7  01BD               	clrf	main@i^(0+128)
  2075  00F8  3008               	movlw	8
  2076  00F9  023D               	subwf	main@i^(0+128),w
  2077  00FA  1803               	btfsc	3,0
  2078  00FB  2930               	goto	l2274
  2079  00FC                     l2258:	
  2080                           
  2081                           ;main.c: 55: if (mask & channels) {
  2082  00FC  083C               	movf	main@mask^(0+128),w
  2083  00FD  0539               	andwf	main@channels^(0+128),w
  2084  00FE  1903               	btfsc	3,2
  2085  00FF  2920               	goto	l2268
  2086                           
  2087                           ;main.c: 56: ADC_SelectChannel(ANALOG_IN[i]);
  2088  0100  083D               	movf	main@i^(0+128),w
  2089  0101  3E62               	addlw	low (_ANALOG_IN| (0+32768))
  2090  0102  0084               	movwf	4
  2091  0103  3084               	movlw	high (_ANALOG_IN| (0+32768))
  2092  0104  1803               	skipnc
  2093  0105  3E01               	addlw	1
  2094  0106  0085               	movwf	5
  2095  0107  0800               	movf	0,w	;code access
  2096  0108  3184  2437  3180   	fcall	_ADC_SelectChannel
  2097                           
  2098                           ;main.c: 57: ADC_StartConversion();
  2099  010B  3184  24AB  3180   	fcall	_ADC_StartConversion
  2100  010E                     l2264:	
  2101                           ;main.c: 58: while(!ADC_IsConversionDone());
  2102                           
  2103  010E  3184  2472  3180   	fcall	_ADC_IsConversionDone
  2104  0111  3A00               	xorlw	0
  2105  0112  1903               	skipnz
  2106  0113  290E               	goto	l2264
  2107                           
  2108                           ;main.c: 59: level[i] = ADC_GetConversionResult();
  2109  0114  3184  2485  3180   	fcall	_ADC_GetConversionResult
  2110  0117  0021               	movlb	1	; select bank1
  2111  0118  353D               	lslf	main@i^(0+128),w
  2112  0119  3EA0               	addlw	(low (main@level| 0))& (0+255)
  2113  011A  0086               	movwf	6
  2114  011B  0187               	clrf	7
  2115  011C  0872               	movf	?_ADC_GetConversionResult,w
  2116  011D  3FC0               	movwi [0]fsr1
  2117  011E  0873               	movf	?_ADC_GetConversionResult+1,w
  2118  011F  3FC1               	movwi [1]fsr1
  2119  0120                     l2268:	
  2120                           
  2121                           ;main.c: 60: }
  2122                           ;main.c: 61: mask = mask << 1;
  2123  0120  353C               	lslf	main@mask^(0+128),w
  2124  0121  0020               	movlb	0	; select bank0
  2125  0122  00B4               	movwf	??_main
  2126  0123  0834               	movf	??_main,w
  2127  0124  0021               	movlb	1	; select bank1
  2128  0125  00BC               	movwf	main@mask^(0+128)
  2129  0126  3001               	movlw	1
  2130  0127  0020               	movlb	0	; select bank0
  2131  0128  00B4               	movwf	??_main
  2132  0129  0834               	movf	??_main,w
  2133  012A  0021               	movlb	1	; select bank1
  2134  012B  07BD               	addwf	main@i^(0+128),f
  2135  012C  3008               	movlw	8
  2136  012D  023D               	subwf	main@i^(0+128),w
  2137  012E  1C03               	skipc
  2138  012F  28FC               	goto	l2258
  2139  0130                     l2274:	
  2140                           
  2141                           ;main.c: 62: }
  2142                           ;main.c: 63: for (i=0; i<7; i++) {
  2143  0130  01BD               	clrf	main@i^(0+128)
  2144  0131  3007               	movlw	7
  2145  0132  023D               	subwf	main@i^(0+128),w
  2146  0133  1803               	btfsc	3,0
  2147  0134  2951               	goto	l2286
  2148  0135                     l2280:	
  2149                           
  2150                           ;main.c: 64: printf("%d,", level[i]);
  2151  0135  3099               	movlw	low (STR_3| (0+32768))
  2152  0136  0020               	movlb	0	; select bank0
  2153  0137  00A6               	movwf	printf@f
  2154  0138  3084               	movlw	high (STR_3| (0+32768))
  2155  0139  00A7               	movwf	printf@f+1
  2156  013A  0021               	movlb	1	; select bank1
  2157  013B  353D               	lslf	main@i^(0+128),w
  2158  013C  3EA0               	addlw	(low (main@level| 0))& (0+255)
  2159  013D  0086               	movwf	6
  2160  013E  0187               	clrf	7
  2161  013F  3F40               	moviw [0]fsr1
  2162  0140  0020               	movlb	0	; select bank0
  2163  0141  00A8               	movwf	?_printf+2
  2164  0142  3F41               	moviw [1]fsr1
  2165  0143  00A9               	movwf	?_printf+3
  2166  0144  3181  2162  3180   	fcall	_printf
  2167  0147  3001               	movlw	1
  2168  0148  0020               	movlb	0	; select bank0
  2169  0149  00B4               	movwf	??_main
  2170  014A  0834               	movf	??_main,w
  2171  014B  0021               	movlb	1	; select bank1
  2172  014C  07BD               	addwf	main@i^(0+128),f
  2173  014D  3007               	movlw	7
  2174  014E  023D               	subwf	main@i^(0+128),w
  2175  014F  1C03               	skipc
  2176  0150  2935               	goto	l2280
  2177  0151                     l2286:	
  2178                           
  2179                           ;main.c: 65: }
  2180                           ;main.c: 66: printf("%d\n", level[7]);
  2181  0151  3095               	movlw	low (STR_4| (0+32768))
  2182  0152  0020               	movlb	0	; select bank0
  2183  0153  00A6               	movwf	printf@f
  2184  0154  3084               	movlw	high (STR_4| (0+32768))
  2185  0155  00A7               	movwf	printf@f+1
  2186  0156  0021               	movlb	1	; select bank1
  2187  0157  082F               	movf	((main@level+1)^(0+128)+14),w
  2188  0158  0020               	movlb	0	; select bank0
  2189  0159  00A9               	movwf	?_printf+3
  2190  015A  0021               	movlb	1	; select bank1
  2191  015B  082E               	movf	(main@level^(0+128)+14),w
  2192  015C  0020               	movlb	0	; select bank0
  2193  015D  00A8               	movwf	?_printf+2
  2194  015E  3181  2162  3180   	fcall	_printf
  2195  0161  2869               	goto	l2218
  2196  0162                     __end_of_main:	
  2197                           
  2198                           	psect	text1
  2199  0285                     __ptext1:	
  2200 ;; *************** function _strncmp *****************
  2201 ;; Defined at:
  2202 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strncmp.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  s1              2    2[COMMON] PTR const unsigned char 
  2205 ;;		 -> STR_2(3), STR_1(3), 
  2206 ;;  s2              1    4[COMMON] PTR const unsigned char 
  2207 ;;		 -> main@buf(8), 
  2208 ;;  len             2    5[COMMON] unsigned int 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  2    2[COMMON] int 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2220 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2223 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2224 ;;Total ram usage:        7 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           
  2235                           ;psect for function _strncmp
  2236  0285                     _strncmp:	
  2237  0285                     l2124:	
  2238                           ;incstack = 0
  2239                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  2240                           
  2241  0285  3001               	movlw	1
  2242  0286  02F5               	subwf	strncmp@len,f
  2243  0287  3000               	movlw	0
  2244  0288  3BF6               	subwfb	strncmp@len+1,f
  2245  0289  0A75               	incf	strncmp@len,w
  2246  028A  1903               	btfsc	3,2
  2247  028B  0A76               	incf	strncmp@len+1,w
  2248  028C  1903               	btfsc	3,2
  2249  028D  2AC0               	goto	l2126
  2250  028E  0872               	movf	strncmp@s1,w
  2251  028F  0084               	movwf	4
  2252  0290  0873               	movf	strncmp@s1+1,w
  2253  0291  0085               	movwf	5
  2254  0292  0012               	moviw fsr0++
  2255  0293  1903               	btfsc	3,2
  2256  0294  2AA0               	goto	l2116
  2257  0295  0874               	movf	strncmp@s2,w
  2258  0296  0086               	movwf	6
  2259  0297  0187               	clrf	7
  2260  0298  0872               	movf	strncmp@s1,w
  2261  0299  0084               	movwf	4
  2262  029A  0873               	movf	strncmp@s1+1,w
  2263  029B  0085               	movwf	5
  2264  029C  0800               	movf	0,w	;code access
  2265  029D  0601               	xorwf	1,w
  2266  029E  1903               	skipnz
  2267  029F  2AB7               	goto	l2120
  2268  02A0                     l2116:	
  2269  02A0  0874               	movf	strncmp@s2,w
  2270  02A1  0086               	movwf	6
  2271  02A2  0187               	clrf	7
  2272  02A3  0801               	movf	1,w
  2273  02A4  00F7               	movwf	??_strncmp
  2274  02A5  01F8               	clrf	??_strncmp+1
  2275  02A6  09F7               	comf	??_strncmp,f
  2276  02A7  09F8               	comf	??_strncmp+1,f
  2277  02A8  0AF7               	incf	??_strncmp,f
  2278  02A9  1903               	skipnz
  2279  02AA  0AF8               	incf	??_strncmp+1,f
  2280  02AB  0872               	movf	strncmp@s1,w
  2281  02AC  0084               	movwf	4
  2282  02AD  0873               	movf	strncmp@s1+1,w
  2283  02AE  0085               	movwf	5
  2284  02AF  0800               	movf	0,w	;code access
  2285  02B0  0777               	addwf	??_strncmp,w
  2286  02B1  00F2               	movwf	?_strncmp
  2287  02B2  0878               	movf	??_strncmp+1,w
  2288  02B3  1803               	skipnc
  2289  02B4  0A78               	incf	??_strncmp+1,w
  2290  02B5  00F3               	movwf	?_strncmp+1
  2291  02B6  0008               	return
  2292  02B7                     l2120:	
  2293  02B7  3001               	movlw	1
  2294  02B8  07F2               	addwf	strncmp@s1,f
  2295  02B9  3000               	movlw	0
  2296  02BA  3DF3               	addwfc	strncmp@s1+1,f
  2297  02BB  3001               	movlw	1
  2298  02BC  00F7               	movwf	??_strncmp
  2299  02BD  0877               	movf	??_strncmp,w
  2300  02BE  07F4               	addwf	strncmp@s2,f
  2301  02BF  2A85               	goto	l2124
  2302  02C0                     l2126:	
  2303  02C0  01F2               	clrf	?_strncmp
  2304  02C1  01F3               	clrf	?_strncmp+1
  2305  02C2  0008               	return
  2306  02C3                     __end_of_strncmp:	
  2307                           
  2308                           	psect	text2
  2309  0162                     __ptext2:	
  2310 ;; *************** function _printf *****************
  2311 ;; Defined at:
  2312 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  2315 ;;		 -> STR_4(4), STR_3(4), 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  tmpval          4    0        struct .
  2318 ;;  val             2   17[BANK0 ] unsigned int 
  2319 ;;  cp              2    0        PTR const unsigned char 
  2320 ;;  len             2    0        unsigned int 
  2321 ;;  c               1   19[BANK0 ] char 
  2322 ;;  prec            1   16[BANK0 ] char 
  2323 ;;  flag            1   15[BANK0 ] unsigned char 
  2324 ;;  ap              1   14[BANK0 ] PTR void [1]
  2325 ;;		 -> ?_printf(2), 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  2    6[BANK0 ] int 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2335 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2336 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2337 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2338 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2339 ;;Total ram usage:       14 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    4
  2342 ;; This function calls:
  2343 ;;		___lwdiv
  2344 ;;		___lwmod
  2345 ;;		_putch
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _printf
  2353  0162                     _printf:	
  2354                           
  2355                           ;doprnt.c: 466: va_list ap;
  2356                           ;doprnt.c: 499: signed char c;
  2357                           ;doprnt.c: 506: signed char prec;
  2358                           ;doprnt.c: 508: unsigned char flag;
  2359                           ;doprnt.c: 523: union {
  2360                           ;doprnt.c: 524: unsigned long vd;
  2361                           ;doprnt.c: 525: double integ;
  2362                           ;doprnt.c: 526: } tmpval;
  2363                           ;doprnt.c: 528: unsigned int val;
  2364                           ;doprnt.c: 529: unsigned len;
  2365                           ;doprnt.c: 530: const char * cp;
  2366                           ;doprnt.c: 533: *ap = __va_start();
  2367                           
  2368                           ;incstack = 0
  2369                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2370  0162  3028               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2371  0163  0020               	movlb	0	; select bank0
  2372  0164  00AA               	movwf	??_printf
  2373  0165  082A               	movf	??_printf,w
  2374  0166  00AE               	movwf	printf@ap
  2375  0167                     l2196:	
  2376                           ;doprnt.c: 536: while(c = *f++) {
  2377                           
  2378  0167  0020               	movlb	0	; select bank0
  2379  0168  0827               	movf	printf@f+1,w
  2380  0169  00AB               	movwf	??_printf+1
  2381  016A  0826               	movf	printf@f,w
  2382  016B  00AA               	movwf	??_printf
  2383  016C  0AA6               	incf	printf@f,f
  2384  016D  1903               	skipnz
  2385  016E  0AA7               	incf	printf@f+1,f
  2386  016F  082A               	movf	??_printf,w
  2387  0170  0084               	movwf	4
  2388  0171  082B               	movf	??_printf+1,w
  2389  0172  0085               	movwf	5
  2390  0173  0800               	movf	0,w	;code access
  2391  0174  00AC               	movwf	??_printf+2
  2392  0175  082C               	movf	??_printf+2,w
  2393  0176  00B3               	movwf	printf@c
  2394  0177  0833               	movf	printf@c,w
  2395  0178  1903               	btfsc	3,2
  2396  0179  0008               	return
  2397                           
  2398                           ;doprnt.c: 538: if(c != '%')
  2399  017A  3025               	movlw	37
  2400  017B  0633               	xorwf	printf@c,w
  2401  017C  1903               	btfsc	3,2
  2402  017D  2983               	goto	l2156
  2403                           
  2404                           ;doprnt.c: 540: {
  2405                           ;doprnt.c: 541: (putch(c) );
  2406  017E  0833               	movf	printf@c,w
  2407  017F  3184  248B  3181   	fcall	_putch
  2408                           
  2409                           ;doprnt.c: 542: continue;
  2410  0182  2967               	goto	l2196
  2411  0183                     l2156:	
  2412                           
  2413                           ;doprnt.c: 543: }
  2414                           ;doprnt.c: 548: flag = 0;
  2415  0183  0020               	movlb	0	; select bank0
  2416  0184  01AF               	clrf	printf@flag
  2417                           
  2418                           ;doprnt.c: 822: }
  2419                           
  2420                           ;doprnt.c: 813: continue;
  2421                           
  2422                           ;doprnt.c: 802: default:
  2423                           
  2424                           ;doprnt.c: 698: case 'i':
  2425                           ;doprnt.c: 699: break;
  2426                           
  2427                           ;doprnt.c: 697: case 'd':
  2428                           
  2429                           ;doprnt.c: 638: goto alldone;
  2430                           
  2431                           ;doprnt.c: 637: case 0:
  2432                           
  2433                           ;doprnt.c: 635: switch(c = *f++) {
  2434  0185  0827               	movf	printf@f+1,w
  2435  0186  00AB               	movwf	??_printf+1
  2436  0187  0826               	movf	printf@f,w
  2437  0188  00AA               	movwf	??_printf
  2438  0189  0AA6               	incf	printf@f,f
  2439  018A  1903               	skipnz
  2440  018B  0AA7               	incf	printf@f+1,f
  2441  018C  082A               	movf	??_printf,w
  2442  018D  0084               	movwf	4
  2443  018E  082B               	movf	??_printf+1,w
  2444  018F  0085               	movwf	5
  2445  0190  0800               	movf	0,w	;code access
  2446  0191  00B3               	movwf	printf@c
  2447                           
  2448                           ; Switch size 1, requested type "space"
  2449                           ; Number of cases is 3, Range of values is 0 to 105
  2450                           ; switch strategies available:
  2451                           ; Name         Instructions Cycles
  2452                           ; simple_byte           10     6 (average)
  2453                           ; direct_byte          218     6 (fixed)
  2454                           ; jumptable            260     6 (fixed)
  2455                           ;	Chosen strategy is simple_byte
  2456  0192  3A00               	xorlw	0	; case 0
  2457  0193  1903               	skipnz
  2458  0194  2A19               	goto	l333
  2459  0195  3A64               	xorlw	100	; case 100
  2460  0196  1903               	skipnz
  2461  0197  299C               	goto	l2162
  2462  0198  3A0D               	xorlw	13	; case 105
  2463  0199  1903               	skipnz
  2464  019A  299C               	goto	l2162
  2465  019B  2967               	goto	l2196
  2466  019C                     l2162:	
  2467                           
  2468                           ;doprnt.c: 1253: {
  2469                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2470  019C  082E               	movf	printf@ap,w
  2471  019D  0086               	movwf	6
  2472  019E  0187               	clrf	7
  2473  019F  3F40               	moviw [0]fsr1
  2474  01A0  00B1               	movwf	printf@val
  2475  01A1  3F41               	moviw [1]fsr1
  2476  01A2  00B2               	movwf	printf@val+1
  2477  01A3  3002               	movlw	2
  2478  01A4  00AA               	movwf	??_printf
  2479  01A5  082A               	movf	??_printf,w
  2480  01A6  07AE               	addwf	printf@ap,f
  2481                           
  2482                           ;doprnt.c: 1261: if((int)val < 0) {
  2483  01A7  1FB2               	btfss	printf@val+1,7
  2484  01A8  29B2               	goto	l2172
  2485                           
  2486                           ;doprnt.c: 1262: flag |= 0x03;
  2487  01A9  3003               	movlw	3
  2488  01AA  00AA               	movwf	??_printf
  2489  01AB  082A               	movf	??_printf,w
  2490  01AC  04AF               	iorwf	printf@flag,f
  2491                           
  2492                           ;doprnt.c: 1263: val = -val;
  2493  01AD  09B1               	comf	printf@val,f
  2494  01AE  09B2               	comf	printf@val+1,f
  2495  01AF  0AB1               	incf	printf@val,f
  2496  01B0  1903               	skipnz
  2497  01B1  0AB2               	incf	printf@val+1,f
  2498  01B2                     l2172:	
  2499                           
  2500                           ;doprnt.c: 1264: }
  2501                           ;doprnt.c: 1266: }
  2502                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2503  01B2  01B3               	clrf	printf@c
  2504  01B3  0AB3               	incf	printf@c,f
  2505  01B4  3005               	movlw	5
  2506  01B5  0633               	xorwf	printf@c,w
  2507  01B6  1903               	btfsc	3,2
  2508  01B7  29D7               	goto	l2184
  2509  01B8                     l2178:	
  2510                           
  2511                           ;doprnt.c: 1306: if(val < dpowers[c])
  2512  01B8  0833               	movf	printf@c,w
  2513  01B9  00AA               	movwf	??_printf
  2514  01BA  01AB               	clrf	??_printf+1
  2515  01BB  35AA               	lslf	??_printf,f
  2516  01BC  0DAB               	rlf	??_printf+1,f
  2517  01BD  3050               	movlw	low (_dpowers| (0+32768))
  2518  01BE  072A               	addwf	??_printf,w
  2519  01BF  0084               	movwf	4
  2520  01C0  3084               	movlw	high (_dpowers| (0+32768))
  2521  01C1  3D2B               	addwfc	??_printf+1,w
  2522  01C2  0085               	movwf	5
  2523  01C3  3F00               	moviw [0]fsr0
  2524  01C4  00AC               	movwf	??_printf+2
  2525  01C5  3F01               	moviw [1]fsr0
  2526  01C6  00AD               	movwf	??_printf+3
  2527  01C7  082D               	movf	??_printf+3,w
  2528  01C8  0232               	subwf	printf@val+1,w
  2529  01C9  1D03               	skipz
  2530  01CA  29CD               	goto	u1735
  2531  01CB  082C               	movf	??_printf+2,w
  2532  01CC  0231               	subwf	printf@val,w
  2533  01CD                     u1735:	
  2534  01CD  1C03               	btfss	3,0
  2535  01CE  29D7               	goto	l2184
  2536                           
  2537                           ;doprnt.c: 1307: break;
  2538  01CF  3001               	movlw	1
  2539  01D0  00AA               	movwf	??_printf
  2540  01D1  082A               	movf	??_printf,w
  2541  01D2  07B3               	addwf	printf@c,f
  2542  01D3  3005               	movlw	5
  2543  01D4  0633               	xorwf	printf@c,w
  2544  01D5  1D03               	btfss	3,2
  2545  01D6  29B8               	goto	l2178
  2546  01D7                     l2184:	
  2547                           
  2548                           ;doprnt.c: 1422: {
  2549                           ;doprnt.c: 1438: if(flag & 0x03)
  2550  01D7  082F               	movf	printf@flag,w
  2551  01D8  3903               	andlw	3
  2552  01D9  1903               	btfsc	3,2
  2553  01DA  29DF               	goto	l2188
  2554                           
  2555                           ;doprnt.c: 1439: (putch('-') );
  2556  01DB  302D               	movlw	45
  2557  01DC  3184  248B  3181   	fcall	_putch
  2558  01DF                     l2188:	
  2559                           
  2560                           ;doprnt.c: 1469: }
  2561                           ;doprnt.c: 1472: prec = c;
  2562  01DF  0020               	movlb	0	; select bank0
  2563  01E0  0833               	movf	printf@c,w
  2564  01E1  00AA               	movwf	??_printf
  2565  01E2  082A               	movf	??_printf,w
  2566  01E3  00B0               	movwf	printf@prec
  2567  01E4                     l2194:	
  2568                           ;doprnt.c: 1474: while(prec--) {
  2569                           
  2570  01E4  30FF               	movlw	255
  2571  01E5  0020               	movlb	0	; select bank0
  2572  01E6  00AA               	movwf	??_printf
  2573  01E7  082A               	movf	??_printf,w
  2574  01E8  07B0               	addwf	printf@prec,f
  2575  01E9  0A30               	incf	printf@prec,w
  2576  01EA  1903               	btfsc	3,2
  2577  01EB  2967               	goto	l2196
  2578                           
  2579                           ;doprnt.c: 1478: {
  2580                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2581  01EC  300A               	movlw	10
  2582  01ED  00A0               	movwf	___lwmod@divisor
  2583  01EE  3000               	movlw	0
  2584  01EF  00A1               	movwf	___lwmod@divisor+1
  2585  01F0  0830               	movf	printf@prec,w
  2586  01F1  00AA               	movwf	??_printf
  2587  01F2  01AB               	clrf	??_printf+1
  2588  01F3  35AA               	lslf	??_printf,f
  2589  01F4  0DAB               	rlf	??_printf+1,f
  2590  01F5  3050               	movlw	low (_dpowers| (0+32768))
  2591  01F6  072A               	addwf	??_printf,w
  2592  01F7  0084               	movwf	4
  2593  01F8  3084               	movlw	high (_dpowers| (0+32768))
  2594  01F9  3D2B               	addwfc	??_printf+1,w
  2595  01FA  0085               	movwf	5
  2596  01FB  3F00               	moviw [0]fsr0
  2597  01FC  00F2               	movwf	___lwdiv@divisor
  2598  01FD  3F01               	moviw [1]fsr0
  2599  01FE  00F3               	movwf	___lwdiv@divisor+1
  2600  01FF  0832               	movf	printf@val+1,w
  2601  0200  00F5               	movwf	___lwdiv@dividend+1
  2602  0201  0831               	movf	printf@val,w
  2603  0202  00F4               	movwf	___lwdiv@dividend
  2604  0203  3182  22C3  3181   	fcall	___lwdiv
  2605  0206  0873               	movf	?___lwdiv+1,w
  2606  0207  0020               	movlb	0	; select bank0
  2607  0208  00A3               	movwf	___lwmod@dividend+1
  2608  0209  0872               	movf	?___lwdiv,w
  2609  020A  00A2               	movwf	___lwmod@dividend
  2610  020B  3182  22F7  3181   	fcall	___lwmod
  2611  020E  0020               	movlb	0	; select bank0
  2612  020F  0820               	movf	?___lwmod,w
  2613  0210  3E30               	addlw	48
  2614  0211  00AC               	movwf	??_printf+2
  2615  0212  082C               	movf	??_printf+2,w
  2616  0213  00B3               	movwf	printf@c
  2617                           
  2618                           ;doprnt.c: 1523: }
  2619                           ;doprnt.c: 1524: (putch(c) );
  2620  0214  0833               	movf	printf@c,w
  2621  0215  3184  248B  3181   	fcall	_putch
  2622  0218  29E4               	goto	l2194
  2623  0219                     l333:	
  2624                           ;doprnt.c: 1540: return 0;
  2625                           ;	Return value of _printf is never used
  2626                           
  2627                           ;doprnt.c: 1525: }
  2628                           ;doprnt.c: 1533: }
  2629                           ;doprnt.c: 1535: alldone:
  2630                           
  2631  0219  0008               	return
  2632  021A                     __end_of_printf:	
  2633                           
  2634                           	psect	text3
  2635  048B                     __ptext3:	
  2636 ;; *************** function _putch *****************
  2637 ;; Defined at:
  2638 ;;		line 161 in file "mcc_generated_files/eusart.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  txData          1    wreg     unsigned char 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  txData          1    4[COMMON] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2656 ;;Total ram usage:        1 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    3
  2659 ;; This function calls:
  2660 ;;		_EUSART_Write
  2661 ;; This function is called by:
  2662 ;;		_printf
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _putch
  2668  048B                     _putch:	
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2672                           ;putch@txData stored from wreg
  2673  048B  00F4               	movwf	putch@txData
  2674                           
  2675                           ;eusart.c: 163: EUSART_Write(txData);
  2676  048C  0874               	movf	putch@txData,w
  2677  048D  3183  2324         	fcall	_EUSART_Write
  2678  048F  0008               	return
  2679  0490                     __end_of_putch:	
  2680                           
  2681                           	psect	text4
  2682  0324                     __ptext4:	
  2683 ;; *************** function _EUSART_Write *****************
  2684 ;; Defined at:
  2685 ;;		line 133 in file "mcc_generated_files/eusart.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  txData          1    wreg     unsigned char 
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  txData          1    3[COMMON] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2702 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2703 ;;Total ram usage:        2 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    2
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_putch
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function _EUSART_Write
  2715  0324                     _EUSART_Write:	
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2719                           ;EUSART_Write@txData stored from wreg
  2720  0324  00F3               	movwf	EUSART_Write@txData
  2721  0325                     l1876:	
  2722                           ;eusart.c: 136: {
  2723                           
  2724                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  2725                           
  2726  0325  0020               	movlb	0	; select bank0
  2727  0326  0852               	movf	_eusartTxBufferRemaining,w	;volatile
  2728  0327  1903               	btfsc	3,2
  2729  0328  2B25               	goto	l1876
  2730                           
  2731                           ;eusart.c: 137: }
  2732                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  2733  0329  0021               	movlb	1	; select bank1
  2734  032A  1A11               	btfsc	17,4	;volatile
  2735  032B  2B30               	goto	l124
  2736                           
  2737                           ;eusart.c: 140: {
  2738                           ;eusart.c: 141: TXREG = txData;
  2739  032C  0873               	movf	EUSART_Write@txData,w
  2740  032D  0023               	movlb	3	; select bank3
  2741  032E  009A               	movwf	26	;volatile
  2742                           
  2743                           ;eusart.c: 142: }
  2744  032F  2B44               	goto	l1890
  2745  0330                     l124:	
  2746                           
  2747                           ;eusart.c: 143: else
  2748                           ;eusart.c: 144: {
  2749                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  2750  0330  1211               	bcf	17,4	;volatile
  2751                           
  2752                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  2753  0331  0873               	movf	EUSART_Write@txData,w
  2754  0332  00F2               	movwf	??_EUSART_Write
  2755  0333  087B               	movf	_eusartTxHead,w
  2756  0334  3E3D               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  2757  0335  0086               	movwf	6
  2758  0336  0187               	clrf	7
  2759  0337  0872               	movf	??_EUSART_Write,w
  2760  0338  0081               	movwf	1
  2761  0339  3001               	movlw	1
  2762  033A  00F2               	movwf	??_EUSART_Write
  2763  033B  0872               	movf	??_EUSART_Write,w
  2764  033C  07FB               	addwf	_eusartTxHead,f	;volatile
  2765                           
  2766                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2767  033D  3008               	movlw	8
  2768  033E  027B               	subwf	_eusartTxHead,w	;volatile
  2769  033F  1803               	btfsc	3,0
  2770                           
  2771                           ;eusart.c: 148: {
  2772                           ;eusart.c: 149: eusartTxHead = 0;
  2773  0340  01FB               	clrf	_eusartTxHead	;volatile
  2774                           
  2775                           ;eusart.c: 150: }
  2776                           ;eusart.c: 151: eusartTxBufferRemaining--;
  2777  0341  3001               	movlw	1
  2778  0342  0020               	movlb	0	; select bank0
  2779  0343  02D2               	subwf	_eusartTxBufferRemaining,f	;volatile
  2780  0344                     l1890:	
  2781                           
  2782                           ;eusart.c: 152: }
  2783                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  2784  0344  0021               	movlb	1	; select bank1
  2785  0345  1611               	bsf	17,4	;volatile
  2786  0346  0008               	return
  2787  0347                     __end_of_EUSART_Write:	
  2788                           
  2789                           	psect	text5
  2790  02F7                     __ptext5:	
  2791 ;; *************** function ___lwmod *****************
  2792 ;; Defined at:
  2793 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  divisor         2    0[BANK0 ] unsigned int 
  2796 ;;  dividend        2    2[BANK0 ] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  counter         1    5[BANK0 ] unsigned char 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  2    0[BANK0 ] unsigned int 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2808 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2811 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2812 ;;Total ram usage:        6 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    2
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_printf
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           
  2823                           ;psect for function ___lwmod
  2824  02F7                     ___lwmod:	
  2825                           
  2826                           ;incstack = 0
  2827                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2828  02F7  0020               	movlb	0	; select bank0
  2829  02F8  0820               	movf	___lwmod@divisor,w
  2830  02F9  0421               	iorwf	___lwmod@divisor+1,w
  2831  02FA  1903               	btfsc	3,2
  2832  02FB  2B1F               	goto	l2014
  2833  02FC  01A5               	clrf	___lwmod@counter
  2834  02FD  0AA5               	incf	___lwmod@counter,f
  2835  02FE                     l2004:	
  2836  02FE  1BA1               	btfsc	___lwmod@divisor+1,7
  2837  02FF  2B0A               	goto	l2006
  2838  0300  3001               	movlw	1
  2839  0301                     u1535:	
  2840  0301  35A0               	lslf	___lwmod@divisor,f
  2841  0302  0DA1               	rlf	___lwmod@divisor+1,f
  2842  0303  0B89               	decfsz	9,f
  2843  0304  2B01               	goto	u1535
  2844  0305  3001               	movlw	1
  2845  0306  00A4               	movwf	??___lwmod
  2846  0307  0824               	movf	??___lwmod,w
  2847  0308  07A5               	addwf	___lwmod@counter,f
  2848  0309  2AFE               	goto	l2004
  2849  030A                     l2006:	
  2850  030A  0821               	movf	___lwmod@divisor+1,w
  2851  030B  0223               	subwf	___lwmod@dividend+1,w
  2852  030C  1D03               	skipz
  2853  030D  2B10               	goto	u1555
  2854  030E  0820               	movf	___lwmod@divisor,w
  2855  030F  0222               	subwf	___lwmod@dividend,w
  2856  0310                     u1555:	
  2857  0310  1C03               	skipc
  2858  0311  2B16               	goto	l2010
  2859  0312  0820               	movf	___lwmod@divisor,w
  2860  0313  02A2               	subwf	___lwmod@dividend,f
  2861  0314  0821               	movf	___lwmod@divisor+1,w
  2862  0315  3BA3               	subwfb	___lwmod@dividend+1,f
  2863  0316                     l2010:	
  2864  0316  3001               	movlw	1
  2865  0317                     u1565:	
  2866  0317  36A1               	lsrf	___lwmod@divisor+1,f
  2867  0318  0CA0               	rrf	___lwmod@divisor,f
  2868  0319  0B89               	decfsz	9,f
  2869  031A  2B17               	goto	u1565
  2870  031B  3001               	movlw	1
  2871  031C  02A5               	subwf	___lwmod@counter,f
  2872  031D  1D03               	btfss	3,2
  2873  031E  2B0A               	goto	l2006
  2874  031F                     l2014:	
  2875  031F  0823               	movf	___lwmod@dividend+1,w
  2876  0320  00A1               	movwf	?___lwmod+1
  2877  0321  0822               	movf	___lwmod@dividend,w
  2878  0322  00A0               	movwf	?___lwmod
  2879  0323  0008               	return
  2880  0324                     __end_of___lwmod:	
  2881                           
  2882                           	psect	text6
  2883  02C3                     __ptext6:	
  2884 ;; *************** function ___lwdiv *****************
  2885 ;; Defined at:
  2886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  divisor         2    2[COMMON] unsigned int 
  2889 ;;  dividend        2    4[COMMON] unsigned int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  quotient        2    8[COMMON] unsigned int 
  2892 ;;  counter         1    7[COMMON] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  2    2[COMMON] unsigned int 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2905 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2906 ;;Total ram usage:        8 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    2
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_printf
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function ___lwdiv
  2918  02C3                     ___lwdiv:	
  2919                           
  2920                           ;incstack = 0
  2921                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2922  02C3  01F8               	clrf	___lwdiv@quotient
  2923  02C4  01F9               	clrf	___lwdiv@quotient+1
  2924  02C5  0872               	movf	___lwdiv@divisor,w
  2925  02C6  0473               	iorwf	___lwdiv@divisor+1,w
  2926  02C7  1903               	btfsc	3,2
  2927  02C8  2AF2               	goto	l1992
  2928  02C9  01F7               	clrf	___lwdiv@counter
  2929  02CA  0AF7               	incf	___lwdiv@counter,f
  2930  02CB                     l1980:	
  2931  02CB  1BF3               	btfsc	___lwdiv@divisor+1,7
  2932  02CC  2AD7               	goto	l1982
  2933  02CD  3001               	movlw	1
  2934  02CE                     u1465:	
  2935  02CE  35F2               	lslf	___lwdiv@divisor,f
  2936  02CF  0DF3               	rlf	___lwdiv@divisor+1,f
  2937  02D0  0B89               	decfsz	9,f
  2938  02D1  2ACE               	goto	u1465
  2939  02D2  3001               	movlw	1
  2940  02D3  00F6               	movwf	??___lwdiv
  2941  02D4  0876               	movf	??___lwdiv,w
  2942  02D5  07F7               	addwf	___lwdiv@counter,f
  2943  02D6  2ACB               	goto	l1980
  2944  02D7                     l1982:	
  2945  02D7  3001               	movlw	1
  2946  02D8                     u1485:	
  2947  02D8  35F8               	lslf	___lwdiv@quotient,f
  2948  02D9  0DF9               	rlf	___lwdiv@quotient+1,f
  2949  02DA  0B89               	decfsz	9,f
  2950  02DB  2AD8               	goto	u1485
  2951  02DC  0873               	movf	___lwdiv@divisor+1,w
  2952  02DD  0275               	subwf	___lwdiv@dividend+1,w
  2953  02DE  1D03               	skipz
  2954  02DF  2AE2               	goto	u1495
  2955  02E0  0872               	movf	___lwdiv@divisor,w
  2956  02E1  0274               	subwf	___lwdiv@dividend,w
  2957  02E2                     u1495:	
  2958  02E2  1C03               	skipc
  2959  02E3  2AE9               	goto	l1988
  2960  02E4  0872               	movf	___lwdiv@divisor,w
  2961  02E5  02F4               	subwf	___lwdiv@dividend,f
  2962  02E6  0873               	movf	___lwdiv@divisor+1,w
  2963  02E7  3BF5               	subwfb	___lwdiv@dividend+1,f
  2964  02E8  1478               	bsf	___lwdiv@quotient,0
  2965  02E9                     l1988:	
  2966  02E9  3001               	movlw	1
  2967  02EA                     u1505:	
  2968  02EA  36F3               	lsrf	___lwdiv@divisor+1,f
  2969  02EB  0CF2               	rrf	___lwdiv@divisor,f
  2970  02EC  0B89               	decfsz	9,f
  2971  02ED  2AEA               	goto	u1505
  2972  02EE  3001               	movlw	1
  2973  02EF  02F7               	subwf	___lwdiv@counter,f
  2974  02F0  1D03               	btfss	3,2
  2975  02F1  2AD7               	goto	l1982
  2976  02F2                     l1992:	
  2977  02F2  0879               	movf	___lwdiv@quotient+1,w
  2978  02F3  00F3               	movwf	?___lwdiv+1
  2979  02F4  0878               	movf	___lwdiv@quotient,w
  2980  02F5  00F2               	movwf	?___lwdiv
  2981  02F6  0008               	return
  2982  02F7                     __end_of___lwdiv:	
  2983                           
  2984                           	psect	text7
  2985  021A                     __ptext7:	
  2986 ;; *************** function _atoi *****************
  2987 ;; Defined at:
  2988 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\atoi.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  s               1    wreg     PTR const unsigned char 
  2991 ;;		 -> main@buf(8), 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  s               1    5[BANK0 ] PTR const unsigned char 
  2994 ;;		 -> main@buf(8), 
  2995 ;;  a               2    3[BANK0 ] int 
  2996 ;;  sign            1    2[BANK0 ] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  2    8[COMMON] int 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3007 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3009 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;Total ram usage:        8 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    3
  3013 ;; This function calls:
  3014 ;;		___wmul
  3015 ;;		_isdigit
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _atoi
  3023  021A                     _atoi:	
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3027                           ;atoi@s stored from wreg
  3028  021A  0020               	movlb	0	; select bank0
  3029  021B  00A5               	movwf	atoi@s
  3030  021C                     l2080:	
  3031  021C  0825               	movf	atoi@s,w
  3032  021D  0086               	movwf	6
  3033  021E  0187               	clrf	7
  3034  021F  3020               	movlw	32
  3035  0220  0601               	xorwf	1,w
  3036  0221  1D03               	btfss	3,2
  3037  0222  2A28               	goto	l2082
  3038  0223                     l2078:	
  3039  0223  3001               	movlw	1
  3040  0224  00A0               	movwf	??_atoi
  3041  0225  0820               	movf	??_atoi,w
  3042  0226  07A5               	addwf	atoi@s,f
  3043  0227  2A1C               	goto	l2080
  3044  0228                     l2082:	
  3045  0228  0825               	movf	atoi@s,w
  3046  0229  0086               	movwf	6
  3047  022A  0187               	clrf	7
  3048  022B  3009               	movlw	9
  3049  022C  0601               	xorwf	1,w
  3050  022D  1903               	btfsc	3,2
  3051  022E  2A23               	goto	l2078
  3052  022F  01A3               	clrf	atoi@a
  3053  0230  01A4               	clrf	atoi@a+1
  3054  0231  01A2               	clrf	atoi@sign
  3055  0232  0825               	movf	atoi@s,w
  3056  0233  0086               	movwf	6
  3057  0234  0187               	clrf	7
  3058  0235  302D               	movlw	45
  3059  0236  0601               	xorwf	1,w
  3060  0237  1D03               	btfss	3,2
  3061  0238  2A3E               	goto	l2090
  3062  0239  3001               	movlw	1
  3063  023A  00A0               	movwf	??_atoi
  3064  023B  0820               	movf	??_atoi,w
  3065  023C  07A2               	addwf	atoi@sign,f
  3066  023D  2A45               	goto	l2096
  3067  023E                     l2090:	
  3068  023E  0825               	movf	atoi@s,w
  3069  023F  0086               	movwf	6
  3070  0240  0187               	clrf	7
  3071  0241  302B               	movlw	43
  3072  0242  0601               	xorwf	1,w
  3073  0243  1D03               	btfss	3,2
  3074  0244  2A49               	goto	l2098
  3075  0245                     l2096:	
  3076  0245  3001               	movlw	1
  3077  0246  00A0               	movwf	??_atoi
  3078  0247  0820               	movf	??_atoi,w
  3079  0248  07A5               	addwf	atoi@s,f
  3080  0249                     l2098:	
  3081  0249  0825               	movf	atoi@s,w
  3082  024A  0086               	movwf	6
  3083  024B  0187               	clrf	7
  3084  024C  0801               	movf	1,w
  3085  024D  3184  241B  3182   	fcall	_isdigit
  3086  0250  1C03               	btfss	3,0
  3087  0251  2A70               	goto	l2100
  3088  0252  0020               	movlb	0	; select bank0
  3089  0253  0824               	movf	atoi@a+1,w
  3090  0254  00F3               	movwf	___wmul@multiplier+1
  3091  0255  0823               	movf	atoi@a,w
  3092  0256  00F2               	movwf	___wmul@multiplier
  3093  0257  300A               	movlw	10
  3094  0258  00F4               	movwf	___wmul@multiplicand
  3095  0259  3000               	movlw	0
  3096  025A  00F5               	movwf	___wmul@multiplicand+1
  3097  025B  3183  23A1  3182   	fcall	___wmul
  3098  025E  0020               	movlb	0	; select bank0
  3099  025F  0825               	movf	atoi@s,w
  3100  0260  0086               	movwf	6
  3101  0261  0187               	clrf	7
  3102  0262  0801               	movf	1,w
  3103  0263  0772               	addwf	?___wmul,w
  3104  0264  00A0               	movwf	??_atoi
  3105  0265  0873               	movf	?___wmul+1,w
  3106  0266  1803               	skipnc
  3107  0267  0A73               	incf	?___wmul+1,w
  3108  0268  00A1               	movwf	??_atoi+1
  3109  0269  0820               	movf	??_atoi,w
  3110  026A  3ED0               	addlw	208
  3111  026B  00A3               	movwf	atoi@a
  3112  026C  30FF               	movlw	255
  3113  026D  3D21               	addwfc	??_atoi+1,w
  3114  026E  00A4               	movwf	atoi@a+1
  3115  026F  2A45               	goto	l2096
  3116  0270                     l2100:	
  3117  0270  0020               	movlb	0	; select bank0
  3118  0271  0822               	movf	atoi@sign,w
  3119  0272  1903               	btfsc	3,2
  3120  0273  2A80               	goto	l2106
  3121  0274  0923               	comf	atoi@a,w
  3122  0275  00A0               	movwf	??_atoi
  3123  0276  0924               	comf	atoi@a+1,w
  3124  0277  00A1               	movwf	??_atoi+1
  3125  0278  0AA0               	incf	??_atoi,f
  3126  0279  1903               	skipnz
  3127  027A  0AA1               	incf	??_atoi+1,f
  3128  027B  0820               	movf	??_atoi,w
  3129  027C  00F8               	movwf	?_atoi
  3130  027D  0821               	movf	??_atoi+1,w
  3131  027E  00F9               	movwf	?_atoi+1
  3132  027F  0008               	return
  3133  0280                     l2106:	
  3134  0280  0824               	movf	atoi@a+1,w
  3135  0281  00F9               	movwf	?_atoi+1
  3136  0282  0823               	movf	atoi@a,w
  3137  0283  00F8               	movwf	?_atoi
  3138  0284  0008               	return
  3139  0285                     __end_of_atoi:	
  3140                           
  3141                           	psect	text8
  3142  041B                     __ptext8:	
  3143 ;; *************** function _isdigit *****************
  3144 ;; Defined at:
  3145 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  c               1    wreg     unsigned char 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  c               1    3[COMMON] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;		None               void
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3163 ;;Total ram usage:        2 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    2
  3166 ;; This function calls:
  3167 ;;		Nothing
  3168 ;; This function is called by:
  3169 ;;		_atoi
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           
  3174                           ;psect for function _isdigit
  3175  041B                     _isdigit:	
  3176                           
  3177                           ;incstack = 0
  3178                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3179                           ;isdigit@c stored from wreg
  3180  041B  00F3               	movwf	isdigit@c
  3181  041C  01F2               	clrf	_isdigit$788
  3182  041D  303A               	movlw	58
  3183  041E  0273               	subwf	isdigit@c,w
  3184  041F  1803               	skipnc
  3185  0420  2C27               	goto	l1966
  3186  0421  3030               	movlw	48
  3187  0422  0273               	subwf	isdigit@c,w
  3188  0423  1C03               	skipc
  3189  0424  2C27               	goto	l1966
  3190  0425  01F2               	clrf	_isdigit$788
  3191  0426  0AF2               	incf	_isdigit$788,f
  3192  0427                     l1966:	
  3193  0427  0C72               	rrf	_isdigit$788,w
  3194  0428  0008               	return
  3195  0429                     __end_of_isdigit:	
  3196                           
  3197                           	psect	text9
  3198  03A1                     __ptext9:	
  3199 ;; *************** function ___wmul *****************
  3200 ;; Defined at:
  3201 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  multiplier      2    2[COMMON] unsigned int 
  3204 ;;  multiplicand    2    4[COMMON] unsigned int 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  product         2    6[COMMON] unsigned int 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  2    2[COMMON] unsigned int 
  3209 ;; Registers used:
  3210 ;;		wreg, status,2, status,0
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3219 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3220 ;;Total ram usage:        6 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    2
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_atoi
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           
  3231                           ;psect for function ___wmul
  3232  03A1                     ___wmul:	
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3236  03A1  01F6               	clrf	___wmul@product
  3237  03A2  01F7               	clrf	___wmul@product+1
  3238  03A3                     l1946:	
  3239  03A3  1C72               	btfss	___wmul@multiplier,0
  3240  03A4  2BA9               	goto	l417
  3241  03A5  0874               	movf	___wmul@multiplicand,w
  3242  03A6  07F6               	addwf	___wmul@product,f
  3243  03A7  0875               	movf	___wmul@multiplicand+1,w
  3244  03A8  3DF7               	addwfc	___wmul@product+1,f
  3245  03A9                     l417:	
  3246  03A9  3001               	movlw	1
  3247  03AA                     u1405:	
  3248  03AA  35F4               	lslf	___wmul@multiplicand,f
  3249  03AB  0DF5               	rlf	___wmul@multiplicand+1,f
  3250  03AC  0B89               	decfsz	9,f
  3251  03AD  2BAA               	goto	u1405
  3252  03AE  3001               	movlw	1
  3253  03AF                     u1415:	
  3254  03AF  36F3               	lsrf	___wmul@multiplier+1,f
  3255  03B0  0CF2               	rrf	___wmul@multiplier,f
  3256  03B1  0B89               	decfsz	9,f
  3257  03B2  2BAF               	goto	u1415
  3258  03B3  0872               	movf	___wmul@multiplier,w
  3259  03B4  0473               	iorwf	___wmul@multiplier+1,w
  3260  03B5  1D03               	btfss	3,2
  3261  03B6  2BA3               	goto	l1946
  3262  03B7  0877               	movf	___wmul@product+1,w
  3263  03B8  00F3               	movwf	?___wmul+1
  3264  03B9  0876               	movf	___wmul@product,w
  3265  03BA  00F2               	movwf	?___wmul
  3266  03BB  0008               	return
  3267  03BC                     __end_of___wmul:	
  3268                           
  3269                           	psect	text10
  3270  049D                     __ptext10:	
  3271 ;; *************** function _TMR0_HasOverflowOccured *****************
  3272 ;; Defined at:
  3273 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;		None
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;		None
  3278 ;; Return value:  Size  Location     Type
  3279 ;;                  1    wreg      unsigned char 
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3291 ;;Total ram usage:        0 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    2
  3294 ;; This function calls:
  3295 ;;		Nothing
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _TMR0_HasOverflowOccured
  3303  049D                     _TMR0_HasOverflowOccured:	
  3304                           
  3305                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  3306                           
  3307                           ;incstack = 0
  3308                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  3309  049D  0C0B               	rrf	11,w	;volatile
  3310  049E  0C89               	rrf	9,f
  3311  049F  3901               	andlw	1
  3312  04A0  0008               	return
  3313  04A1                     __end_of_TMR0_HasOverflowOccured:	
  3314                           
  3315                           	psect	text11
  3316  0409                     __ptext11:	
  3317 ;; *************** function _SYSTEM_Initialize *****************
  3318 ;; Defined at:
  3319 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, status,2, status,0, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;Total ram usage:        0 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    3
  3340 ;; This function calls:
  3341 ;;		_ADC_Initialize
  3342 ;;		_EUSART_Initialize
  3343 ;;		_OSCILLATOR_Initialize
  3344 ;;		_PIN_MANAGER_Initialize
  3345 ;;		_TMR0_Initialize
  3346 ;;		_WDT_Initialize
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           
  3353                           ;psect for function _SYSTEM_Initialize
  3354  0409                     _SYSTEM_Initialize:	
  3355                           
  3356                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3360  0409  3183  23F1  3184   	fcall	_PIN_MANAGER_Initialize
  3361                           
  3362                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3363  040C  3184  2490  3184   	fcall	_OSCILLATOR_Initialize
  3364                           
  3365                           ;mcc.c: 74: WDT_Initialize();
  3366  040F  3184  24A1  3184   	fcall	_WDT_Initialize
  3367                           
  3368                           ;mcc.c: 75: TMR0_Initialize();
  3369  0412  3184  2429  3184   	fcall	_TMR0_Initialize
  3370                           
  3371                           ;mcc.c: 76: ADC_Initialize();
  3372  0415  3184  246A  3184   	fcall	_ADC_Initialize
  3373                           
  3374                           ;mcc.c: 77: EUSART_Initialize();
  3375  0418  3183  23D7         	fcall	_EUSART_Initialize
  3376  041A  0008               	return
  3377  041B                     __end_of_SYSTEM_Initialize:	
  3378                           
  3379                           	psect	text12
  3380  04A1                     __ptext12:	
  3381 ;; *************** function _WDT_Initialize *****************
  3382 ;; Defined at:
  3383 ;;		line 88 in file "mcc_generated_files/mcc.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;		None
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;		None
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  1    wreg      void 
  3390 ;; Registers used:
  3391 ;;		wreg
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;Total ram usage:        0 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    2
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_SYSTEM_Initialize
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function _WDT_Initialize
  3413  04A1                     _WDT_Initialize:	
  3414                           
  3415                           ;mcc.c: 91: WDTCON = 0x16;
  3416                           
  3417                           ;incstack = 0
  3418                           ; Regs used in _WDT_Initialize: [wreg]
  3419  04A1  3016               	movlw	22
  3420  04A2  0021               	movlb	1	; select bank1
  3421  04A3  0097               	movwf	23	;volatile
  3422  04A4  0008               	return
  3423  04A5                     __end_of_WDT_Initialize:	
  3424                           
  3425                           	psect	text13
  3426  0429                     __ptext13:	
  3427 ;; *************** function _TMR0_Initialize *****************
  3428 ;; Defined at:
  3429 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;Total ram usage:        1 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    2
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_SYSTEM_Initialize
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _TMR0_Initialize
  3459  0429                     _TMR0_Initialize:	
  3460                           
  3461                           ;tmr0.c: 67: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD2 & 0x3F);
  3462                           
  3463                           ;incstack = 0
  3464                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3465  0429  0021               	movlb	1	; select bank1
  3466  042A  0815               	movf	21,w	;volatile
  3467  042B  39C0               	andlw	192
  3468  042C  3812               	iorlw	18
  3469  042D  0095               	movwf	21	;volatile
  3470                           
  3471                           ;tmr0.c: 70: TMR0 = 0x06;
  3472  042E  3006               	movlw	6
  3473  042F  0020               	movlb	0	; select bank0
  3474  0430  0095               	movwf	21	;volatile
  3475                           
  3476                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3477  0431  3006               	movlw	6
  3478  0432  00F2               	movwf	??_TMR0_Initialize
  3479  0433  0872               	movf	??_TMR0_Initialize,w
  3480  0434  00D1               	movwf	_timer0ReloadVal	;volatile
  3481                           
  3482                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3483  0435  110B               	bcf	11,2	;volatile
  3484  0436  0008               	return
  3485  0437                     __end_of_TMR0_Initialize:	
  3486                           
  3487                           	psect	text14
  3488  03F1                     __ptext14:	
  3489 ;; *************** function _PIN_MANAGER_Initialize *****************
  3490 ;; Defined at:
  3491 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3509 ;;Total ram usage:        0 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    2
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_SYSTEM_Initialize
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function _PIN_MANAGER_Initialize
  3521  03F1                     _PIN_MANAGER_Initialize:	
  3522                           
  3523                           ;pin_manager.c: 57: LATA = 0x00;
  3524                           
  3525                           ;incstack = 0
  3526                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3527  03F1  0022               	movlb	2	; select bank2
  3528  03F2  018C               	clrf	12	;volatile
  3529                           
  3530                           ;pin_manager.c: 58: LATC = 0x00;
  3531  03F3  018E               	clrf	14	;volatile
  3532                           
  3533                           ;pin_manager.c: 63: TRISA = 0x3F;
  3534  03F4  303F               	movlw	63
  3535  03F5  0021               	movlb	1	; select bank1
  3536  03F6  008C               	movwf	12	;volatile
  3537                           
  3538                           ;pin_manager.c: 64: TRISC = 0x3F;
  3539  03F7  303F               	movlw	63
  3540  03F8  008E               	movwf	14	;volatile
  3541                           
  3542                           ;pin_manager.c: 69: ANSELC = 0x0F;
  3543  03F9  300F               	movlw	15
  3544  03FA  0023               	movlb	3	; select bank3
  3545  03FB  008E               	movwf	14	;volatile
  3546                           
  3547                           ;pin_manager.c: 70: ANSELA = 0x17;
  3548  03FC  3017               	movlw	23
  3549  03FD  008C               	movwf	12	;volatile
  3550                           
  3551                           ;pin_manager.c: 75: WPUA = 0x28;
  3552  03FE  3028               	movlw	40
  3553  03FF  0024               	movlb	4	; select bank4
  3554  0400  008C               	movwf	12	;volatile
  3555                           
  3556                           ;pin_manager.c: 76: WPUC = 0x30;
  3557  0401  3030               	movlw	48
  3558  0402  008E               	movwf	14	;volatile
  3559                           
  3560                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  3561  0403  0021               	movlb	1	; select bank1
  3562  0404  1395               	bcf	21,7	;volatile
  3563                           
  3564                           ;pin_manager.c: 83: APFCON1 = 0x00;
  3565  0405  0022               	movlb	2	; select bank2
  3566  0406  019E               	clrf	30	;volatile
  3567                           
  3568                           ;pin_manager.c: 84: APFCON0 = 0x00;
  3569  0407  019D               	clrf	29	;volatile
  3570  0408  0008               	return
  3571  0409                     __end_of_PIN_MANAGER_Initialize:	
  3572                           
  3573                           	psect	text15
  3574  0490                     __ptext15:	
  3575 ;; *************** function _OSCILLATOR_Initialize *****************
  3576 ;; Defined at:
  3577 ;;		line 80 in file "mcc_generated_files/mcc.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3595 ;;Total ram usage:        0 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    2
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_SYSTEM_Initialize
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           
  3606                           ;psect for function _OSCILLATOR_Initialize
  3607  0490                     _OSCILLATOR_Initialize:	
  3608                           
  3609                           ;mcc.c: 83: OSCCON = 0x5A;
  3610                           
  3611                           ;incstack = 0
  3612                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3613  0490  305A               	movlw	90
  3614  0491  0021               	movlb	1	; select bank1
  3615  0492  0099               	movwf	25	;volatile
  3616                           
  3617                           ;mcc.c: 85: OSCTUNE = 0x00;
  3618  0493  0198               	clrf	24	;volatile
  3619  0494  0008               	return
  3620  0495                     __end_of_OSCILLATOR_Initialize:	
  3621                           
  3622                           	psect	text16
  3623  03D7                     __ptext16:	
  3624 ;; *************** function _EUSART_Initialize *****************
  3625 ;; Defined at:
  3626 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;		None
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;Total ram usage:        1 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    2
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_SYSTEM_Initialize
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           
  3655                           ;psect for function _EUSART_Initialize
  3656  03D7                     _EUSART_Initialize:	
  3657                           
  3658                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3662  03D7  0021               	movlb	1	; select bank1
  3663  03D8  1291               	bcf	17,5	;volatile
  3664                           
  3665                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  3666  03D9  1211               	bcf	17,4	;volatile
  3667                           
  3668                           ;eusart.c: 84: BAUDCON = 0x08;
  3669  03DA  3008               	movlw	8
  3670  03DB  0023               	movlb	3	; select bank3
  3671  03DC  009F               	movwf	31	;volatile
  3672                           
  3673                           ;eusart.c: 87: RCSTA = 0x80;
  3674  03DD  3080               	movlw	128
  3675  03DE  009D               	movwf	29	;volatile
  3676                           
  3677                           ;eusart.c: 90: TXSTA = 0x04;
  3678  03DF  3004               	movlw	4
  3679  03E0  009E               	movwf	30	;volatile
  3680                           
  3681                           ;eusart.c: 93: SPBRGL = 0x19;
  3682  03E1  3019               	movlw	25
  3683  03E2  009B               	movwf	27	;volatile
  3684                           
  3685                           ;eusart.c: 96: SPBRGH = 0x00;
  3686  03E3  019C               	clrf	28	;volatile
  3687                           
  3688                           ;eusart.c: 100: eusartTxHead = 0;
  3689  03E4  01FB               	clrf	_eusartTxHead	;volatile
  3690                           
  3691                           ;eusart.c: 101: eusartTxTail = 0;
  3692  03E5  01FA               	clrf	_eusartTxTail	;volatile
  3693                           
  3694                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3695  03E6  3008               	movlw	8
  3696  03E7  00F2               	movwf	??_EUSART_Initialize
  3697  03E8  0872               	movf	??_EUSART_Initialize,w
  3698  03E9  0020               	movlb	0	; select bank0
  3699  03EA  00D2               	movwf	_eusartTxBufferRemaining	;volatile
  3700                           
  3701                           ;eusart.c: 104: eusartRxHead = 0;
  3702  03EB  01C8               	clrf	_eusartRxHead	;volatile
  3703                           
  3704                           ;eusart.c: 105: eusartRxTail = 0;
  3705  03EC  01C7               	clrf	_eusartRxTail	;volatile
  3706                           
  3707                           ;eusart.c: 106: eusartRxCount = 0;
  3708  03ED  01C6               	clrf	_eusartRxCount	;volatile
  3709                           
  3710                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3711  03EE  0021               	movlb	1	; select bank1
  3712  03EF  1691               	bsf	17,5	;volatile
  3713  03F0  0008               	return
  3714  03F1                     __end_of_EUSART_Initialize:	
  3715                           
  3716                           	psect	text17
  3717  046A                     __ptext17:	
  3718 ;; *************** function _ADC_Initialize *****************
  3719 ;; Defined at:
  3720 ;;		line 64 in file "mcc_generated_files/adc.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, status,2
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        0 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    2
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_SYSTEM_Initialize
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           
  3749                           ;psect for function _ADC_Initialize
  3750  046A                     _ADC_Initialize:	
  3751                           
  3752                           ;adc.c: 69: ADCON0 = 0x01;
  3753                           
  3754                           ;incstack = 0
  3755                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3756  046A  3001               	movlw	1
  3757  046B  0021               	movlb	1	; select bank1
  3758  046C  009D               	movwf	29	;volatile
  3759                           
  3760                           ;adc.c: 72: ADCON1 = 0xF0;
  3761  046D  30F0               	movlw	240
  3762  046E  009E               	movwf	30	;volatile
  3763                           
  3764                           ;adc.c: 75: ADRESL = 0x00;
  3765  046F  019B               	clrf	27	;volatile
  3766                           
  3767                           ;adc.c: 78: ADRESH = 0x00;
  3768  0470  019C               	clrf	28	;volatile
  3769  0471  0008               	return
  3770  0472                     __end_of_ADC_Initialize:	
  3771                           
  3772                           	psect	text18
  3773  0347                     __ptext18:	
  3774 ;; *************** function _EUSART_Read *****************
  3775 ;; Defined at:
  3776 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  readValue       1    3[COMMON] unsigned char 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      unsigned char 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;Total ram usage:        2 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    2
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;;		_getch
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _EUSART_Read
  3807  0347                     _EUSART_Read:	
  3808                           
  3809                           ;eusart.c: 114: uint8_t readValue = 0;
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3813  0347  01F3               	clrf	EUSART_Read@readValue
  3814                           
  3815                           ;eusart.c: 115: RCSTAbits.CREN = 1;
  3816  0348  0023               	movlb	3	; select bank3
  3817  0349  161D               	bsf	29,4	;volatile
  3818  034A                     l2024:	
  3819                           ;eusart.c: 118: {
  3820                           
  3821                           ;eusart.c: 117: while(0 == eusartRxCount)
  3822                           
  3823  034A  0020               	movlb	0	; select bank0
  3824  034B  0846               	movf	_eusartRxCount,w	;volatile
  3825  034C  1903               	btfsc	3,2
  3826  034D  2B4A               	goto	l2024
  3827                           
  3828                           ;eusart.c: 119: }
  3829                           ;eusart.c: 121: readValue = eusartRxBuffer[eusartRxTail++];
  3830  034E  0847               	movf	_eusartRxTail,w
  3831  034F  3E35               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3832  0350  0086               	movwf	6
  3833  0351  0187               	clrf	7
  3834  0352  0801               	movf	1,w
  3835  0353  00F2               	movwf	??_EUSART_Read
  3836  0354  0872               	movf	??_EUSART_Read,w
  3837  0355  00F3               	movwf	EUSART_Read@readValue
  3838  0356  3001               	movlw	1
  3839  0357  00F2               	movwf	??_EUSART_Read
  3840  0358  0872               	movf	??_EUSART_Read,w
  3841  0359  07C7               	addwf	_eusartRxTail,f	;volatile
  3842                           
  3843                           ;eusart.c: 122: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3844  035A  3008               	movlw	8
  3845  035B  0247               	subwf	_eusartRxTail,w	;volatile
  3846  035C  1803               	btfsc	3,0
  3847                           
  3848                           ;eusart.c: 123: {
  3849                           ;eusart.c: 124: eusartRxTail = 0;
  3850  035D  01C7               	clrf	_eusartRxTail	;volatile
  3851                           
  3852                           ;eusart.c: 125: }
  3853                           ;eusart.c: 126: PIE1bits.RCIE = 0;
  3854  035E  0021               	movlb	1	; select bank1
  3855  035F  1291               	bcf	17,5	;volatile
  3856                           
  3857                           ;eusart.c: 127: eusartRxCount--;
  3858  0360  3001               	movlw	1
  3859  0361  0020               	movlb	0	; select bank0
  3860  0362  02C6               	subwf	_eusartRxCount,f	;volatile
  3861                           
  3862                           ;eusart.c: 128: PIE1bits.RCIE = 1;
  3863  0363  0021               	movlb	1	; select bank1
  3864  0364  1691               	bsf	17,5	;volatile
  3865                           
  3866                           ;eusart.c: 130: return readValue;
  3867  0365  0873               	movf	EUSART_Read@readValue,w
  3868  0366  0008               	return
  3869  0367                     __end_of_EUSART_Read:	
  3870                           
  3871                           	psect	text19
  3872  0367                     __ptext19:	
  3873 ;; *************** function _DATAEE_WriteByte *****************
  3874 ;; Defined at:
  3875 ;;		line 180 in file "mcc_generated_files/memory.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  bAdd            1    wreg     unsigned char 
  3878 ;;  bData           1    2[COMMON] unsigned char 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  bAdd            1    3[COMMON] unsigned char 
  3881 ;;  GIEBitValue     1    4[COMMON] unsigned char 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3891 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;Total ram usage:        3 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    2
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_main
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           
  3906                           ;psect for function _DATAEE_WriteByte
  3907  0367                     _DATAEE_WriteByte:	
  3908                           
  3909                           ;incstack = 0
  3910                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  3911                           ;DATAEE_WriteByte@bAdd stored from wreg
  3912  0367  00F3               	movwf	DATAEE_WriteByte@bAdd
  3913                           
  3914                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  3915  0368  01F4               	clrf	DATAEE_WriteByte@GIEBitValue
  3916                           
  3917                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  3918  0369  0873               	movf	DATAEE_WriteByte@bAdd,w
  3919  036A  0023               	movlb	3	; select bank3
  3920  036B  0091               	movwf	17	;volatile
  3921                           
  3922                           ;memory.c: 185: EEDATL = bData;
  3923  036C  0872               	movf	DATAEE_WriteByte@bData,w
  3924  036D  0093               	movwf	19	;volatile
  3925                           
  3926                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  3927  036E  1395               	bcf	21,7	;volsfr
  3928                           
  3929                           ;memory.c: 187: EECON1bits.CFGS = 0;
  3930  036F  1315               	bcf	21,6	;volsfr
  3931                           
  3932                           ;memory.c: 188: EECON1bits.WREN = 1;
  3933  0370  1515               	bsf	21,2	;volsfr
  3934                           
  3935                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  3936  0371  3000               	movlw	0
  3937  0372  1B8B               	btfsc	11,7	;volatile
  3938  0373  3001               	movlw	1
  3939  0374  00F4               	movwf	DATAEE_WriteByte@GIEBitValue
  3940                           
  3941                           ;memory.c: 191: INTCONbits.GIE = 0;
  3942  0375  138B               	bcf	11,7	;volatile
  3943                           
  3944                           ;memory.c: 192: EECON2 = 0x55;
  3945  0376  3055               	movlw	85
  3946  0377  0096               	movwf	22	;volsfr
  3947                           
  3948                           ;memory.c: 193: EECON2 = 0xAA;
  3949  0378  30AA               	movlw	170
  3950  0379  0096               	movwf	22	;volsfr
  3951                           
  3952                           ;memory.c: 194: EECON1bits.WR = 1;
  3953  037A  1495               	bsf	21,1	;volsfr
  3954  037B                     l297:	
  3955                           ;memory.c: 197: {
  3956                           
  3957                           ;memory.c: 196: while (EECON1bits.WR)
  3958                           
  3959  037B  1895               	btfsc	21,1	;volsfr
  3960  037C  2B7B               	goto	l297
  3961                           
  3962                           ;memory.c: 198: }
  3963                           ;memory.c: 200: EECON1bits.WREN = 0;
  3964  037D  1115               	bcf	21,2	;volsfr
  3965                           
  3966                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  3967  037E  0C74               	rrf	DATAEE_WriteByte@GIEBitValue,w
  3968  037F  1C03               	skipc
  3969  0380  138B               	bcf	11,7	;volatile
  3970  0381  1803               	skipnc
  3971  0382  178B               	bsf	11,7	;volatile
  3972  0383  0008               	return
  3973  0384                     __end_of_DATAEE_WriteByte:	
  3974                           
  3975                           	psect	text20
  3976  0444                     __ptext20:	
  3977 ;; *************** function _DATAEE_ReadByte *****************
  3978 ;; Defined at:
  3979 ;;		line 204 in file "mcc_generated_files/memory.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  bAdd            1    wreg     unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  bAdd            1    2[COMMON] unsigned char 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      unsigned char 
  3986 ;; Registers used:
  3987 ;;		wreg
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;Total ram usage:        1 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    2
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _DATAEE_ReadByte
  4009  0444                     _DATAEE_ReadByte:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _DATAEE_ReadByte: [wreg]
  4013                           ;DATAEE_ReadByte@bAdd stored from wreg
  4014  0444  00F2               	movwf	DATAEE_ReadByte@bAdd
  4015                           
  4016                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  4017  0445  0872               	movf	DATAEE_ReadByte@bAdd,w
  4018  0446  0023               	movlb	3	; select bank3
  4019  0447  0091               	movwf	17	;volatile
  4020                           
  4021                           ;memory.c: 207: EECON1bits.CFGS = 0;
  4022  0448  1315               	bcf	21,6	;volsfr
  4023                           
  4024                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  4025  0449  1395               	bcf	21,7	;volsfr
  4026                           
  4027                           ;memory.c: 209: EECON1bits.RD = 1;
  4028  044A  1415               	bsf	21,0	;volsfr
  4029                           
  4030                           ;memory.c: 210: __nop();
  4031  044B  0000               	nop
  4032                           
  4033                           ;memory.c: 211: __nop();
  4034  044C  0000               	nop
  4035                           
  4036                           ;memory.c: 213: return (EEDATL);
  4037  044D  0023               	movlb	3	; select bank3
  4038  044E  0813               	movf	19,w	;volatile
  4039  044F  0008               	return
  4040  0450                     __end_of_DATAEE_ReadByte:	
  4041                           
  4042                           	psect	text21
  4043  04AB                     __ptext21:	
  4044 ;; *************** function _ADC_StartConversion *****************
  4045 ;; Defined at:
  4046 ;;		line 90 in file "mcc_generated_files/adc.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		None
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    2
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_main
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _ADC_StartConversion
  4076  04AB                     _ADC_StartConversion:	
  4077                           
  4078                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _ADC_StartConversion: []
  4082  04AB  0021               	movlb	1	; select bank1
  4083  04AC  149D               	bsf	29,1	;volatile
  4084  04AD  0008               	return
  4085  04AE                     __end_of_ADC_StartConversion:	
  4086                           
  4087                           	psect	text22
  4088  0437                     __ptext22:	
  4089 ;; *************** function _ADC_SelectChannel *****************
  4090 ;; Defined at:
  4091 ;;		line 82 in file "mcc_generated_files/adc.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  channel         1    wreg     enum E2692
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  channel         1    3[COMMON] enum E2692
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;Total ram usage:        2 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    2
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_main
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _ADC_SelectChannel
  4121  0437                     _ADC_SelectChannel:	
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4125                           ;ADC_SelectChannel@channel stored from wreg
  4126  0437  00F3               	movwf	ADC_SelectChannel@channel
  4127                           
  4128                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4129  0438  0873               	movf	ADC_SelectChannel@channel,w
  4130  0439  00F2               	movwf	??_ADC_SelectChannel
  4131  043A  0DF2               	rlf	??_ADC_SelectChannel,f
  4132  043B  0DF2               	rlf	??_ADC_SelectChannel,f
  4133  043C  0021               	movlb	1	; select bank1
  4134  043D  081D               	movf	29,w	;volatile
  4135  043E  0672               	xorwf	??_ADC_SelectChannel,w
  4136  043F  3983               	andlw	-125
  4137  0440  0672               	xorwf	??_ADC_SelectChannel,w
  4138  0441  009D               	movwf	29	;volatile
  4139                           
  4140                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4141  0442  141D               	bsf	29,0	;volatile
  4142  0443  0008               	return
  4143  0444                     __end_of_ADC_SelectChannel:	
  4144                           
  4145                           	psect	text23
  4146  0472                     __ptext23:	
  4147 ;; *************** function _ADC_IsConversionDone *****************
  4148 ;; Defined at:
  4149 ;;		line 97 in file "mcc_generated_files/adc.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      unsigned char 
  4156 ;; Registers used:
  4157 ;;		wreg, status,0
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    2
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_main
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _ADC_IsConversionDone
  4179  0472                     _ADC_IsConversionDone:	
  4180                           
  4181                           ;adc.c: 100: return ((bool)(!ADCON0bits.GO_nDONE));
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4185  0472  1003               	clrc
  4186  0473  0021               	movlb	1	; select bank1
  4187  0474  1C9D               	btfss	29,1	;volatile
  4188  0475  1403               	setc
  4189  0476  3000               	movlw	0
  4190  0477  3D09               	addwfc	9,w
  4191  0478  0008               	return
  4192  0479                     __end_of_ADC_IsConversionDone:	
  4193                           
  4194                           	psect	text24
  4195  0485                     __ptext24:	
  4196 ;; *************** function _ADC_GetConversionResult *****************
  4197 ;; Defined at:
  4198 ;;		line 103 in file "mcc_generated_files/adc.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  2    2[COMMON] unsigned int 
  4205 ;; Registers used:
  4206 ;;		wreg
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;Total ram usage:        2 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    2
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_main
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _ADC_GetConversionResult
  4228  0485                     _ADC_GetConversionResult:	
  4229                           
  4230                           ;adc.c: 106: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4231                           
  4232                           ;incstack = 0
  4233                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4234  0485  0021               	movlb	1	; select bank1
  4235  0486  081C               	movf	28,w	;volatile
  4236  0487  00F3               	movwf	?_ADC_GetConversionResult+1
  4237  0488  081B               	movf	27,w	;volatile
  4238  0489  00F2               	movwf	?_ADC_GetConversionResult
  4239  048A  0008               	return
  4240  048B                     __end_of_ADC_GetConversionResult:	
  4241                           
  4242                           	psect	intentry
  4243  0004                     __pintentry:	
  4244 ;; *************** function _INTERRUPT_InterruptManager *****************
  4245 ;; Defined at:
  4246 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4264 ;;Total ram usage:        1 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    1
  4267 ;; This function calls:
  4268 ;;		_EUSART_Receive_ISR
  4269 ;;		_EUSART_Transmit_ISR
  4270 ;; This function is called by:
  4271 ;;		Interrupt level 1
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275  0004                     _INTERRUPT_InterruptManager:	
  4276                           
  4277                           ;incstack = 0
  4278  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4279                           
  4280                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4281  0005  3180               	pagesel	$
  4282  0006  0020               	movlb	0	; select bank0
  4283  0007  087F               	movf	127,w
  4284  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  4285                           
  4286                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4287  0009  1F0B               	btfss	11,6	;volatile
  4288  000A  2815               	goto	i1l43
  4289  000B  0021               	movlb	1	; select bank1
  4290  000C  1E11               	btfss	17,4	;volatile
  4291  000D  2815               	goto	i1l43
  4292  000E  0020               	movlb	0	; select bank0
  4293  000F  1E11               	btfss	17,4	;volatile
  4294  0010  2815               	goto	i1l43
  4295                           
  4296                           ;interrupt_manager.c: 55: {
  4297                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  4298  0011  3183  2384  3180   	fcall	_EUSART_Transmit_ISR
  4299                           
  4300                           ;interrupt_manager.c: 57: }
  4301  0014  281F               	goto	i1l47
  4302  0015                     i1l43:	
  4303                           
  4304                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4305  0015  1F0B               	btfss	11,6	;volatile
  4306  0016  281F               	goto	i1l47
  4307  0017  0021               	movlb	1	; select bank1
  4308  0018  1E91               	btfss	17,5	;volatile
  4309  0019  281F               	goto	i1l47
  4310  001A  0020               	movlb	0	; select bank0
  4311  001B  1E91               	btfss	17,5	;volatile
  4312  001C  281F               	goto	i1l47
  4313                           
  4314                           ;interrupt_manager.c: 59: {
  4315                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  4316  001D  3183  23BC         	fcall	_EUSART_Receive_ISR
  4317  001F                     i1l47:	
  4318                           ;interrupt_manager.c: 62: else
  4319                           ;interrupt_manager.c: 63: {
  4320                           
  4321                           ;interrupt_manager.c: 61: }
  4322                           
  4323  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  4324  0020  0020               	movlb	0	; select bank0
  4325  0021  00FF               	movwf	127
  4326  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4327  0023  0009               	retfie
  4328  0024                     __end_of_INTERRUPT_InterruptManager:	
  4329                           
  4330                           	psect	text26
  4331  0384                     __ptext26:	
  4332 ;; *************** function _EUSART_Transmit_ISR *****************
  4333 ;; Defined at:
  4334 ;;		line 166 in file "mcc_generated_files/eusart.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;Total ram usage:        1 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_INTERRUPT_InterruptManager
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           
  4362                           ;psect for function _EUSART_Transmit_ISR
  4363  0384                     _EUSART_Transmit_ISR:	
  4364                           
  4365                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4369  0384  3008               	movlw	8
  4370  0385  0020               	movlb	0	; select bank0
  4371  0386  0252               	subwf	_eusartTxBufferRemaining,w	;volatile
  4372  0387  1803               	skipnc
  4373  0388  2B9E               	goto	i1l136
  4374                           
  4375                           ;eusart.c: 171: {
  4376                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
  4377  0389  087A               	movf	_eusartTxTail,w
  4378  038A  3E3D               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4379  038B  0086               	movwf	6
  4380  038C  0187               	clrf	7
  4381  038D  0801               	movf	1,w
  4382  038E  0023               	movlb	3	; select bank3
  4383  038F  009A               	movwf	26	;volatile
  4384  0390  3001               	movlw	1
  4385  0391  00F0               	movwf	??_EUSART_Transmit_ISR
  4386  0392  0870               	movf	??_EUSART_Transmit_ISR,w
  4387  0393  07FA               	addwf	_eusartTxTail,f	;volatile
  4388                           
  4389                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4390  0394  3008               	movlw	8
  4391  0395  027A               	subwf	_eusartTxTail,w	;volatile
  4392  0396  1803               	btfsc	3,0
  4393                           
  4394                           ;eusart.c: 174: {
  4395                           ;eusart.c: 175: eusartTxTail = 0;
  4396  0397  01FA               	clrf	_eusartTxTail	;volatile
  4397                           
  4398                           ;eusart.c: 176: }
  4399                           ;eusart.c: 177: eusartTxBufferRemaining++;
  4400  0398  3001               	movlw	1
  4401  0399  00F0               	movwf	??_EUSART_Transmit_ISR
  4402  039A  0870               	movf	??_EUSART_Transmit_ISR,w
  4403  039B  0020               	movlb	0	; select bank0
  4404  039C  07D2               	addwf	_eusartTxBufferRemaining,f	;volatile
  4405                           
  4406                           ;eusart.c: 178: }
  4407  039D  0008               	return
  4408  039E                     i1l136:	
  4409                           
  4410                           ;eusart.c: 179: else
  4411                           ;eusart.c: 180: {
  4412                           ;eusart.c: 181: PIE1bits.TXIE = 0;
  4413  039E  0021               	movlb	1	; select bank1
  4414  039F  1211               	bcf	17,4	;volatile
  4415  03A0  0008               	return
  4416  03A1                     __end_of_EUSART_Transmit_ISR:	
  4417                           
  4418                           	psect	text27
  4419  03BC                     __ptext27:	
  4420 ;; *************** function _EUSART_Receive_ISR *****************
  4421 ;; Defined at:
  4422 ;;		line 185 in file "mcc_generated_files/eusart.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;Total ram usage:        1 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		_INTERRUPT_InterruptManager
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           
  4450                           ;psect for function _EUSART_Receive_ISR
  4451  03BC                     _EUSART_Receive_ISR:	
  4452                           
  4453                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
  4454                           
  4455                           ;incstack = 0
  4456                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4457  03BC  0023               	movlb	3	; select bank3
  4458  03BD  1C9D               	btfss	29,1	;volatile
  4459  03BE  2BC1               	goto	i1l1578
  4460                           
  4461                           ;eusart.c: 189: {
  4462                           ;eusart.c: 192: RCSTAbits.CREN = 0;
  4463  03BF  121D               	bcf	29,4	;volatile
  4464                           
  4465                           ;eusart.c: 193: RCSTAbits.CREN = 1;
  4466  03C0  161D               	bsf	29,4	;volatile
  4467  03C1                     i1l1578:	
  4468                           
  4469                           ;eusart.c: 194: }
  4470                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
  4471  03C1  0819               	movf	25,w	;volatile
  4472  03C2  00F0               	movwf	??_EUSART_Receive_ISR
  4473  03C3  0020               	movlb	0	; select bank0
  4474  03C4  0848               	movf	_eusartRxHead,w
  4475  03C5  3E35               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4476  03C6  0086               	movwf	6
  4477  03C7  0187               	clrf	7
  4478  03C8  0870               	movf	??_EUSART_Receive_ISR,w
  4479  03C9  0081               	movwf	1
  4480  03CA  3001               	movlw	1
  4481  03CB  00F0               	movwf	??_EUSART_Receive_ISR
  4482  03CC  0870               	movf	??_EUSART_Receive_ISR,w
  4483  03CD  07C8               	addwf	_eusartRxHead,f	;volatile
  4484                           
  4485                           ;eusart.c: 198: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4486  03CE  3008               	movlw	8
  4487  03CF  0248               	subwf	_eusartRxHead,w	;volatile
  4488  03D0  1803               	btfsc	3,0
  4489                           
  4490                           ;eusart.c: 199: {
  4491                           ;eusart.c: 200: eusartRxHead = 0;
  4492  03D1  01C8               	clrf	_eusartRxHead	;volatile
  4493                           
  4494                           ;eusart.c: 201: }
  4495                           ;eusart.c: 202: eusartRxCount++;
  4496  03D2  3001               	movlw	1
  4497  03D3  00F0               	movwf	??_EUSART_Receive_ISR
  4498  03D4  0870               	movf	??_EUSART_Receive_ISR,w
  4499  03D5  07C6               	addwf	_eusartRxCount,f	;volatile
  4500  03D6  0008               	return
  4501  03D7                     __end_of_EUSART_Receive_ISR:	
  4502  007E                     btemp	set	126	;btemp
  4503  007E                     int$flags	set	126
  4504  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    18
    Data        8
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     21      51
    BANK1            80     30      30
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> main@buf(BANK1[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 8
		 -> main@buf(BANK1[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _printf->___lwdiv
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0    4355
                                             20 BANK0      1     1      0
                                              0 BANK1     30    30      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                        _EUSART_Read
                  _SYSTEM_Initialize
            _TMR0_HasOverflowOccured
                               _atoi
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (1) _strncmp                                              7     2      5     654
                                              2 COMMON     7     2      5
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    1591
                                              6 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     395
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     822
                                              8 COMMON     2     0      2
                                              0 BANK0      6     6      0
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      37
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     253
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_SelectChannel                                    2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_IsConversionDone
   _ADC_SelectChannel
   _ADC_StartConversion
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART_Read
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _TMR0_HasOverflowOccured
   _atoi
     ___wmul
     _isdigit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART_Write
   _strncmp

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      33       5       63.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1E      1E       7       37.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      5D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      5D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Feb 15 19:06:16 2018

    __end_of_TMR0_HasOverflowOccured 04A1                          __CFG_CP$OFF 0000  
                ___wmul@multiplicand 0074                      _timer0ReloadVal 0051  
                        __CFG_LVP$ON 0000                                  l124 0330  
                                l333 0219                                  l417 03A9  
                                l297 037B                         __CFG_CPD$OFF 0000  
                                _tmr 0045                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       ?_EUSART_Read 0070                                 l2010 0316  
                               l2100 0270                                 l2004 02FE  
                               l2006 030A                                 l2014 031F  
                               l2024 034A                                 l2120 02B7  
                               l2106 0280                                 l2116 02A0  
                               l2124 0285                                 l2126 02C0  
                               l2080 021C                                 l2090 023E  
                               l2082 0228                                 l2162 019C  
                               l2218 0069                                 l2172 01B2  
                               l2156 0183                                 l2244 00E1  
                               l2078 0223                                 l2238 00BA  
                               l2096 0245                                 l2184 01D7  
                               l2280 0135                                 l2264 010E  
                               l2098 0249                                 l2194 01E4  
                               l2178 01B8                                 l2274 0130  
                               l2258 00FC                                 l2188 01DF  
                               l2196 0167                                 l2268 0120  
                               l2286 0151                                 l1946 03A3  
                               l1890 0344                                 l1980 02CB  
                               l1876 0325                                 l1966 0427  
                               l1982 02D7                                 l1992 02F2  
                               l1988 02E9                                 STR_1 04A8  
                               STR_2 04A5                                 STR_3 0499  
                               STR_4 0495                                 u1405 03AA  
                               _LATA 010C                                 u1415 03AF  
                               _LATC 010E                                 u1505 02EA  
                               u1535 0301                                 u1465 02CE  
                               u1555 0310                                 u1485 02D8  
                               u1565 0317                                 u1495 02E2  
                               u1735 01CD                                 u1780 004F  
                               i1l43 0015                                 i1l47 001F  
                               _TMR0 0015                                 _WPUA 020C  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _atoi 021A  
                               _main 003F                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 start 0024  
                      __CFG_MCLRE$ON 0000                         main@channels 00B9  
          __size_of_DATAEE_WriteByte 001D              __end_of_TMR0_Initialize 0437  
                      __CFG_PLLEN$ON 0000                        ?_EUSART_Write 0070  
     __size_of_OSCILLATOR_Initialize 0005        __end_of_OSCILLATOR_Initialize 0495  
                              ?_atoi 0078                                ?_main 0070  
                      __CFG_WDTE$OFF 0000                      __end_of___lwdiv 02F7  
                              i1l136 039E                      __end_of___lwmod 0324  
                              _RCREG 0199                                _RCSTA 019D  
                              _TRISA 008C                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
   __size_of_ADC_GetConversionResult 0006                      _DATAEE_ReadByte 0444  
                    __end_of_dpowers 045A                       _WDT_Initialize 04A1  
                    __end_of_isdigit 0429                                atoi@a 0023  
                              atoi@s 0025                                _putch 048B  
                              main@c 00B8                                main@i 00BD  
                  __end_of_ANALOG_IN 046A                                status 0003  
                              wtemp0 007E                      __end_of_strncmp 02C3  
                    __initialization 0026                         __end_of_atoi 0285  
                       __end_of_main 0162                       ??_EUSART_Write 0072  
        ?_INTERRUPT_InterruptManager 0070                               ??_atoi 0020  
                             ??_main 0034               __end_of_WDT_Initialize 04A5  
      __size_of_ADC_IsConversionDone 0007                               _ADCON0 009D  
                             _ADCON1 009E                               _ADRESH 009C  
                             _EEADRH 0192                               _ADRESL 009B  
                             _EEADRL 0191                               _EEDATH 0194  
                             _EEDATL 0193                               _EECON2 0196  
                             _ANSELA 018C                               ?_putch 0070  
                             _ANSELC 018E                               i1l1578 03C1  
                             _OSCCON 0099     __size_of_TMR0_HasOverflowOccured 0004  
                             _TMR0IF 005A                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                               ___wmul 03A1  
                     __CFG_STVREN$ON 0000                            ??___lwdiv 0076  
                          ??___lwmod 0024                  _EUSART_Transmit_ISR 0384  
                   ?_TMR0_Initialize 0070                               _printf 0162  
            __end_of_DATAEE_ReadByte 0450                            ??_isdigit 0072  
                    ?_WDT_Initialize 0070                            ??_strncmp 0077  
               ?_EUSART_Transmit_ISR 0070                 __size_of_EUSART_Read 0020  
                  _SYSTEM_Initialize 0409              __end_of__initialization 003B  
                 ?_SYSTEM_Initialize 0070         __size_of_ADC_StartConversion 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 045A  
                ??_SYSTEM_Initialize 0073                     _DATAEE_WriteByte 0367  
                      __end_of_putch 0490              _ADC_GetConversionResult 0485  
                     _OPTION_REGbits 0095            __end_of_SYSTEM_Initialize 041B  
              ??_EUSART_Transmit_ISR 0070                              ??_putch 0074  
                         __pbssBANK0 0035                 __end_of_EUSART_Write 0347  
        __size_of_EUSART_Receive_ISR 001B                           __pmaintext 003F  
                            ?___wmul 0072                           __pintentry 0004  
                            _BAUDCON 019F                              _APFCON0 011D  
                            _APFCON1 011E                              ?_printf 0026  
            __size_of_ADC_Initialize 0008                     ?_DATAEE_ReadByte 0070  
                      _eusartRxCount 0046                              _OSCTUNE 0098  
            _TMR0_HasOverflowOccured 049D                 DATAEE_WriteByte@bAdd 0073  
                          _ANALOG_IN 0462                      __size_of___wmul 001B  
                            ___lwdiv 02C3                              ___lwmod 02F7  
          ??_ADC_GetConversionResult 0074                              __ptext1 0285  
                            __ptext2 0162                              __ptext3 048B  
                            __ptext4 0324                              __ptext5 02F7  
                            __ptext6 02C3                              __ptext7 021A  
                            __ptext8 041B                              __ptext9 03A1  
                    __size_of_printf 00B8                              _dpowers 0450  
              _OSCILLATOR_Initialize 0490                              _isdigit 041B  
           ??_PIN_MANAGER_Initialize 0072                              main@buf 00B0  
                            main@cnt 00BA           __size_of_SYSTEM_Initialize 0012  
                            clrloop0 0480                              _strncmp 0285  
               end_of_initialization 003B                              init_ram 0479  
                            initloop 047A                    _EUSART_Initialize 03D7  
       __end_of_ADC_IsConversionDone 0479                   ?_EUSART_Initialize 0070  
                          _RCSTAbits 019D                              printf@c 0033  
                            printf@f 0026                  ??_EUSART_Initialize 0072  
                   ??_WDT_Initialize 0072                     __CFG_FOSC$INTOSC 0000  
              __size_of_EUSART_Write 0023                  _ADC_StartConversion 04AB  
          ??_TMR0_HasOverflowOccured 0072             __end_of_DATAEE_WriteByte 0384  
          __end_of_EUSART_Initialize 03F1                 ?_ADC_StartConversion 0070  
                     __end_of___wmul 03BC                         _EUSART_Write 0324  
                     _ADC_Initialize 046A               ?_OSCILLATOR_Initialize 0070  
                     __end_of_printf 021A                  start_initialization 0026  
           __size_of_TMR0_Initialize 000E      __size_of_PIN_MANAGER_Initialize 0018  
                      ??_EUSART_Read 0072                          putch@txData 0074  
                DATAEE_ReadByte@bAdd 0072                ??_ADC_StartConversion 0072  
                           ??___wmul 0076               __end_of_ADC_Initialize 0472  
                        __pdataBANK0 0049                             ??_printf 002A  
        __end_of_EUSART_Transmit_ISR 03A1                          __pbssCOMMON 007A  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                 _ADC_IsConversionDone 0472  
         __end_of_EUSART_Receive_ISR 03D7           __size_of_EUSART_Initialize 001A  
                __end_of_EUSART_Read 0367                            __pnvBANK0 0051  
                   ___lwdiv@dividend 0074               _PIN_MANAGER_Initialize 03F1  
               EUSART_Read@readValue 0073                    _ADC_SelectChannel 0437  
                           ?___lwdiv 0072                             ?___lwmod 0020  
                    ?_ADC_Initialize 0070                         _eusartRxHead 0048  
                 ?_ADC_SelectChannel 0070                         _eusartTxHead 007B  
                       _eusartRxTail 0047                         _eusartTxTail 007A  
       ??_INTERRUPT_InterruptManager 0071              _eusartTxBufferRemaining 0052  
                           ?_isdigit 0070                  ??_ADC_SelectChannel 0072  
              ?_ADC_IsConversionDone 0070                     ___lwdiv@quotient 0078  
           __size_of_DATAEE_ReadByte 000C                             ?_strncmp 0072  
                     __size_of_putch 0005                       _eusartRxBuffer 0035  
                  ??_TMR0_Initialize 0072                       _eusartTxBuffer 003D  
                     ___wmul@product 0076                            clear_ram0 047F  
                           _PIE1bits 0091            __end_of_ADC_SelectChannel 0444  
__size_of_INTERRUPT_InterruptManager 0020                             _PIR1bits 0011  
                          main@F3040 0049                           _ADCON0bits 009D  
                  ___wmul@multiplier 0072             ADC_SelectChannel@channel 0073  
                         printf@flag 002F                           printf@prec 0030  
                          main@level 00A0                            main@t_max 00BB  
              DATAEE_WriteByte@bData 0072                          _EUSART_Read 0347  
                  ?_DATAEE_WriteByte 0072                   ??_DATAEE_WriteByte 0073  
                         _EECON1bits 0195             ?_ADC_GetConversionResult 0072  
            ??_OSCILLATOR_Initialize 0072                     __size_of___lwdiv 0034  
                   __size_of___lwmod 002D                          _isdigit$788 0072  
             ??_ADC_IsConversionDone 0072                     __size_of_isdigit 000E  
                    ___lwdiv@divisor 0072                      ___lwdiv@counter 0077  
                           __ptext10 049D                             __ptext11 0409  
                           __ptext20 0444                             __ptext12 04A1  
                           __ptext21 04AB                             __ptext13 0429  
                           __ptext22 0437                             __ptext14 03F1  
                           __ptext23 0472                             __ptext15 0490  
                           __ptext24 0485                             __ptext16 03D7  
                           __ptext17 046A                             __ptext26 0384  
                           __ptext18 0347                             __ptext27 03BC  
                           __ptext19 0367          DATAEE_WriteByte@GIEBitValue 0074  
                   __size_of_strncmp 003E                        __size_of_atoi 006B  
                      __size_of_main 0123                           strncmp@len 0075  
                  ??_DATAEE_ReadByte 0072           __size_of_ADC_SelectChannel 000D  
                           int$flags 007E                             atoi@sign 0022  
 __end_of_INTERRUPT_InterruptManager 0024           _INTERRUPT_InterruptManager 0004  
                          printf@val 0031                             main@mask 00BC  
           ?_TMR0_HasOverflowOccured 0070                           _INTCONbits 000B  
                           isdigit@c 0073              __size_of_WDT_Initialize 0004  
                           intlevel1 0000          __end_of_ADC_StartConversion 04AE  
                   ___lwmod@dividend 0022              ?_PIN_MANAGER_Initialize 0070  
    __end_of_ADC_GetConversionResult 048B                    __CFG_CLKOUTEN$OFF 0000  
                          strncmp@s1 0072                            strncmp@s2 0074  
                   ??_ADC_Initialize 0072                             printf@ap 002E  
                 _EUSART_Receive_ISR 03BC                        __pstringtext1 0450  
                      __pstringtext2 0462                        __pstringtext3 0495  
                      __pstringtext4 0499                        __pstringtext5 04A5  
                      __pstringtext6 04A8                        __pstringtext7 0000  
                         _OPTION_REG 0095                  ?_EUSART_Receive_ISR 0070  
                    ___lwmod@divisor 0020                      _TMR0_Initialize 0429  
                    ___lwmod@counter 0025                   EUSART_Write@txData 0073  
       __size_of_EUSART_Transmit_ISR 001D       __end_of_PIN_MANAGER_Initialize 0409  
               ??_EUSART_Receive_ISR 0070  
