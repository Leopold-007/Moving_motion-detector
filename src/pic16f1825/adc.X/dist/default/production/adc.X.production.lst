

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Feb 17 13:30:35 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.42
    52                           ; Generated 13/04/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16F1825 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  008C                     	;# 
   114  008E                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  010C                     	;# 
   130  010E                     	;# 
   131  0111                     	;# 
   132  0112                     	;# 
   133  0113                     	;# 
   134  0114                     	;# 
   135  0115                     	;# 
   136  0116                     	;# 
   137  0117                     	;# 
   138  0118                     	;# 
   139  0119                     	;# 
   140  011A                     	;# 
   141  011B                     	;# 
   142  011D                     	;# 
   143  011E                     	;# 
   144  018C                     	;# 
   145  018E                     	;# 
   146  0191                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0193                     	;# 
   152  0194                     	;# 
   153  0195                     	;# 
   154  0196                     	;# 
   155  0199                     	;# 
   156  019A                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019C                     	;# 
   160  019D                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  020C                     	;# 
   164  020E                     	;# 
   165  0211                     	;# 
   166  0211                     	;# 
   167  0212                     	;# 
   168  0212                     	;# 
   169  0213                     	;# 
   170  0213                     	;# 
   171  0214                     	;# 
   172  0214                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0291                     	;# 
   181  0291                     	;# 
   182  0292                     	;# 
   183  0293                     	;# 
   184  0294                     	;# 
   185  0295                     	;# 
   186  0295                     	;# 
   187  0296                     	;# 
   188  0298                     	;# 
   189  0298                     	;# 
   190  0299                     	;# 
   191  029A                     	;# 
   192  029B                     	;# 
   193  029C                     	;# 
   194  029D                     	;# 
   195  029E                     	;# 
   196  0311                     	;# 
   197  0311                     	;# 
   198  0312                     	;# 
   199  0313                     	;# 
   200  0318                     	;# 
   201  0318                     	;# 
   202  0319                     	;# 
   203  031A                     	;# 
   204  038C                     	;# 
   205  038E                     	;# 
   206  0391                     	;# 
   207  0392                     	;# 
   208  0393                     	;# 
   209  039A                     	;# 
   210  039C                     	;# 
   211  039D                     	;# 
   212  039E                     	;# 
   213  039F                     	;# 
   214  0415                     	;# 
   215  0416                     	;# 
   216  0417                     	;# 
   217  041C                     	;# 
   218  041D                     	;# 
   219  041E                     	;# 
   220  0FE4                     	;# 
   221  0FE5                     	;# 
   222  0FE6                     	;# 
   223  0FE7                     	;# 
   224  0FE8                     	;# 
   225  0FE9                     	;# 
   226  0FEA                     	;# 
   227  0FEB                     	;# 
   228  0FED                     	;# 
   229  0FEE                     	;# 
   230  0FEF                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0008                     	;# 
   240  0009                     	;# 
   241  000A                     	;# 
   242  000B                     	;# 
   243  000C                     	;# 
   244  000E                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  008C                     	;# 
   260  008E                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  010C                     	;# 
   276  010E                     	;# 
   277  0111                     	;# 
   278  0112                     	;# 
   279  0113                     	;# 
   280  0114                     	;# 
   281  0115                     	;# 
   282  0116                     	;# 
   283  0117                     	;# 
   284  0118                     	;# 
   285  0119                     	;# 
   286  011A                     	;# 
   287  011B                     	;# 
   288  011D                     	;# 
   289  011E                     	;# 
   290  018C                     	;# 
   291  018E                     	;# 
   292  0191                     	;# 
   293  0191                     	;# 
   294  0192                     	;# 
   295  0193                     	;# 
   296  0193                     	;# 
   297  0193                     	;# 
   298  0194                     	;# 
   299  0195                     	;# 
   300  0196                     	;# 
   301  0199                     	;# 
   302  019A                     	;# 
   303  019B                     	;# 
   304  019B                     	;# 
   305  019C                     	;# 
   306  019D                     	;# 
   307  019E                     	;# 
   308  019F                     	;# 
   309  020C                     	;# 
   310  020E                     	;# 
   311  0211                     	;# 
   312  0211                     	;# 
   313  0212                     	;# 
   314  0212                     	;# 
   315  0213                     	;# 
   316  0213                     	;# 
   317  0214                     	;# 
   318  0214                     	;# 
   319  0215                     	;# 
   320  0215                     	;# 
   321  0215                     	;# 
   322  0216                     	;# 
   323  0216                     	;# 
   324  0217                     	;# 
   325  0217                     	;# 
   326  0291                     	;# 
   327  0291                     	;# 
   328  0292                     	;# 
   329  0293                     	;# 
   330  0294                     	;# 
   331  0295                     	;# 
   332  0295                     	;# 
   333  0296                     	;# 
   334  0298                     	;# 
   335  0298                     	;# 
   336  0299                     	;# 
   337  029A                     	;# 
   338  029B                     	;# 
   339  029C                     	;# 
   340  029D                     	;# 
   341  029E                     	;# 
   342  0311                     	;# 
   343  0311                     	;# 
   344  0312                     	;# 
   345  0313                     	;# 
   346  0318                     	;# 
   347  0318                     	;# 
   348  0319                     	;# 
   349  031A                     	;# 
   350  038C                     	;# 
   351  038E                     	;# 
   352  0391                     	;# 
   353  0392                     	;# 
   354  0393                     	;# 
   355  039A                     	;# 
   356  039C                     	;# 
   357  039D                     	;# 
   358  039E                     	;# 
   359  039F                     	;# 
   360  0415                     	;# 
   361  0416                     	;# 
   362  0417                     	;# 
   363  041C                     	;# 
   364  041D                     	;# 
   365  041E                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000E                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0013                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  001E                     	;# 
   404  001F                     	;# 
   405  008C                     	;# 
   406  008E                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0093                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0098                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010E                     	;# 
   423  0111                     	;# 
   424  0112                     	;# 
   425  0113                     	;# 
   426  0114                     	;# 
   427  0115                     	;# 
   428  0116                     	;# 
   429  0117                     	;# 
   430  0118                     	;# 
   431  0119                     	;# 
   432  011A                     	;# 
   433  011B                     	;# 
   434  011D                     	;# 
   435  011E                     	;# 
   436  018C                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020C                     	;# 
   456  020E                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0291                     	;# 
   473  0291                     	;# 
   474  0292                     	;# 
   475  0293                     	;# 
   476  0294                     	;# 
   477  0295                     	;# 
   478  0295                     	;# 
   479  0296                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  029B                     	;# 
   485  029C                     	;# 
   486  029D                     	;# 
   487  029E                     	;# 
   488  0311                     	;# 
   489  0311                     	;# 
   490  0312                     	;# 
   491  0313                     	;# 
   492  0318                     	;# 
   493  0318                     	;# 
   494  0319                     	;# 
   495  031A                     	;# 
   496  038C                     	;# 
   497  038E                     	;# 
   498  0391                     	;# 
   499  0392                     	;# 
   500  0393                     	;# 
   501  039A                     	;# 
   502  039C                     	;# 
   503  039D                     	;# 
   504  039E                     	;# 
   505  039F                     	;# 
   506  0415                     	;# 
   507  0416                     	;# 
   508  0417                     	;# 
   509  041C                     	;# 
   510  041D                     	;# 
   511  041E                     	;# 
   512  0FE4                     	;# 
   513  0FE5                     	;# 
   514  0FE6                     	;# 
   515  0FE7                     	;# 
   516  0FE8                     	;# 
   517  0FE9                     	;# 
   518  0FEA                     	;# 
   519  0FEB                     	;# 
   520  0FED                     	;# 
   521  0FEE                     	;# 
   522  0FEF                     	;# 
   523  0000                     	;# 
   524  0001                     	;# 
   525  0002                     	;# 
   526  0003                     	;# 
   527  0004                     	;# 
   528  0005                     	;# 
   529  0006                     	;# 
   530  0007                     	;# 
   531  0008                     	;# 
   532  0009                     	;# 
   533  000A                     	;# 
   534  000B                     	;# 
   535  000C                     	;# 
   536  000E                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0013                     	;# 
   540  0015                     	;# 
   541  0016                     	;# 
   542  0016                     	;# 
   543  0017                     	;# 
   544  0018                     	;# 
   545  0019                     	;# 
   546  001A                     	;# 
   547  001B                     	;# 
   548  001C                     	;# 
   549  001E                     	;# 
   550  001F                     	;# 
   551  008C                     	;# 
   552  008E                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0095                     	;# 
   557  0096                     	;# 
   558  0097                     	;# 
   559  0098                     	;# 
   560  0099                     	;# 
   561  009A                     	;# 
   562  009B                     	;# 
   563  009B                     	;# 
   564  009C                     	;# 
   565  009D                     	;# 
   566  009E                     	;# 
   567  010C                     	;# 
   568  010E                     	;# 
   569  0111                     	;# 
   570  0112                     	;# 
   571  0113                     	;# 
   572  0114                     	;# 
   573  0115                     	;# 
   574  0116                     	;# 
   575  0117                     	;# 
   576  0118                     	;# 
   577  0119                     	;# 
   578  011A                     	;# 
   579  011B                     	;# 
   580  011D                     	;# 
   581  011E                     	;# 
   582  018C                     	;# 
   583  018E                     	;# 
   584  0191                     	;# 
   585  0191                     	;# 
   586  0192                     	;# 
   587  0193                     	;# 
   588  0193                     	;# 
   589  0193                     	;# 
   590  0194                     	;# 
   591  0195                     	;# 
   592  0196                     	;# 
   593  0199                     	;# 
   594  019A                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019C                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019F                     	;# 
   601  020C                     	;# 
   602  020E                     	;# 
   603  0211                     	;# 
   604  0211                     	;# 
   605  0212                     	;# 
   606  0212                     	;# 
   607  0213                     	;# 
   608  0213                     	;# 
   609  0214                     	;# 
   610  0214                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0216                     	;# 
   615  0216                     	;# 
   616  0217                     	;# 
   617  0217                     	;# 
   618  0291                     	;# 
   619  0291                     	;# 
   620  0292                     	;# 
   621  0293                     	;# 
   622  0294                     	;# 
   623  0295                     	;# 
   624  0295                     	;# 
   625  0296                     	;# 
   626  0298                     	;# 
   627  0298                     	;# 
   628  0299                     	;# 
   629  029A                     	;# 
   630  029B                     	;# 
   631  029C                     	;# 
   632  029D                     	;# 
   633  029E                     	;# 
   634  0311                     	;# 
   635  0311                     	;# 
   636  0312                     	;# 
   637  0313                     	;# 
   638  0318                     	;# 
   639  0318                     	;# 
   640  0319                     	;# 
   641  031A                     	;# 
   642  038C                     	;# 
   643  038E                     	;# 
   644  0391                     	;# 
   645  0392                     	;# 
   646  0393                     	;# 
   647  039A                     	;# 
   648  039C                     	;# 
   649  039D                     	;# 
   650  039E                     	;# 
   651  039F                     	;# 
   652  0415                     	;# 
   653  0416                     	;# 
   654  0417                     	;# 
   655  041C                     	;# 
   656  041D                     	;# 
   657  041E                     	;# 
   658  0FE4                     	;# 
   659  0FE5                     	;# 
   660  0FE6                     	;# 
   661  0FE7                     	;# 
   662  0FE8                     	;# 
   663  0FE9                     	;# 
   664  0FEA                     	;# 
   665  0FEB                     	;# 
   666  0FED                     	;# 
   667  0FEE                     	;# 
   668  0FEF                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0008                     	;# 
   678  0009                     	;# 
   679  000A                     	;# 
   680  000B                     	;# 
   681  000C                     	;# 
   682  000E                     	;# 
   683  0011                     	;# 
   684  0012                     	;# 
   685  0013                     	;# 
   686  0015                     	;# 
   687  0016                     	;# 
   688  0016                     	;# 
   689  0017                     	;# 
   690  0018                     	;# 
   691  0019                     	;# 
   692  001A                     	;# 
   693  001B                     	;# 
   694  001C                     	;# 
   695  001E                     	;# 
   696  001F                     	;# 
   697  008C                     	;# 
   698  008E                     	;# 
   699  0091                     	;# 
   700  0092                     	;# 
   701  0093                     	;# 
   702  0095                     	;# 
   703  0096                     	;# 
   704  0097                     	;# 
   705  0098                     	;# 
   706  0099                     	;# 
   707  009A                     	;# 
   708  009B                     	;# 
   709  009B                     	;# 
   710  009C                     	;# 
   711  009D                     	;# 
   712  009E                     	;# 
   713  010C                     	;# 
   714  010E                     	;# 
   715  0111                     	;# 
   716  0112                     	;# 
   717  0113                     	;# 
   718  0114                     	;# 
   719  0115                     	;# 
   720  0116                     	;# 
   721  0117                     	;# 
   722  0118                     	;# 
   723  0119                     	;# 
   724  011A                     	;# 
   725  011B                     	;# 
   726  011D                     	;# 
   727  011E                     	;# 
   728  018C                     	;# 
   729  018E                     	;# 
   730  0191                     	;# 
   731  0191                     	;# 
   732  0192                     	;# 
   733  0193                     	;# 
   734  0193                     	;# 
   735  0193                     	;# 
   736  0194                     	;# 
   737  0195                     	;# 
   738  0196                     	;# 
   739  0199                     	;# 
   740  019A                     	;# 
   741  019B                     	;# 
   742  019B                     	;# 
   743  019C                     	;# 
   744  019D                     	;# 
   745  019E                     	;# 
   746  019F                     	;# 
   747  020C                     	;# 
   748  020E                     	;# 
   749  0211                     	;# 
   750  0211                     	;# 
   751  0212                     	;# 
   752  0212                     	;# 
   753  0213                     	;# 
   754  0213                     	;# 
   755  0214                     	;# 
   756  0214                     	;# 
   757  0215                     	;# 
   758  0215                     	;# 
   759  0215                     	;# 
   760  0216                     	;# 
   761  0216                     	;# 
   762  0217                     	;# 
   763  0217                     	;# 
   764  0291                     	;# 
   765  0291                     	;# 
   766  0292                     	;# 
   767  0293                     	;# 
   768  0294                     	;# 
   769  0295                     	;# 
   770  0295                     	;# 
   771  0296                     	;# 
   772  0298                     	;# 
   773  0298                     	;# 
   774  0299                     	;# 
   775  029A                     	;# 
   776  029B                     	;# 
   777  029C                     	;# 
   778  029D                     	;# 
   779  029E                     	;# 
   780  0311                     	;# 
   781  0311                     	;# 
   782  0312                     	;# 
   783  0313                     	;# 
   784  0318                     	;# 
   785  0318                     	;# 
   786  0319                     	;# 
   787  031A                     	;# 
   788  038C                     	;# 
   789  038E                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0415                     	;# 
   799  0416                     	;# 
   800  0417                     	;# 
   801  041C                     	;# 
   802  041D                     	;# 
   803  041E                     	;# 
   804  0FE4                     	;# 
   805  0FE5                     	;# 
   806  0FE6                     	;# 
   807  0FE7                     	;# 
   808  0FE8                     	;# 
   809  0FE9                     	;# 
   810  0FEA                     	;# 
   811  0FEB                     	;# 
   812  0FED                     	;# 
   813  0FEE                     	;# 
   814  0FEF                     	;# 
   815  0000                     	;# 
   816  0001                     	;# 
   817  0002                     	;# 
   818  0003                     	;# 
   819  0004                     	;# 
   820  0005                     	;# 
   821  0006                     	;# 
   822  0007                     	;# 
   823  0008                     	;# 
   824  0009                     	;# 
   825  000A                     	;# 
   826  000B                     	;# 
   827  000C                     	;# 
   828  000E                     	;# 
   829  0011                     	;# 
   830  0012                     	;# 
   831  0013                     	;# 
   832  0015                     	;# 
   833  0016                     	;# 
   834  0016                     	;# 
   835  0017                     	;# 
   836  0018                     	;# 
   837  0019                     	;# 
   838  001A                     	;# 
   839  001B                     	;# 
   840  001C                     	;# 
   841  001E                     	;# 
   842  001F                     	;# 
   843  008C                     	;# 
   844  008E                     	;# 
   845  0091                     	;# 
   846  0092                     	;# 
   847  0093                     	;# 
   848  0095                     	;# 
   849  0096                     	;# 
   850  0097                     	;# 
   851  0098                     	;# 
   852  0099                     	;# 
   853  009A                     	;# 
   854  009B                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  010C                     	;# 
   860  010E                     	;# 
   861  0111                     	;# 
   862  0112                     	;# 
   863  0113                     	;# 
   864  0114                     	;# 
   865  0115                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  0118                     	;# 
   869  0119                     	;# 
   870  011A                     	;# 
   871  011B                     	;# 
   872  011D                     	;# 
   873  011E                     	;# 
   874  018C                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020C                     	;# 
   894  020E                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0294                     	;# 
   915  0295                     	;# 
   916  0295                     	;# 
   917  0296                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  029B                     	;# 
   923  029C                     	;# 
   924  029D                     	;# 
   925  029E                     	;# 
   926  0311                     	;# 
   927  0311                     	;# 
   928  0312                     	;# 
   929  0313                     	;# 
   930  0318                     	;# 
   931  0318                     	;# 
   932  0319                     	;# 
   933  031A                     	;# 
   934  038C                     	;# 
   935  038E                     	;# 
   936  0391                     	;# 
   937  0392                     	;# 
   938  0393                     	;# 
   939  039A                     	;# 
   940  039C                     	;# 
   941  039D                     	;# 
   942  039E                     	;# 
   943  039F                     	;# 
   944  0415                     	;# 
   945  0416                     	;# 
   946  0417                     	;# 
   947  041C                     	;# 
   948  041D                     	;# 
   949  041E                     	;# 
   950  0FE4                     	;# 
   951  0FE5                     	;# 
   952  0FE6                     	;# 
   953  0FE7                     	;# 
   954  0FE8                     	;# 
   955  0FE9                     	;# 
   956  0FEA                     	;# 
   957  0FEB                     	;# 
   958  0FED                     	;# 
   959  0FEE                     	;# 
   960  0FEF                     	;# 
   961  0000                     	;# 
   962  0001                     	;# 
   963  0002                     	;# 
   964  0003                     	;# 
   965  0004                     	;# 
   966  0005                     	;# 
   967  0006                     	;# 
   968  0007                     	;# 
   969  0008                     	;# 
   970  0009                     	;# 
   971  000A                     	;# 
   972  000B                     	;# 
   973  000C                     	;# 
   974  000E                     	;# 
   975  0011                     	;# 
   976  0012                     	;# 
   977  0013                     	;# 
   978  0015                     	;# 
   979  0016                     	;# 
   980  0016                     	;# 
   981  0017                     	;# 
   982  0018                     	;# 
   983  0019                     	;# 
   984  001A                     	;# 
   985  001B                     	;# 
   986  001C                     	;# 
   987  001E                     	;# 
   988  001F                     	;# 
   989  008C                     	;# 
   990  008E                     	;# 
   991  0091                     	;# 
   992  0092                     	;# 
   993  0093                     	;# 
   994  0095                     	;# 
   995  0096                     	;# 
   996  0097                     	;# 
   997  0098                     	;# 
   998  0099                     	;# 
   999  009A                     	;# 
  1000  009B                     	;# 
  1001  009B                     	;# 
  1002  009C                     	;# 
  1003  009D                     	;# 
  1004  009E                     	;# 
  1005  010C                     	;# 
  1006  010E                     	;# 
  1007  0111                     	;# 
  1008  0112                     	;# 
  1009  0113                     	;# 
  1010  0114                     	;# 
  1011  0115                     	;# 
  1012  0116                     	;# 
  1013  0117                     	;# 
  1014  0118                     	;# 
  1015  0119                     	;# 
  1016  011A                     	;# 
  1017  011B                     	;# 
  1018  011D                     	;# 
  1019  011E                     	;# 
  1020  018C                     	;# 
  1021  018E                     	;# 
  1022  0191                     	;# 
  1023  0191                     	;# 
  1024  0192                     	;# 
  1025  0193                     	;# 
  1026  0193                     	;# 
  1027  0193                     	;# 
  1028  0194                     	;# 
  1029  0195                     	;# 
  1030  0196                     	;# 
  1031  0199                     	;# 
  1032  019A                     	;# 
  1033  019B                     	;# 
  1034  019B                     	;# 
  1035  019C                     	;# 
  1036  019D                     	;# 
  1037  019E                     	;# 
  1038  019F                     	;# 
  1039  020C                     	;# 
  1040  020E                     	;# 
  1041  0211                     	;# 
  1042  0211                     	;# 
  1043  0212                     	;# 
  1044  0212                     	;# 
  1045  0213                     	;# 
  1046  0213                     	;# 
  1047  0214                     	;# 
  1048  0214                     	;# 
  1049  0215                     	;# 
  1050  0215                     	;# 
  1051  0215                     	;# 
  1052  0216                     	;# 
  1053  0216                     	;# 
  1054  0217                     	;# 
  1055  0217                     	;# 
  1056  0291                     	;# 
  1057  0291                     	;# 
  1058  0292                     	;# 
  1059  0293                     	;# 
  1060  0294                     	;# 
  1061  0295                     	;# 
  1062  0295                     	;# 
  1063  0296                     	;# 
  1064  0298                     	;# 
  1065  0298                     	;# 
  1066  0299                     	;# 
  1067  029A                     	;# 
  1068  029B                     	;# 
  1069  029C                     	;# 
  1070  029D                     	;# 
  1071  029E                     	;# 
  1072  0311                     	;# 
  1073  0311                     	;# 
  1074  0312                     	;# 
  1075  0313                     	;# 
  1076  0318                     	;# 
  1077  0318                     	;# 
  1078  0319                     	;# 
  1079  031A                     	;# 
  1080  038C                     	;# 
  1081  038E                     	;# 
  1082  0391                     	;# 
  1083  0392                     	;# 
  1084  0393                     	;# 
  1085  039A                     	;# 
  1086  039C                     	;# 
  1087  039D                     	;# 
  1088  039E                     	;# 
  1089  039F                     	;# 
  1090  0415                     	;# 
  1091  0416                     	;# 
  1092  0417                     	;# 
  1093  041C                     	;# 
  1094  041D                     	;# 
  1095  041E                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000E                     	;# 
  1121  0011                     	;# 
  1122  0012                     	;# 
  1123  0013                     	;# 
  1124  0015                     	;# 
  1125  0016                     	;# 
  1126  0016                     	;# 
  1127  0017                     	;# 
  1128  0018                     	;# 
  1129  0019                     	;# 
  1130  001A                     	;# 
  1131  001B                     	;# 
  1132  001C                     	;# 
  1133  001E                     	;# 
  1134  001F                     	;# 
  1135  008C                     	;# 
  1136  008E                     	;# 
  1137  0091                     	;# 
  1138  0092                     	;# 
  1139  0093                     	;# 
  1140  0095                     	;# 
  1141  0096                     	;# 
  1142  0097                     	;# 
  1143  0098                     	;# 
  1144  0099                     	;# 
  1145  009A                     	;# 
  1146  009B                     	;# 
  1147  009B                     	;# 
  1148  009C                     	;# 
  1149  009D                     	;# 
  1150  009E                     	;# 
  1151  010C                     	;# 
  1152  010E                     	;# 
  1153  0111                     	;# 
  1154  0112                     	;# 
  1155  0113                     	;# 
  1156  0114                     	;# 
  1157  0115                     	;# 
  1158  0116                     	;# 
  1159  0117                     	;# 
  1160  0118                     	;# 
  1161  0119                     	;# 
  1162  011A                     	;# 
  1163  011B                     	;# 
  1164  011D                     	;# 
  1165  011E                     	;# 
  1166  018C                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0194                     	;# 
  1175  0195                     	;# 
  1176  0196                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019C                     	;# 
  1182  019D                     	;# 
  1183  019E                     	;# 
  1184  019F                     	;# 
  1185  020C                     	;# 
  1186  020E                     	;# 
  1187  0211                     	;# 
  1188  0211                     	;# 
  1189  0212                     	;# 
  1190  0212                     	;# 
  1191  0213                     	;# 
  1192  0213                     	;# 
  1193  0214                     	;# 
  1194  0214                     	;# 
  1195  0215                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0216                     	;# 
  1199  0216                     	;# 
  1200  0217                     	;# 
  1201  0217                     	;# 
  1202  0291                     	;# 
  1203  0291                     	;# 
  1204  0292                     	;# 
  1205  0293                     	;# 
  1206  0294                     	;# 
  1207  0295                     	;# 
  1208  0295                     	;# 
  1209  0296                     	;# 
  1210  0298                     	;# 
  1211  0298                     	;# 
  1212  0299                     	;# 
  1213  029A                     	;# 
  1214  029B                     	;# 
  1215  029C                     	;# 
  1216  029D                     	;# 
  1217  029E                     	;# 
  1218  0311                     	;# 
  1219  0311                     	;# 
  1220  0312                     	;# 
  1221  0313                     	;# 
  1222  0318                     	;# 
  1223  0318                     	;# 
  1224  0319                     	;# 
  1225  031A                     	;# 
  1226  038C                     	;# 
  1227  038E                     	;# 
  1228  0391                     	;# 
  1229  0392                     	;# 
  1230  0393                     	;# 
  1231  039A                     	;# 
  1232  039C                     	;# 
  1233  039D                     	;# 
  1234  039E                     	;# 
  1235  039F                     	;# 
  1236  0415                     	;# 
  1237  0416                     	;# 
  1238  0417                     	;# 
  1239  041C                     	;# 
  1240  041D                     	;# 
  1241  041E                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253                           
  1254                           	psect	idataBANK0
  1255  043C                     __pidataBANK0:	
  1256                           
  1257                           ;initializer for main@F3040
  1258  043C  340A               	retlw	10
  1259  043D  3400               	retlw	0
  1260  043E  3400               	retlw	0
  1261  043F  3400               	retlw	0
  1262  0440  3400               	retlw	0
  1263  0441  3400               	retlw	0
  1264  0442  3400               	retlw	0
  1265  0443  3400               	retlw	0
  1266                           
  1267                           	psect	stringtext1
  1268  0432                     __pstringtext1:	
  1269  0432                     _dpowers:	
  1270  0432  3401               	retlw	1
  1271  0433  3400               	retlw	0
  1272  0434  340A               	retlw	10
  1273  0435  3400               	retlw	0
  1274  0436  3464               	retlw	100
  1275  0437  3400               	retlw	0
  1276  0438  34E8               	retlw	232
  1277  0439  3403               	retlw	3
  1278  043A  3410               	retlw	16
  1279  043B  3427               	retlw	39
  1280  043C                     __end_of_dpowers:	
  1281                           
  1282                           	psect	stringtext2
  1283  046F                     __pstringtext2:	
  1284  046F                     _ANALOG_IN:	
  1285  046F  3402               	retlw	2
  1286  0470  3404               	retlw	4
  1287  0471  3405               	retlw	5
  1288  0472  3406               	retlw	6
  1289  0473                     __end_of_ANALOG_IN:	
  1290                           
  1291                           	psect	nvBANK0
  1292  0067                     __pnvBANK0:	
  1293  0067                     _timer0ReloadVal:	
  1294  0067                     	ds	1
  1295  0068                     _eusartTxBufferRemaining:	
  1296  0068                     	ds	1
  1297  0015                     _TMR0	set	21
  1298  0011                     _PIR1bits	set	17
  1299  000B                     _INTCONbits	set	11
  1300  005A                     _TMR0IF	set	90
  1301  0095                     _OPTION_REG	set	149
  1302  009D                     _ADCON0bits	set	157
  1303  009C                     _ADRESH	set	156
  1304  009B                     _ADRESL	set	155
  1305  009E                     _ADCON1	set	158
  1306  009D                     _ADCON0	set	157
  1307  0097                     _WDTCON	set	151
  1308  0098                     _OSCTUNE	set	152
  1309  0099                     _OSCCON	set	153
  1310  0091                     _PIE1bits	set	145
  1311  0095                     _OPTION_REGbits	set	149
  1312  008E                     _TRISC	set	142
  1313  008C                     _TRISA	set	140
  1314  011D                     _APFCON0	set	285
  1315  011E                     _APFCON1	set	286
  1316  010E                     _LATC	set	270
  1317  010C                     _LATA	set	268
  1318  0196                     _EECON2	set	406
  1319  0193                     _EEDATL	set	403
  1320  0194                     _EEDATH	set	404
  1321  0195                     _EECON1bits	set	405
  1322  0192                     _EEADRH	set	402
  1323  0191                     _EEADRL	set	401
  1324  0199                     _RCREG	set	409
  1325  019A                     _TXREG	set	410
  1326  019D                     _RCSTAbits	set	413
  1327  019C                     _SPBRGH	set	412
  1328  019B                     _SPBRGL	set	411
  1329  019E                     _TXSTA	set	414
  1330  019D                     _RCSTA	set	413
  1331  019F                     _BAUDCON	set	415
  1332  018C                     _ANSELA	set	396
  1333  018E                     _ANSELC	set	398
  1334  020E                     _WPUC	set	526
  1335  020C                     _WPUA	set	524
  1336                           
  1337                           	psect	stringtext3
  1338  0473                     __pstringtext3:	
  1339  0473                     STR_4:	
  1340  0473  3425               	retlw	37	;'%'
  1341  0474  3464               	retlw	100	;'d'
  1342  0475  340A               	retlw	10
  1343  0476  3400               	retlw	0
  1344                           
  1345                           	psect	stringtext4
  1346  0477                     __pstringtext4:	
  1347  0477                     STR_3:	
  1348  0477  3425               	retlw	37	;'%'
  1349  0478  3464               	retlw	100	;'d'
  1350  0479  342C               	retlw	44	;','
  1351  047A  3400               	retlw	0
  1352                           
  1353                           	psect	stringtext5
  1354  0483                     __pstringtext5:	
  1355  0483                     STR_2:	
  1356  0483  3466               	retlw	102	;'f'
  1357  0484  343A               	retlw	58	;':'
  1358  0485  3400               	retlw	0
  1359                           
  1360                           	psect	stringtext6
  1361  0486                     __pstringtext6:	
  1362  0486                     STR_1:	
  1363  0486  3474               	retlw	116	;'t'
  1364  0487  343A               	retlw	58	;':'
  1365  0488  3400               	retlw	0
  1366                           
  1367                           	psect	stringtext7
  1368  0000                     __pstringtext7:	
  1369                           
  1370                           ; #config settings
  1371  0000                     
  1372                           	psect	cinit
  1373  0026                     start_initialization:	
  1374  0026                     __initialization:	
  1375                           
  1376                           ; Initialize objects allocated to BANK0
  1377  0026  303C               	movlw	low __pidataBANK0
  1378  0027  0084               	movwf	4
  1379  0028  3084               	movlw	(high __pidataBANK0)| (0+128)
  1380  0029  0085               	movwf	5
  1381  002A  305F               	movlw	low __pdataBANK0
  1382  002B  0086               	movwf	6
  1383  002C  3000               	movlw	high __pdataBANK0
  1384  002D  0087               	movwf	7
  1385  002E  3008               	movlw	8
  1386  002F  3184  2453  3180   	fcall	init_ram
  1387                           
  1388                           ; Clear objects allocated to COMMON
  1389  0032  01FA               	clrf	__pbssCOMMON& (0+127)
  1390  0033  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1391                           
  1392                           ; Clear objects allocated to BANK0
  1393  0034  304B               	movlw	low __pbssBANK0
  1394  0035  0084               	movwf	4
  1395  0036  3000               	movlw	high __pbssBANK0
  1396  0037  0085               	movwf	5
  1397  0038  3014               	movlw	20
  1398  0039  3184  2459         	fcall	clear_ram0
  1399  003B                     end_of_initialization:	
  1400                           ;End of C runtime variable initialization code
  1401                           
  1402  003B                     __end_of__initialization:	
  1403  003B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1404  003C  0020               	movlb	0
  1405  003D  3180  283F         	ljmp	_main	;jump to C main() function
  1406                           
  1407                           	psect	bssCOMMON
  1408  007A                     __pbssCOMMON:	
  1409  007A                     _eusartTxTail:	
  1410  007A                     	ds	1
  1411  007B                     _eusartTxHead:	
  1412  007B                     	ds	1
  1413                           
  1414                           	psect	bssBANK0
  1415  004B                     __pbssBANK0:	
  1416  004B                     _eusartRxBuffer:	
  1417  004B                     	ds	8
  1418  0053                     _eusartTxBuffer:	
  1419  0053                     	ds	8
  1420  005B                     _tmr:	
  1421  005B                     	ds	1
  1422  005C                     _eusartRxCount:	
  1423  005C                     	ds	1
  1424  005D                     _eusartRxTail:	
  1425  005D                     	ds	1
  1426  005E                     _eusartRxHead:	
  1427  005E                     	ds	1
  1428                           
  1429                           	psect	dataBANK0
  1430  005F                     __pdataBANK0:	
  1431  005F                     main@F3040:	
  1432  005F                     	ds	8
  1433                           
  1434                           	psect	inittext
  1435  0453                     init_ram:	
  1436  0453  00FE               	movwf	126
  1437  0454                     initloop:	
  1438  0454  0012               	moviw fsr0++
  1439  0455  001E               	movwi fsr1++
  1440  0456  0BFE               	decfsz	126,f
  1441  0457  2C54               	goto	initloop
  1442  0458  3400               	retlw	0
  1443                           
  1444                           	psect	clrtext
  1445  0459                     clear_ram0:	
  1446                           ;	Called with FSR0 containing the base address, and
  1447                           ;	WREG with the size to clear
  1448                           
  1449  0459  0064               	clrwdt	;clear the watchdog before getting into this loop
  1450  045A                     clrloop0:	
  1451  045A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1452  045B  3101               	addfsr 0,1
  1453  045C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1454  045D  2C5A               	goto	clrloop0	;have we reached the end yet?
  1455  045E  3400               	retlw	0	;all done for this memory range, return
  1456                           
  1457                           	psect	cstackCOMMON
  1458  0070                     __pcstackCOMMON:	
  1459  0070                     ?_isdigit:	
  1460  0070                     ?_EUSART_Transmit_ISR:	
  1461                           ; 1 bit 
  1462                           
  1463  0070                     ??_EUSART_Transmit_ISR:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?_EUSART_Receive_ISR:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ??_EUSART_Receive_ISR:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ?_OSCILLATOR_Initialize:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ?_WDT_Initialize:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ?_TMR0_Initialize:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_ADC_Initialize:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_EUSART_Initialize:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_PIN_MANAGER_Initialize:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ?_INTERRUPT_InterruptManager:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_SYSTEM_Initialize:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?_EUSART_Read:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_EUSART_Write:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ?_putch:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_ADC_SelectChannel:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_ADC_StartConversion:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_ADC_IsConversionDone:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_TMR0_HasOverflowOccured:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_DATAEE_ReadByte:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_main:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523                           
  1524                           ; 1 bytes @ 0x0
  1525  0070                     	ds	1
  1526  0071                     ??_INTERRUPT_InterruptManager:	
  1527                           
  1528                           ; 1 bytes @ 0x1
  1529  0071                     	ds	1
  1530  0072                     ??_OSCILLATOR_Initialize:	
  1531  0072                     ??_WDT_Initialize:	
  1532                           ; 1 bytes @ 0x2
  1533                           
  1534  0072                     ??_TMR0_Initialize:	
  1535                           ; 1 bytes @ 0x2
  1536                           
  1537  0072                     ??_ADC_Initialize:	
  1538                           ; 1 bytes @ 0x2
  1539                           
  1540  0072                     ??_EUSART_Initialize:	
  1541                           ; 1 bytes @ 0x2
  1542                           
  1543  0072                     ??_isdigit:	
  1544                           ; 1 bytes @ 0x2
  1545                           
  1546  0072                     ??_PIN_MANAGER_Initialize:	
  1547                           ; 1 bytes @ 0x2
  1548                           
  1549  0072                     ??_EUSART_Read:	
  1550                           ; 1 bytes @ 0x2
  1551                           
  1552  0072                     ??_EUSART_Write:	
  1553                           ; 1 bytes @ 0x2
  1554                           
  1555  0072                     ??_ADC_SelectChannel:	
  1556                           ; 1 bytes @ 0x2
  1557                           
  1558  0072                     ??_ADC_StartConversion:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_ADC_IsConversionDone:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     ??_TMR0_HasOverflowOccured:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     ?_DATAEE_WriteByte:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570  0072                     ??_DATAEE_ReadByte:	
  1571                           ; 1 bytes @ 0x2
  1572                           
  1573  0072                     ?_strncmp:	
  1574                           ; 1 bytes @ 0x2
  1575                           
  1576  0072                     ?_ADC_GetConversionResult:	
  1577                           ; 2 bytes @ 0x2
  1578                           
  1579  0072                     ?___wmul:	
  1580                           ; 2 bytes @ 0x2
  1581                           
  1582  0072                     ?___lwdiv:	
  1583                           ; 2 bytes @ 0x2
  1584                           
  1585  0072                     DATAEE_WriteByte@bData:	
  1586                           ; 2 bytes @ 0x2
  1587                           
  1588  0072                     DATAEE_ReadByte@bAdd:	
  1589                           ; 1 bytes @ 0x2
  1590                           
  1591  0072                     _isdigit$781:	
  1592                           ; 1 bytes @ 0x2
  1593                           
  1594  0072                     ___wmul@multiplier:	
  1595                           ; 1 bytes @ 0x2
  1596                           
  1597  0072                     ___lwdiv@divisor:	
  1598                           ; 2 bytes @ 0x2
  1599                           
  1600  0072                     strncmp@s1:	
  1601                           ; 2 bytes @ 0x2
  1602                           
  1603                           
  1604                           ; 2 bytes @ 0x2
  1605  0072                     	ds	1
  1606  0073                     ??_SYSTEM_Initialize:	
  1607  0073                     ??_DATAEE_WriteByte:	
  1608                           ; 1 bytes @ 0x3
  1609                           
  1610  0073                     EUSART_Read@readValue:	
  1611                           ; 1 bytes @ 0x3
  1612                           
  1613  0073                     EUSART_Write@txData:	
  1614                           ; 1 bytes @ 0x3
  1615                           
  1616  0073                     ADC_SelectChannel@channel:	
  1617                           ; 1 bytes @ 0x3
  1618                           
  1619  0073                     DATAEE_WriteByte@bAdd:	
  1620                           ; 1 bytes @ 0x3
  1621                           
  1622  0073                     isdigit@c:	
  1623                           ; 1 bytes @ 0x3
  1624                           
  1625                           
  1626                           ; 1 bytes @ 0x3
  1627  0073                     	ds	1
  1628  0074                     ??_putch:	
  1629  0074                     ??_ADC_GetConversionResult:	
  1630                           ; 1 bytes @ 0x4
  1631                           
  1632  0074                     putch@txData:	
  1633                           ; 1 bytes @ 0x4
  1634                           
  1635  0074                     DATAEE_WriteByte@GIEBitValue:	
  1636                           ; 1 bytes @ 0x4
  1637                           
  1638  0074                     strncmp@s2:	
  1639                           ; 1 bytes @ 0x4
  1640                           
  1641  0074                     ___wmul@multiplicand:	
  1642                           ; 1 bytes @ 0x4
  1643                           
  1644  0074                     ___lwdiv@dividend:	
  1645                           ; 2 bytes @ 0x4
  1646                           
  1647                           
  1648                           ; 2 bytes @ 0x4
  1649  0074                     	ds	1
  1650  0075                     strncmp@len:	
  1651                           
  1652                           ; 2 bytes @ 0x5
  1653  0075                     	ds	1
  1654  0076                     ??___wmul:	
  1655  0076                     ??___lwdiv:	
  1656                           ; 1 bytes @ 0x6
  1657                           
  1658  0076                     ___wmul@product:	
  1659                           ; 1 bytes @ 0x6
  1660                           
  1661                           
  1662                           ; 2 bytes @ 0x6
  1663  0076                     	ds	1
  1664  0077                     ??_strncmp:	
  1665  0077                     ___lwdiv@quotient:	
  1666                           ; 1 bytes @ 0x7
  1667                           
  1668                           
  1669                           ; 2 bytes @ 0x7
  1670  0077                     	ds	1
  1671  0078                     ?_atoi:	
  1672                           
  1673                           ; 2 bytes @ 0x8
  1674  0078                     	ds	1
  1675  0079                     ___lwdiv@counter:	
  1676                           
  1677                           ; 1 bytes @ 0x9
  1678  0079                     	ds	1
  1679                           
  1680                           	psect	cstackBANK0
  1681  0020                     __pcstackBANK0:	
  1682  0020                     ??_atoi:	
  1683  0020                     ?___lwmod:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0020                     ___lwmod@divisor:	
  1687                           ; 2 bytes @ 0x0
  1688                           
  1689                           
  1690                           ; 2 bytes @ 0x0
  1691  0020                     	ds	2
  1692  0022                     atoi@sign:	
  1693  0022                     ___lwmod@dividend:	
  1694                           ; 1 bytes @ 0x2
  1695                           
  1696                           
  1697                           ; 2 bytes @ 0x2
  1698  0022                     	ds	1
  1699  0023                     atoi@a:	
  1700                           
  1701                           ; 2 bytes @ 0x3
  1702  0023                     	ds	1
  1703  0024                     ??___lwmod:	
  1704                           
  1705                           ; 1 bytes @ 0x4
  1706  0024                     	ds	1
  1707  0025                     atoi@s:	
  1708  0025                     ___lwmod@counter:	
  1709                           ; 1 bytes @ 0x5
  1710                           
  1711                           
  1712                           ; 1 bytes @ 0x5
  1713  0025                     	ds	1
  1714  0026                     ?_printf:	
  1715  0026                     printf@f:	
  1716                           ; 2 bytes @ 0x6
  1717                           
  1718                           
  1719                           ; 2 bytes @ 0x6
  1720  0026                     	ds	4
  1721  002A                     ??_printf:	
  1722                           
  1723                           ; 1 bytes @ 0xA
  1724  002A                     	ds	4
  1725  002E                     printf@ap:	
  1726                           
  1727                           ; 1 bytes @ 0xE
  1728  002E                     	ds	1
  1729  002F                     printf@flag:	
  1730                           
  1731                           ; 1 bytes @ 0xF
  1732  002F                     	ds	1
  1733  0030                     printf@prec:	
  1734                           
  1735                           ; 1 bytes @ 0x10
  1736  0030                     	ds	1
  1737  0031                     printf@val:	
  1738                           
  1739                           ; 2 bytes @ 0x11
  1740  0031                     	ds	2
  1741  0033                     printf@c:	
  1742                           
  1743                           ; 1 bytes @ 0x13
  1744  0033                     	ds	1
  1745  0034                     ??_main:	
  1746                           
  1747                           ; 1 bytes @ 0x14
  1748  0034                     	ds	1
  1749  0035                     main@level:	
  1750                           
  1751                           ; 8 bytes @ 0x15
  1752  0035                     	ds	8
  1753  003D                     main@buf:	
  1754                           
  1755                           ; 8 bytes @ 0x1D
  1756  003D                     	ds	8
  1757  0045                     main@c:	
  1758                           
  1759                           ; 1 bytes @ 0x25
  1760  0045                     	ds	1
  1761  0046                     main@channels:	
  1762                           
  1763                           ; 1 bytes @ 0x26
  1764  0046                     	ds	1
  1765  0047                     main@cnt:	
  1766                           
  1767                           ; 1 bytes @ 0x27
  1768  0047                     	ds	1
  1769  0048                     main@t_max:	
  1770                           
  1771                           ; 1 bytes @ 0x28
  1772  0048                     	ds	1
  1773  0049                     main@mask:	
  1774                           
  1775                           ; 1 bytes @ 0x29
  1776  0049                     	ds	1
  1777  004A                     main@i:	
  1778                           
  1779                           ; 1 bytes @ 0x2A
  1780  004A                     	ds	1
  1781                           
  1782                           	psect	maintext
  1783  003F                     __pmaintext:	
  1784 ;;
  1785 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1786 ;;
  1787 ;; *************** function _main *****************
  1788 ;; Defined at:
  1789 ;;		line 14 in file "main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  i               1   42[BANK0 ] unsigned char 
  1794 ;;  buf             8   29[BANK0 ] unsigned char [8]
  1795 ;;  level           8   21[BANK0 ] unsigned int [4]
  1796 ;;  mask            1   41[BANK0 ] unsigned char 
  1797 ;;  t_max           1   40[BANK0 ] unsigned char 
  1798 ;;  cnt             1   39[BANK0 ] unsigned char 
  1799 ;;  channels        1   38[BANK0 ] unsigned char 
  1800 ;;  c               1   37[BANK0 ] unsigned char 
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : B1F/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1811 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1813 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1814 ;;Total ram usage:       23 bytes
  1815 ;; Hardware stack levels required when called:    5
  1816 ;; This function calls:
  1817 ;;		_ADC_GetConversionResult
  1818 ;;		_ADC_IsConversionDone
  1819 ;;		_ADC_SelectChannel
  1820 ;;		_ADC_StartConversion
  1821 ;;		_DATAEE_ReadByte
  1822 ;;		_DATAEE_WriteByte
  1823 ;;		_EUSART_Read
  1824 ;;		_SYSTEM_Initialize
  1825 ;;		_TMR0_HasOverflowOccured
  1826 ;;		_atoi
  1827 ;;		_printf
  1828 ;;		_strncmp
  1829 ;; This function is called by:
  1830 ;;		Startup code after reset
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           
  1835                           ;psect for function _main
  1836  003F                     _main:	
  1837                           
  1838                           ;main.c: 17: SYSTEM_Initialize();
  1839                           
  1840                           ;incstack = 0
  1841                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1842  003F  3183  23EB  3180   	fcall	_SYSTEM_Initialize
  1843                           
  1844                           ;main.c: 18: (INTCONbits.GIE = 1);
  1845  0042  178B               	bsf	11,7	;volatile
  1846                           
  1847                           ;main.c: 19: (INTCONbits.PEIE = 1);
  1848  0043  170B               	bsf	11,6	;volatile
  1849                           
  1850                           ;main.c: 22: uint8_t buf[8] = {'\n'};
  1851  0044  305F               	movlw	low main@F3040
  1852  0045  0086               	movwf	6
  1853  0046  3000               	movlw	high main@F3040
  1854  0047  0087               	movwf	7
  1855  0048  303D               	movlw	low main@buf
  1856  0049  0084               	movwf	4
  1857  004A  3000               	movlw	high main@buf
  1858  004B  0085               	movwf	5
  1859  004C  3008               	movlw	8
  1860  004D  0020               	movlb	0	; select bank0
  1861  004E  00B4               	movwf	??_main
  1862  004F                     u1560:	
  1863  004F  0016               	moviw fsr1++
  1864  0050  001A               	movwi fsr0++
  1865  0051  0BB4               	decfsz	??_main,f
  1866  0052  284F               	goto	u1560
  1867                           
  1868                           ;main.c: 23: uint8_t cnt = 0;
  1869  0053  01C7               	clrf	main@cnt
  1870                           
  1871                           ;main.c: 24: uint8_t c;
  1872                           ;main.c: 25: uint8_t t_max = DATAEE_ReadByte(0);
  1873  0054  3000               	movlw	0
  1874  0055  3184  2426  3180   	fcall	_DATAEE_ReadByte
  1875  0058  0020               	movlb	0	; select bank0
  1876  0059  00B4               	movwf	??_main
  1877  005A  0834               	movf	??_main,w
  1878  005B  00C8               	movwf	main@t_max
  1879                           
  1880                           ;main.c: 26: uint8_t channels = DATAEE_ReadByte(1);
  1881  005C  3001               	movlw	1
  1882  005D  3184  2426  3180   	fcall	_DATAEE_ReadByte
  1883  0060  0020               	movlb	0	; select bank0
  1884  0061  00B4               	movwf	??_main
  1885  0062  0834               	movf	??_main,w
  1886  0063  00C6               	movwf	main@channels
  1887                           
  1888                           ;main.c: 27: adc_result_t level[4];
  1889                           ;main.c: 28: uint8_t mask = 0b00000001;
  1890  0064  01C9               	clrf	main@mask
  1891  0065  0AC9               	incf	main@mask,f
  1892  0066                     l1994:	
  1893                           ;main.c: 30: while (1)
  1894                           
  1895                           
  1896                           ;main.c: 31: {
  1897                           ;main.c: 32: uint8_t i;
  1898                           ;main.c: 33: c = EUSART_Read();
  1899  0066  3183  2329  3180   	fcall	_EUSART_Read
  1900  0069  0020               	movlb	0	; select bank0
  1901  006A  00B4               	movwf	??_main
  1902  006B  0834               	movf	??_main,w
  1903  006C  00C5               	movwf	main@c
  1904                           
  1905                           ;main.c: 34: buf[cnt++] = c;
  1906  006D  0845               	movf	main@c,w
  1907  006E  00B4               	movwf	??_main
  1908  006F  0847               	movf	main@cnt,w
  1909  0070  3E3D               	addlw	(low (main@buf| 0))& (0+255)
  1910  0071  0086               	movwf	6
  1911  0072  0187               	clrf	7
  1912  0073  0834               	movf	??_main,w
  1913  0074  0081               	movwf	1
  1914  0075  3001               	movlw	1
  1915  0076  00B4               	movwf	??_main
  1916  0077  0834               	movf	??_main,w
  1917  0078  07C7               	addwf	main@cnt,f
  1918                           
  1919                           ;main.c: 35: if (c == '\n') {
  1920  0079  300A               	movlw	10
  1921  007A  0645               	xorwf	main@c,w
  1922  007B  1D03               	btfss	3,2
  1923  007C  28D3               	goto	l2020
  1924                           
  1925                           ;main.c: 36: buf[cnt] = '\0';
  1926  007D  0847               	movf	main@cnt,w
  1927  007E  3E3D               	addlw	(low (main@buf| 0))& (0+255)
  1928  007F  0086               	movwf	6
  1929  0080  0187               	clrf	7
  1930  0081  0181               	clrf	1
  1931                           
  1932                           ;main.c: 37: cnt = 0;
  1933  0082  01C7               	clrf	main@cnt
  1934                           
  1935                           ;main.c: 38: t_max = atoi(buf);
  1936  0083  303D               	movlw	(low (main@buf| 0))& (0+255)
  1937  0084  3181  21FC  3180   	fcall	_atoi
  1938  0087  0878               	movf	?_atoi,w
  1939  0088  0020               	movlb	0	; select bank0
  1940  0089  00B4               	movwf	??_main
  1941  008A  0834               	movf	??_main,w
  1942  008B  00C8               	movwf	main@t_max
  1943                           
  1944                           ;main.c: 39: if (strncmp("t:", buf, 2) == 0) {
  1945  008C  3086               	movlw	low (STR_1| (0+32768))
  1946  008D  00F2               	movwf	strncmp@s1
  1947  008E  3084               	movlw	high (STR_1| (0+32768))
  1948  008F  00F3               	movwf	strncmp@s1+1
  1949  0090  303D               	movlw	(low (main@buf| 0))& (0+255)
  1950  0091  00B4               	movwf	??_main
  1951  0092  0834               	movf	??_main,w
  1952  0093  00F4               	movwf	strncmp@s2
  1953  0094  3002               	movlw	2
  1954  0095  00F5               	movwf	strncmp@len
  1955  0096  3000               	movlw	0
  1956  0097  00F6               	movwf	strncmp@len+1
  1957  0098  3182  2267  3180   	fcall	_strncmp
  1958  009B  0872               	movf	?_strncmp,w
  1959  009C  0473               	iorwf	?_strncmp+1,w
  1960  009D  1D03               	btfss	3,2
  1961  009E  28AE               	goto	l2014
  1962                           
  1963                           ;main.c: 40: t_max = atoi(&buf[2]);
  1964  009F  303F               	movlw	(low ((main@buf| 0+2)))& (0+255)
  1965  00A0  3181  21FC  3180   	fcall	_atoi
  1966  00A3  0878               	movf	?_atoi,w
  1967  00A4  0020               	movlb	0	; select bank0
  1968  00A5  00B4               	movwf	??_main
  1969  00A6  0834               	movf	??_main,w
  1970  00A7  00C8               	movwf	main@t_max
  1971                           
  1972                           ;main.c: 41: DATAEE_WriteByte(0, t_max);
  1973  00A8  0848               	movf	main@t_max,w
  1974  00A9  00B4               	movwf	??_main
  1975  00AA  0834               	movf	??_main,w
  1976  00AB  00F2               	movwf	DATAEE_WriteByte@bData
  1977  00AC  3000               	movlw	0
  1978  00AD  28D0               	goto	L1
  1979  00AE                     l2014:	
  1980                           ;main.c: 42: } else if (strncmp("f:", buf, 2) == 0) {
  1981                           
  1982  00AE  3083               	movlw	low (STR_2| (0+32768))
  1983  00AF  00F2               	movwf	strncmp@s1
  1984  00B0  3084               	movlw	high (STR_2| (0+32768))
  1985  00B1  00F3               	movwf	strncmp@s1+1
  1986  00B2  303D               	movlw	(low (main@buf| 0))& (0+255)
  1987  00B3  0020               	movlb	0	; select bank0
  1988  00B4  00B4               	movwf	??_main
  1989  00B5  0834               	movf	??_main,w
  1990  00B6  00F4               	movwf	strncmp@s2
  1991  00B7  3002               	movlw	2
  1992  00B8  00F5               	movwf	strncmp@len
  1993  00B9  3000               	movlw	0
  1994  00BA  00F6               	movwf	strncmp@len+1
  1995  00BB  3182  2267  3180   	fcall	_strncmp
  1996  00BE  0872               	movf	?_strncmp,w
  1997  00BF  0473               	iorwf	?_strncmp+1,w
  1998  00C0  1D03               	btfss	3,2
  1999  00C1  28D3               	goto	l2020
  2000                           
  2001                           ;main.c: 43: channels = atoi(&buf[2]);
  2002  00C2  303F               	movlw	(low ((main@buf| 0+2)))& (0+255)
  2003  00C3  3181  21FC  3180   	fcall	_atoi
  2004  00C6  0878               	movf	?_atoi,w
  2005  00C7  0020               	movlb	0	; select bank0
  2006  00C8  00B4               	movwf	??_main
  2007  00C9  0834               	movf	??_main,w
  2008  00CA  00C6               	movwf	main@channels
  2009                           
  2010                           ;main.c: 44: DATAEE_WriteByte(1, channels);
  2011  00CB  0846               	movf	main@channels,w
  2012  00CC  00B4               	movwf	??_main
  2013  00CD  0834               	movf	??_main,w
  2014  00CE  00F2               	movwf	DATAEE_WriteByte@bData
  2015  00CF  3001               	movlw	1
  2016  00D0                     L1:	
  2017  00D0  3183  2349  3180   	fcall	_DATAEE_WriteByte
  2018  00D3                     l2020:	
  2019                           
  2020                           ;main.c: 45: }
  2021                           ;main.c: 46: }
  2022                           ;main.c: 47: if (TMR0_HasOverflowOccured()) {
  2023  00D3  3184  247B  3180   	fcall	_TMR0_HasOverflowOccured
  2024  00D6  3A00               	xorlw	0
  2025  00D7  1903               	skipnz
  2026  00D8  2866               	goto	l1994
  2027                           
  2028                           ;main.c: 48: TMR0IF = 0;
  2029  00D9  110B               	bcf	11,2	;volatile
  2030                           
  2031                           ;main.c: 49: if (++tmr >= t_max) {
  2032  00DA  3001               	movlw	1
  2033  00DB  0020               	movlb	0	; select bank0
  2034  00DC  00B4               	movwf	??_main
  2035  00DD  0834               	movf	??_main,w
  2036  00DE  07DB               	addwf	_tmr,f
  2037  00DF  0848               	movf	main@t_max,w
  2038  00E0  025B               	subwf	_tmr,w
  2039  00E1  1C03               	skipc
  2040  00E2  2866               	goto	l1994
  2041                           
  2042                           ;main.c: 50: tmr = 0;
  2043  00E3  01DB               	clrf	_tmr
  2044                           
  2045                           ;main.c: 51: mask = 0b00000001;
  2046  00E4  01C9               	clrf	main@mask
  2047  00E5  0AC9               	incf	main@mask,f
  2048                           
  2049                           ;main.c: 52: for (i=0; i<4; i++) {
  2050  00E6  01CA               	clrf	main@i
  2051  00E7  3004               	movlw	4
  2052  00E8  024A               	subwf	main@i,w
  2053  00E9  1803               	btfsc	3,0
  2054  00EA  291B               	goto	l2050
  2055  00EB                     l2034:	
  2056                           
  2057                           ;main.c: 53: if (mask & channels) {
  2058  00EB  0849               	movf	main@mask,w
  2059  00EC  0546               	andwf	main@channels,w
  2060  00ED  1903               	btfsc	3,2
  2061  00EE  290F               	goto	l2044
  2062                           
  2063                           ;main.c: 54: ADC_SelectChannel(ANALOG_IN[i]);
  2064  00EF  084A               	movf	main@i,w
  2065  00F0  3E6F               	addlw	low (_ANALOG_IN| (0+32768))
  2066  00F1  0084               	movwf	4
  2067  00F2  3084               	movlw	high (_ANALOG_IN| (0+32768))
  2068  00F3  1803               	skipnc
  2069  00F4  3E01               	addlw	1
  2070  00F5  0085               	movwf	5
  2071  00F6  0800               	movf	0,w	;code access
  2072  00F7  3184  2419  3180   	fcall	_ADC_SelectChannel
  2073                           
  2074                           ;main.c: 55: ADC_StartConversion();
  2075  00FA  3184  2489  3180   	fcall	_ADC_StartConversion
  2076  00FD                     l2040:	
  2077                           ;main.c: 56: while(!ADC_IsConversionDone());
  2078                           
  2079  00FD  3184  244C  3180   	fcall	_ADC_IsConversionDone
  2080  0100  3A00               	xorlw	0
  2081  0101  1903               	skipnz
  2082  0102  28FD               	goto	l2040
  2083                           
  2084                           ;main.c: 57: level[i] = ADC_GetConversionResult();
  2085  0103  3184  245F  3180   	fcall	_ADC_GetConversionResult
  2086  0106  0020               	movlb	0	; select bank0
  2087  0107  354A               	lslf	main@i,w
  2088  0108  3E35               	addlw	(low (main@level| 0))& (0+255)
  2089  0109  0086               	movwf	6
  2090  010A  0187               	clrf	7
  2091  010B  0872               	movf	?_ADC_GetConversionResult,w
  2092  010C  3FC0               	movwi [0]fsr1
  2093  010D  0873               	movf	?_ADC_GetConversionResult+1,w
  2094  010E  3FC1               	movwi [1]fsr1
  2095  010F                     l2044:	
  2096                           
  2097                           ;main.c: 58: }
  2098                           ;main.c: 59: mask = mask << 1;
  2099  010F  3549               	lslf	main@mask,w
  2100  0110  00B4               	movwf	??_main
  2101  0111  0834               	movf	??_main,w
  2102  0112  00C9               	movwf	main@mask
  2103  0113  3001               	movlw	1
  2104  0114  00B4               	movwf	??_main
  2105  0115  0834               	movf	??_main,w
  2106  0116  07CA               	addwf	main@i,f
  2107  0117  3004               	movlw	4
  2108  0118  024A               	subwf	main@i,w
  2109  0119  1C03               	skipc
  2110  011A  28EB               	goto	l2034
  2111  011B                     l2050:	
  2112                           
  2113                           ;main.c: 60: }
  2114                           ;main.c: 61: for (i=0; i<3; i++) {
  2115  011B  01CA               	clrf	main@i
  2116  011C  3003               	movlw	3
  2117  011D  024A               	subwf	main@i,w
  2118  011E  1803               	btfsc	3,0
  2119  011F  2938               	goto	l2062
  2120  0120                     l2056:	
  2121                           
  2122                           ;main.c: 62: printf("%d,", level[i]);
  2123  0120  3077               	movlw	low (STR_3| (0+32768))
  2124  0121  00A6               	movwf	printf@f
  2125  0122  3084               	movlw	high (STR_3| (0+32768))
  2126  0123  00A7               	movwf	printf@f+1
  2127  0124  354A               	lslf	main@i,w
  2128  0125  3E35               	addlw	(low (main@level| 0))& (0+255)
  2129  0126  0086               	movwf	6
  2130  0127  0187               	clrf	7
  2131  0128  3F40               	moviw [0]fsr1
  2132  0129  00A8               	movwf	?_printf+2
  2133  012A  3F41               	moviw [1]fsr1
  2134  012B  00A9               	movwf	?_printf+3
  2135  012C  3181  2144  3180   	fcall	_printf
  2136  012F  3001               	movlw	1
  2137  0130  0020               	movlb	0	; select bank0
  2138  0131  00B4               	movwf	??_main
  2139  0132  0834               	movf	??_main,w
  2140  0133  07CA               	addwf	main@i,f
  2141  0134  3003               	movlw	3
  2142  0135  024A               	subwf	main@i,w
  2143  0136  1C03               	skipc
  2144  0137  2920               	goto	l2056
  2145  0138                     l2062:	
  2146                           
  2147                           ;main.c: 63: }
  2148                           ;main.c: 64: printf("%d\n", level[3]);
  2149  0138  3073               	movlw	low (STR_4| (0+32768))
  2150  0139  00A6               	movwf	printf@f
  2151  013A  3084               	movlw	high (STR_4| (0+32768))
  2152  013B  00A7               	movwf	printf@f+1
  2153  013C  083C               	movf	main@level+7,w
  2154  013D  00A9               	movwf	?_printf+3
  2155  013E  083B               	movf	main@level+6,w
  2156  013F  00A8               	movwf	?_printf+2
  2157  0140  3181  2144  3180   	fcall	_printf
  2158  0143  2866               	goto	l1994
  2159  0144                     __end_of_main:	
  2160                           
  2161                           	psect	text1
  2162  0267                     __ptext1:	
  2163 ;; *************** function _strncmp *****************
  2164 ;; Defined at:
  2165 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strncmp.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  s1              2    2[COMMON] PTR const unsigned char 
  2168 ;;		 -> STR_2(3), STR_1(3), 
  2169 ;;  s2              1    4[COMMON] PTR const unsigned char 
  2170 ;;		 -> main@buf(8), 
  2171 ;;  len             2    5[COMMON] unsigned int 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  2    2[COMMON] int 
  2176 ;; Registers used:
  2177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2183 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2185 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2186 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2187 ;;Total ram usage:        7 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    2
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           
  2198                           ;psect for function _strncmp
  2199  0267                     _strncmp:	
  2200  0267                     l1714:	
  2201                           ;incstack = 0
  2202                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  2203                           
  2204  0267  3001               	movlw	1
  2205  0268  02F5               	subwf	strncmp@len,f
  2206  0269  3000               	movlw	0
  2207  026A  3BF6               	subwfb	strncmp@len+1,f
  2208  026B  0A75               	incf	strncmp@len,w
  2209  026C  1903               	btfsc	3,2
  2210  026D  0A76               	incf	strncmp@len+1,w
  2211  026E  1903               	btfsc	3,2
  2212  026F  2AA2               	goto	l1716
  2213  0270  0872               	movf	strncmp@s1,w
  2214  0271  0084               	movwf	4
  2215  0272  0873               	movf	strncmp@s1+1,w
  2216  0273  0085               	movwf	5
  2217  0274  0012               	moviw fsr0++
  2218  0275  1903               	btfsc	3,2
  2219  0276  2A82               	goto	l1706
  2220  0277  0874               	movf	strncmp@s2,w
  2221  0278  0086               	movwf	6
  2222  0279  0187               	clrf	7
  2223  027A  0872               	movf	strncmp@s1,w
  2224  027B  0084               	movwf	4
  2225  027C  0873               	movf	strncmp@s1+1,w
  2226  027D  0085               	movwf	5
  2227  027E  0800               	movf	0,w	;code access
  2228  027F  0601               	xorwf	1,w
  2229  0280  1903               	skipnz
  2230  0281  2A99               	goto	l1710
  2231  0282                     l1706:	
  2232  0282  0874               	movf	strncmp@s2,w
  2233  0283  0086               	movwf	6
  2234  0284  0187               	clrf	7
  2235  0285  0801               	movf	1,w
  2236  0286  00F7               	movwf	??_strncmp
  2237  0287  01F8               	clrf	??_strncmp+1
  2238  0288  09F7               	comf	??_strncmp,f
  2239  0289  09F8               	comf	??_strncmp+1,f
  2240  028A  0AF7               	incf	??_strncmp,f
  2241  028B  1903               	skipnz
  2242  028C  0AF8               	incf	??_strncmp+1,f
  2243  028D  0872               	movf	strncmp@s1,w
  2244  028E  0084               	movwf	4
  2245  028F  0873               	movf	strncmp@s1+1,w
  2246  0290  0085               	movwf	5
  2247  0291  0800               	movf	0,w	;code access
  2248  0292  0777               	addwf	??_strncmp,w
  2249  0293  00F2               	movwf	?_strncmp
  2250  0294  0878               	movf	??_strncmp+1,w
  2251  0295  1803               	skipnc
  2252  0296  0A78               	incf	??_strncmp+1,w
  2253  0297  00F3               	movwf	?_strncmp+1
  2254  0298  0008               	return
  2255  0299                     l1710:	
  2256  0299  3001               	movlw	1
  2257  029A  07F2               	addwf	strncmp@s1,f
  2258  029B  3000               	movlw	0
  2259  029C  3DF3               	addwfc	strncmp@s1+1,f
  2260  029D  3001               	movlw	1
  2261  029E  00F7               	movwf	??_strncmp
  2262  029F  0877               	movf	??_strncmp,w
  2263  02A0  07F4               	addwf	strncmp@s2,f
  2264  02A1  2A67               	goto	l1714
  2265  02A2                     l1716:	
  2266  02A2  01F2               	clrf	?_strncmp
  2267  02A3  01F3               	clrf	?_strncmp+1
  2268  02A4  0008               	return
  2269  02A5                     __end_of_strncmp:	
  2270                           
  2271                           	psect	text2
  2272  0144                     __ptext2:	
  2273 ;; *************** function _printf *****************
  2274 ;; Defined at:
  2275 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  2278 ;;		 -> STR_4(4), STR_3(4), 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  tmpval          4    0        struct .
  2281 ;;  val             2   17[BANK0 ] unsigned int 
  2282 ;;  cp              2    0        PTR const unsigned char 
  2283 ;;  len             2    0        unsigned int 
  2284 ;;  c               1   19[BANK0 ] char 
  2285 ;;  prec            1   16[BANK0 ] char 
  2286 ;;  flag            1   15[BANK0 ] unsigned char 
  2287 ;;  ap              1   14[BANK0 ] PTR void [1]
  2288 ;;		 -> ?_printf(2), 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  2    6[BANK0 ] int 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2298 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2299 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2300 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2301 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2302 ;;Total ram usage:       14 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    4
  2305 ;; This function calls:
  2306 ;;		___lwdiv
  2307 ;;		___lwmod
  2308 ;;		_putch
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _printf
  2316  0144                     _printf:	
  2317                           
  2318                           ;doprnt.c: 466: va_list ap;
  2319                           ;doprnt.c: 499: signed char c;
  2320                           ;doprnt.c: 506: signed char prec;
  2321                           ;doprnt.c: 508: unsigned char flag;
  2322                           ;doprnt.c: 523: union {
  2323                           ;doprnt.c: 524: unsigned long vd;
  2324                           ;doprnt.c: 525: double integ;
  2325                           ;doprnt.c: 526: } tmpval;
  2326                           ;doprnt.c: 528: unsigned int val;
  2327                           ;doprnt.c: 529: unsigned len;
  2328                           ;doprnt.c: 530: const char * cp;
  2329                           ;doprnt.c: 533: *ap = __va_start();
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2333  0144  3028               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2334  0145  0020               	movlb	0	; select bank0
  2335  0146  00AA               	movwf	??_printf
  2336  0147  082A               	movf	??_printf,w
  2337  0148  00AE               	movwf	printf@ap
  2338  0149                     l1976:	
  2339                           ;doprnt.c: 536: while(c = *f++) {
  2340                           
  2341  0149  0020               	movlb	0	; select bank0
  2342  014A  0827               	movf	printf@f+1,w
  2343  014B  00AB               	movwf	??_printf+1
  2344  014C  0826               	movf	printf@f,w
  2345  014D  00AA               	movwf	??_printf
  2346  014E  0AA6               	incf	printf@f,f
  2347  014F  1903               	skipnz
  2348  0150  0AA7               	incf	printf@f+1,f
  2349  0151  082A               	movf	??_printf,w
  2350  0152  0084               	movwf	4
  2351  0153  082B               	movf	??_printf+1,w
  2352  0154  0085               	movwf	5
  2353  0155  0800               	movf	0,w	;code access
  2354  0156  00AC               	movwf	??_printf+2
  2355  0157  082C               	movf	??_printf+2,w
  2356  0158  00B3               	movwf	printf@c
  2357  0159  0833               	movf	printf@c,w
  2358  015A  1903               	btfsc	3,2
  2359  015B  0008               	return
  2360                           
  2361                           ;doprnt.c: 538: if(c != '%')
  2362  015C  3025               	movlw	37
  2363  015D  0633               	xorwf	printf@c,w
  2364  015E  1903               	btfsc	3,2
  2365  015F  2965               	goto	l1936
  2366                           
  2367                           ;doprnt.c: 540: {
  2368                           ;doprnt.c: 541: (putch(c) );
  2369  0160  0833               	movf	printf@c,w
  2370  0161  3184  2465  3181   	fcall	_putch
  2371                           
  2372                           ;doprnt.c: 542: continue;
  2373  0164  2949               	goto	l1976
  2374  0165                     l1936:	
  2375                           
  2376                           ;doprnt.c: 543: }
  2377                           ;doprnt.c: 548: flag = 0;
  2378  0165  0020               	movlb	0	; select bank0
  2379  0166  01AF               	clrf	printf@flag
  2380                           
  2381                           ;doprnt.c: 822: }
  2382                           
  2383                           ;doprnt.c: 813: continue;
  2384                           
  2385                           ;doprnt.c: 802: default:
  2386                           
  2387                           ;doprnt.c: 698: case 'i':
  2388                           ;doprnt.c: 699: break;
  2389                           
  2390                           ;doprnt.c: 697: case 'd':
  2391                           
  2392                           ;doprnt.c: 638: goto alldone;
  2393                           
  2394                           ;doprnt.c: 637: case 0:
  2395                           
  2396                           ;doprnt.c: 635: switch(c = *f++) {
  2397  0167  0827               	movf	printf@f+1,w
  2398  0168  00AB               	movwf	??_printf+1
  2399  0169  0826               	movf	printf@f,w
  2400  016A  00AA               	movwf	??_printf
  2401  016B  0AA6               	incf	printf@f,f
  2402  016C  1903               	skipnz
  2403  016D  0AA7               	incf	printf@f+1,f
  2404  016E  082A               	movf	??_printf,w
  2405  016F  0084               	movwf	4
  2406  0170  082B               	movf	??_printf+1,w
  2407  0171  0085               	movwf	5
  2408  0172  0800               	movf	0,w	;code access
  2409  0173  00B3               	movwf	printf@c
  2410                           
  2411                           ; Switch size 1, requested type "space"
  2412                           ; Number of cases is 3, Range of values is 0 to 105
  2413                           ; switch strategies available:
  2414                           ; Name         Instructions Cycles
  2415                           ; simple_byte           10     6 (average)
  2416                           ; direct_byte          218     6 (fixed)
  2417                           ; jumptable            260     6 (fixed)
  2418                           ;	Chosen strategy is simple_byte
  2419  0174  3A00               	xorlw	0	; case 0
  2420  0175  1903               	skipnz
  2421  0176  29FB               	goto	l333
  2422  0177  3A64               	xorlw	100	; case 100
  2423  0178  1903               	skipnz
  2424  0179  297E               	goto	l1942
  2425  017A  3A0D               	xorlw	13	; case 105
  2426  017B  1903               	skipnz
  2427  017C  297E               	goto	l1942
  2428  017D  2949               	goto	l1976
  2429  017E                     l1942:	
  2430                           
  2431                           ;doprnt.c: 1253: {
  2432                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2433  017E  082E               	movf	printf@ap,w
  2434  017F  0086               	movwf	6
  2435  0180  0187               	clrf	7
  2436  0181  3F40               	moviw [0]fsr1
  2437  0182  00B1               	movwf	printf@val
  2438  0183  3F41               	moviw [1]fsr1
  2439  0184  00B2               	movwf	printf@val+1
  2440  0185  3002               	movlw	2
  2441  0186  00AA               	movwf	??_printf
  2442  0187  082A               	movf	??_printf,w
  2443  0188  07AE               	addwf	printf@ap,f
  2444                           
  2445                           ;doprnt.c: 1261: if((int)val < 0) {
  2446  0189  1FB2               	btfss	printf@val+1,7
  2447  018A  2994               	goto	l1952
  2448                           
  2449                           ;doprnt.c: 1262: flag |= 0x03;
  2450  018B  3003               	movlw	3
  2451  018C  00AA               	movwf	??_printf
  2452  018D  082A               	movf	??_printf,w
  2453  018E  04AF               	iorwf	printf@flag,f
  2454                           
  2455                           ;doprnt.c: 1263: val = -val;
  2456  018F  09B1               	comf	printf@val,f
  2457  0190  09B2               	comf	printf@val+1,f
  2458  0191  0AB1               	incf	printf@val,f
  2459  0192  1903               	skipnz
  2460  0193  0AB2               	incf	printf@val+1,f
  2461  0194                     l1952:	
  2462                           
  2463                           ;doprnt.c: 1264: }
  2464                           ;doprnt.c: 1266: }
  2465                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2466  0194  01B3               	clrf	printf@c
  2467  0195  0AB3               	incf	printf@c,f
  2468  0196  3005               	movlw	5
  2469  0197  0633               	xorwf	printf@c,w
  2470  0198  1903               	btfsc	3,2
  2471  0199  29B9               	goto	l1964
  2472  019A                     l1958:	
  2473                           
  2474                           ;doprnt.c: 1306: if(val < dpowers[c])
  2475  019A  0833               	movf	printf@c,w
  2476  019B  00AA               	movwf	??_printf
  2477  019C  01AB               	clrf	??_printf+1
  2478  019D  35AA               	lslf	??_printf,f
  2479  019E  0DAB               	rlf	??_printf+1,f
  2480  019F  3032               	movlw	low (_dpowers| (0+32768))
  2481  01A0  072A               	addwf	??_printf,w
  2482  01A1  0084               	movwf	4
  2483  01A2  3084               	movlw	high (_dpowers| (0+32768))
  2484  01A3  3D2B               	addwfc	??_printf+1,w
  2485  01A4  0085               	movwf	5
  2486  01A5  3F00               	moviw [0]fsr0
  2487  01A6  00AC               	movwf	??_printf+2
  2488  01A7  3F01               	moviw [1]fsr0
  2489  01A8  00AD               	movwf	??_printf+3
  2490  01A9  082D               	movf	??_printf+3,w
  2491  01AA  0232               	subwf	printf@val+1,w
  2492  01AB  1D03               	skipz
  2493  01AC  29AF               	goto	u1515
  2494  01AD  082C               	movf	??_printf+2,w
  2495  01AE  0231               	subwf	printf@val,w
  2496  01AF                     u1515:	
  2497  01AF  1C03               	btfss	3,0
  2498  01B0  29B9               	goto	l1964
  2499                           
  2500                           ;doprnt.c: 1307: break;
  2501  01B1  3001               	movlw	1
  2502  01B2  00AA               	movwf	??_printf
  2503  01B3  082A               	movf	??_printf,w
  2504  01B4  07B3               	addwf	printf@c,f
  2505  01B5  3005               	movlw	5
  2506  01B6  0633               	xorwf	printf@c,w
  2507  01B7  1D03               	btfss	3,2
  2508  01B8  299A               	goto	l1958
  2509  01B9                     l1964:	
  2510                           
  2511                           ;doprnt.c: 1422: {
  2512                           ;doprnt.c: 1438: if(flag & 0x03)
  2513  01B9  082F               	movf	printf@flag,w
  2514  01BA  3903               	andlw	3
  2515  01BB  1903               	btfsc	3,2
  2516  01BC  29C1               	goto	l1968
  2517                           
  2518                           ;doprnt.c: 1439: (putch('-') );
  2519  01BD  302D               	movlw	45
  2520  01BE  3184  2465  3181   	fcall	_putch
  2521  01C1                     l1968:	
  2522                           
  2523                           ;doprnt.c: 1469: }
  2524                           ;doprnt.c: 1472: prec = c;
  2525  01C1  0020               	movlb	0	; select bank0
  2526  01C2  0833               	movf	printf@c,w
  2527  01C3  00AA               	movwf	??_printf
  2528  01C4  082A               	movf	??_printf,w
  2529  01C5  00B0               	movwf	printf@prec
  2530  01C6                     l1974:	
  2531                           ;doprnt.c: 1474: while(prec--) {
  2532                           
  2533  01C6  30FF               	movlw	255
  2534  01C7  0020               	movlb	0	; select bank0
  2535  01C8  00AA               	movwf	??_printf
  2536  01C9  082A               	movf	??_printf,w
  2537  01CA  07B0               	addwf	printf@prec,f
  2538  01CB  0A30               	incf	printf@prec,w
  2539  01CC  1903               	btfsc	3,2
  2540  01CD  2949               	goto	l1976
  2541                           
  2542                           ;doprnt.c: 1478: {
  2543                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2544  01CE  300A               	movlw	10
  2545  01CF  00A0               	movwf	___lwmod@divisor
  2546  01D0  3000               	movlw	0
  2547  01D1  00A1               	movwf	___lwmod@divisor+1
  2548  01D2  0830               	movf	printf@prec,w
  2549  01D3  00AA               	movwf	??_printf
  2550  01D4  01AB               	clrf	??_printf+1
  2551  01D5  35AA               	lslf	??_printf,f
  2552  01D6  0DAB               	rlf	??_printf+1,f
  2553  01D7  3032               	movlw	low (_dpowers| (0+32768))
  2554  01D8  072A               	addwf	??_printf,w
  2555  01D9  0084               	movwf	4
  2556  01DA  3084               	movlw	high (_dpowers| (0+32768))
  2557  01DB  3D2B               	addwfc	??_printf+1,w
  2558  01DC  0085               	movwf	5
  2559  01DD  3F00               	moviw [0]fsr0
  2560  01DE  00F2               	movwf	___lwdiv@divisor
  2561  01DF  3F01               	moviw [1]fsr0
  2562  01E0  00F3               	movwf	___lwdiv@divisor+1
  2563  01E1  0832               	movf	printf@val+1,w
  2564  01E2  00F5               	movwf	___lwdiv@dividend+1
  2565  01E3  0831               	movf	printf@val,w
  2566  01E4  00F4               	movwf	___lwdiv@dividend
  2567  01E5  3182  22A5  3181   	fcall	___lwdiv
  2568  01E8  0873               	movf	?___lwdiv+1,w
  2569  01E9  0020               	movlb	0	; select bank0
  2570  01EA  00A3               	movwf	___lwmod@dividend+1
  2571  01EB  0872               	movf	?___lwdiv,w
  2572  01EC  00A2               	movwf	___lwmod@dividend
  2573  01ED  3182  22D9  3181   	fcall	___lwmod
  2574  01F0  0020               	movlb	0	; select bank0
  2575  01F1  0820               	movf	?___lwmod,w
  2576  01F2  3E30               	addlw	48
  2577  01F3  00AC               	movwf	??_printf+2
  2578  01F4  082C               	movf	??_printf+2,w
  2579  01F5  00B3               	movwf	printf@c
  2580                           
  2581                           ;doprnt.c: 1523: }
  2582                           ;doprnt.c: 1524: (putch(c) );
  2583  01F6  0833               	movf	printf@c,w
  2584  01F7  3184  2465  3181   	fcall	_putch
  2585  01FA  29C6               	goto	l1974
  2586  01FB                     l333:	
  2587                           ;doprnt.c: 1540: return 0;
  2588                           ;	Return value of _printf is never used
  2589                           
  2590                           ;doprnt.c: 1525: }
  2591                           ;doprnt.c: 1533: }
  2592                           ;doprnt.c: 1535: alldone:
  2593                           
  2594  01FB  0008               	return
  2595  01FC                     __end_of_printf:	
  2596                           
  2597                           	psect	text3
  2598  0465                     __ptext3:	
  2599 ;; *************** function _putch *****************
  2600 ;; Defined at:
  2601 ;;		line 161 in file "mcc_generated_files/eusart.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  txData          1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  txData          1    4[COMMON] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2619 ;;Total ram usage:        1 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    3
  2622 ;; This function calls:
  2623 ;;		_EUSART_Write
  2624 ;; This function is called by:
  2625 ;;		_printf
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function _putch
  2631  0465                     _putch:	
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2635                           ;putch@txData stored from wreg
  2636  0465  00F4               	movwf	putch@txData
  2637                           
  2638                           ;eusart.c: 163: EUSART_Write(txData);
  2639  0466  0874               	movf	putch@txData,w
  2640  0467  3183  2306         	fcall	_EUSART_Write
  2641  0469  0008               	return
  2642  046A                     __end_of_putch:	
  2643                           
  2644                           	psect	text4
  2645  0306                     __ptext4:	
  2646 ;; *************** function _EUSART_Write *****************
  2647 ;; Defined at:
  2648 ;;		line 133 in file "mcc_generated_files/eusart.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  txData          1    wreg     unsigned char 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  txData          1    3[COMMON] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2665 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2666 ;;Total ram usage:        2 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    2
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_putch
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           
  2677                           ;psect for function _EUSART_Write
  2678  0306                     _EUSART_Write:	
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2682                           ;EUSART_Write@txData stored from wreg
  2683  0306  00F3               	movwf	EUSART_Write@txData
  2684  0307                     l1420:	
  2685                           ;eusart.c: 136: {
  2686                           
  2687                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  2688                           
  2689  0307  0020               	movlb	0	; select bank0
  2690  0308  0868               	movf	_eusartTxBufferRemaining,w	;volatile
  2691  0309  1903               	btfsc	3,2
  2692  030A  2B07               	goto	l1420
  2693                           
  2694                           ;eusart.c: 137: }
  2695                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  2696  030B  0021               	movlb	1	; select bank1
  2697  030C  1A11               	btfsc	17,4	;volatile
  2698  030D  2B12               	goto	l124
  2699                           
  2700                           ;eusart.c: 140: {
  2701                           ;eusart.c: 141: TXREG = txData;
  2702  030E  0873               	movf	EUSART_Write@txData,w
  2703  030F  0023               	movlb	3	; select bank3
  2704  0310  009A               	movwf	26	;volatile
  2705                           
  2706                           ;eusart.c: 142: }
  2707  0311  2B26               	goto	l1434
  2708  0312                     l124:	
  2709                           
  2710                           ;eusart.c: 143: else
  2711                           ;eusart.c: 144: {
  2712                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  2713  0312  1211               	bcf	17,4	;volatile
  2714                           
  2715                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  2716  0313  0873               	movf	EUSART_Write@txData,w
  2717  0314  00F2               	movwf	??_EUSART_Write
  2718  0315  087B               	movf	_eusartTxHead,w
  2719  0316  3E53               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  2720  0317  0086               	movwf	6
  2721  0318  0187               	clrf	7
  2722  0319  0872               	movf	??_EUSART_Write,w
  2723  031A  0081               	movwf	1
  2724  031B  3001               	movlw	1
  2725  031C  00F2               	movwf	??_EUSART_Write
  2726  031D  0872               	movf	??_EUSART_Write,w
  2727  031E  07FB               	addwf	_eusartTxHead,f	;volatile
  2728                           
  2729                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2730  031F  3008               	movlw	8
  2731  0320  027B               	subwf	_eusartTxHead,w	;volatile
  2732  0321  1803               	btfsc	3,0
  2733                           
  2734                           ;eusart.c: 148: {
  2735                           ;eusart.c: 149: eusartTxHead = 0;
  2736  0322  01FB               	clrf	_eusartTxHead	;volatile
  2737                           
  2738                           ;eusart.c: 150: }
  2739                           ;eusart.c: 151: eusartTxBufferRemaining--;
  2740  0323  3001               	movlw	1
  2741  0324  0020               	movlb	0	; select bank0
  2742  0325  02E8               	subwf	_eusartTxBufferRemaining,f	;volatile
  2743  0326                     l1434:	
  2744                           
  2745                           ;eusart.c: 152: }
  2746                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  2747  0326  0021               	movlb	1	; select bank1
  2748  0327  1611               	bsf	17,4	;volatile
  2749  0328  0008               	return
  2750  0329                     __end_of_EUSART_Write:	
  2751                           
  2752                           	psect	text5
  2753  02D9                     __ptext5:	
  2754 ;; *************** function ___lwmod *****************
  2755 ;; Defined at:
  2756 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  divisor         2    0[BANK0 ] unsigned int 
  2759 ;;  dividend        2    2[BANK0 ] unsigned int 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  counter         1    5[BANK0 ] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  2    0[BANK0 ] unsigned int 
  2764 ;; Registers used:
  2765 ;;		wreg, status,2, status,0
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2774 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2775 ;;Total ram usage:        6 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    2
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_printf
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           
  2786                           ;psect for function ___lwmod
  2787  02D9                     ___lwmod:	
  2788                           
  2789                           ;incstack = 0
  2790                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2791  02D9  0020               	movlb	0	; select bank0
  2792  02DA  0820               	movf	___lwmod@divisor,w
  2793  02DB  0421               	iorwf	___lwmod@divisor+1,w
  2794  02DC  1903               	btfsc	3,2
  2795  02DD  2B01               	goto	l1892
  2796  02DE  01A5               	clrf	___lwmod@counter
  2797  02DF  0AA5               	incf	___lwmod@counter,f
  2798  02E0                     l1882:	
  2799  02E0  1BA1               	btfsc	___lwmod@divisor+1,7
  2800  02E1  2AEC               	goto	l1884
  2801  02E2  3001               	movlw	1
  2802  02E3                     u1375:	
  2803  02E3  35A0               	lslf	___lwmod@divisor,f
  2804  02E4  0DA1               	rlf	___lwmod@divisor+1,f
  2805  02E5  0B89               	decfsz	9,f
  2806  02E6  2AE3               	goto	u1375
  2807  02E7  3001               	movlw	1
  2808  02E8  00A4               	movwf	??___lwmod
  2809  02E9  0824               	movf	??___lwmod,w
  2810  02EA  07A5               	addwf	___lwmod@counter,f
  2811  02EB  2AE0               	goto	l1882
  2812  02EC                     l1884:	
  2813  02EC  0821               	movf	___lwmod@divisor+1,w
  2814  02ED  0223               	subwf	___lwmod@dividend+1,w
  2815  02EE  1D03               	skipz
  2816  02EF  2AF2               	goto	u1395
  2817  02F0  0820               	movf	___lwmod@divisor,w
  2818  02F1  0222               	subwf	___lwmod@dividend,w
  2819  02F2                     u1395:	
  2820  02F2  1C03               	skipc
  2821  02F3  2AF8               	goto	l1888
  2822  02F4  0820               	movf	___lwmod@divisor,w
  2823  02F5  02A2               	subwf	___lwmod@dividend,f
  2824  02F6  0821               	movf	___lwmod@divisor+1,w
  2825  02F7  3BA3               	subwfb	___lwmod@dividend+1,f
  2826  02F8                     l1888:	
  2827  02F8  3001               	movlw	1
  2828  02F9                     u1405:	
  2829  02F9  36A1               	lsrf	___lwmod@divisor+1,f
  2830  02FA  0CA0               	rrf	___lwmod@divisor,f
  2831  02FB  0B89               	decfsz	9,f
  2832  02FC  2AF9               	goto	u1405
  2833  02FD  3001               	movlw	1
  2834  02FE  02A5               	subwf	___lwmod@counter,f
  2835  02FF  1D03               	btfss	3,2
  2836  0300  2AEC               	goto	l1884
  2837  0301                     l1892:	
  2838  0301  0823               	movf	___lwmod@dividend+1,w
  2839  0302  00A1               	movwf	?___lwmod+1
  2840  0303  0822               	movf	___lwmod@dividend,w
  2841  0304  00A0               	movwf	?___lwmod
  2842  0305  0008               	return
  2843  0306                     __end_of___lwmod:	
  2844                           
  2845                           	psect	text6
  2846  02A5                     __ptext6:	
  2847 ;; *************** function ___lwdiv *****************
  2848 ;; Defined at:
  2849 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  divisor         2    2[COMMON] unsigned int 
  2852 ;;  dividend        2    4[COMMON] unsigned int 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  quotient        2    7[COMMON] unsigned int 
  2855 ;;  counter         1    9[COMMON] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  2    2[COMMON] unsigned int 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2, status,0
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2866 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2868 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2869 ;;Total ram usage:        8 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    2
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_printf
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           
  2880                           ;psect for function ___lwdiv
  2881  02A5                     ___lwdiv:	
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2885  02A5  01F7               	clrf	___lwdiv@quotient
  2886  02A6  01F8               	clrf	___lwdiv@quotient+1
  2887  02A7  0872               	movf	___lwdiv@divisor,w
  2888  02A8  0473               	iorwf	___lwdiv@divisor+1,w
  2889  02A9  1903               	btfsc	3,2
  2890  02AA  2AD4               	goto	l1536
  2891  02AB  01F9               	clrf	___lwdiv@counter
  2892  02AC  0AF9               	incf	___lwdiv@counter,f
  2893  02AD                     l1524:	
  2894  02AD  1BF3               	btfsc	___lwdiv@divisor+1,7
  2895  02AE  2AB9               	goto	l1526
  2896  02AF  3001               	movlw	1
  2897  02B0                     u825:	
  2898  02B0  35F2               	lslf	___lwdiv@divisor,f
  2899  02B1  0DF3               	rlf	___lwdiv@divisor+1,f
  2900  02B2  0B89               	decfsz	9,f
  2901  02B3  2AB0               	goto	u825
  2902  02B4  3001               	movlw	1
  2903  02B5  00F6               	movwf	??___lwdiv
  2904  02B6  0876               	movf	??___lwdiv,w
  2905  02B7  07F9               	addwf	___lwdiv@counter,f
  2906  02B8  2AAD               	goto	l1524
  2907  02B9                     l1526:	
  2908  02B9  3001               	movlw	1
  2909  02BA                     u845:	
  2910  02BA  35F7               	lslf	___lwdiv@quotient,f
  2911  02BB  0DF8               	rlf	___lwdiv@quotient+1,f
  2912  02BC  0B89               	decfsz	9,f
  2913  02BD  2ABA               	goto	u845
  2914  02BE  0873               	movf	___lwdiv@divisor+1,w
  2915  02BF  0275               	subwf	___lwdiv@dividend+1,w
  2916  02C0  1D03               	skipz
  2917  02C1  2AC4               	goto	u855
  2918  02C2  0872               	movf	___lwdiv@divisor,w
  2919  02C3  0274               	subwf	___lwdiv@dividend,w
  2920  02C4                     u855:	
  2921  02C4  1C03               	skipc
  2922  02C5  2ACB               	goto	l1532
  2923  02C6  0872               	movf	___lwdiv@divisor,w
  2924  02C7  02F4               	subwf	___lwdiv@dividend,f
  2925  02C8  0873               	movf	___lwdiv@divisor+1,w
  2926  02C9  3BF5               	subwfb	___lwdiv@dividend+1,f
  2927  02CA  1477               	bsf	___lwdiv@quotient,0
  2928  02CB                     l1532:	
  2929  02CB  3001               	movlw	1
  2930  02CC                     u865:	
  2931  02CC  36F3               	lsrf	___lwdiv@divisor+1,f
  2932  02CD  0CF2               	rrf	___lwdiv@divisor,f
  2933  02CE  0B89               	decfsz	9,f
  2934  02CF  2ACC               	goto	u865
  2935  02D0  3001               	movlw	1
  2936  02D1  02F9               	subwf	___lwdiv@counter,f
  2937  02D2  1D03               	btfss	3,2
  2938  02D3  2AB9               	goto	l1526
  2939  02D4                     l1536:	
  2940  02D4  0878               	movf	___lwdiv@quotient+1,w
  2941  02D5  00F3               	movwf	?___lwdiv+1
  2942  02D6  0877               	movf	___lwdiv@quotient,w
  2943  02D7  00F2               	movwf	?___lwdiv
  2944  02D8  0008               	return
  2945  02D9                     __end_of___lwdiv:	
  2946                           
  2947                           	psect	text7
  2948  01FC                     __ptext7:	
  2949 ;; *************** function _atoi *****************
  2950 ;; Defined at:
  2951 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\atoi.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  s               1    wreg     PTR const unsigned char 
  2954 ;;		 -> main@buf(8), 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  s               1    5[BANK0 ] PTR const unsigned char 
  2957 ;;		 -> main@buf(8), 
  2958 ;;  a               2    3[BANK0 ] int 
  2959 ;;  sign            1    2[BANK0 ] unsigned char 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  2    8[COMMON] int 
  2962 ;; Registers used:
  2963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2970 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2972 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2973 ;;Total ram usage:        8 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    3
  2976 ;; This function calls:
  2977 ;;		___wmul
  2978 ;;		_isdigit
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _atoi
  2986  01FC                     _atoi:	
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2990                           ;atoi@s stored from wreg
  2991  01FC  0020               	movlb	0	; select bank0
  2992  01FD  00A5               	movwf	atoi@s
  2993  01FE                     l1900:	
  2994  01FE  0825               	movf	atoi@s,w
  2995  01FF  0086               	movwf	6
  2996  0200  0187               	clrf	7
  2997  0201  3020               	movlw	32
  2998  0202  0601               	xorwf	1,w
  2999  0203  1D03               	btfss	3,2
  3000  0204  2A0A               	goto	l1902
  3001  0205                     l1898:	
  3002  0205  3001               	movlw	1
  3003  0206  00A0               	movwf	??_atoi
  3004  0207  0820               	movf	??_atoi,w
  3005  0208  07A5               	addwf	atoi@s,f
  3006  0209  29FE               	goto	l1900
  3007  020A                     l1902:	
  3008  020A  0825               	movf	atoi@s,w
  3009  020B  0086               	movwf	6
  3010  020C  0187               	clrf	7
  3011  020D  3009               	movlw	9
  3012  020E  0601               	xorwf	1,w
  3013  020F  1903               	btfsc	3,2
  3014  0210  2A05               	goto	l1898
  3015  0211  01A3               	clrf	atoi@a
  3016  0212  01A4               	clrf	atoi@a+1
  3017  0213  01A2               	clrf	atoi@sign
  3018  0214  0825               	movf	atoi@s,w
  3019  0215  0086               	movwf	6
  3020  0216  0187               	clrf	7
  3021  0217  302D               	movlw	45
  3022  0218  0601               	xorwf	1,w
  3023  0219  1D03               	btfss	3,2
  3024  021A  2A20               	goto	l1910
  3025  021B  3001               	movlw	1
  3026  021C  00A0               	movwf	??_atoi
  3027  021D  0820               	movf	??_atoi,w
  3028  021E  07A2               	addwf	atoi@sign,f
  3029  021F  2A27               	goto	l1916
  3030  0220                     l1910:	
  3031  0220  0825               	movf	atoi@s,w
  3032  0221  0086               	movwf	6
  3033  0222  0187               	clrf	7
  3034  0223  302B               	movlw	43
  3035  0224  0601               	xorwf	1,w
  3036  0225  1D03               	btfss	3,2
  3037  0226  2A2B               	goto	l1918
  3038  0227                     l1916:	
  3039  0227  3001               	movlw	1
  3040  0228  00A0               	movwf	??_atoi
  3041  0229  0820               	movf	??_atoi,w
  3042  022A  07A5               	addwf	atoi@s,f
  3043  022B                     l1918:	
  3044  022B  0825               	movf	atoi@s,w
  3045  022C  0086               	movwf	6
  3046  022D  0187               	clrf	7
  3047  022E  0801               	movf	1,w
  3048  022F  3183  23FD  3181   	fcall	_isdigit
  3049  0232  1C03               	btfss	3,0
  3050  0233  2A52               	goto	l1920
  3051  0234  0020               	movlb	0	; select bank0
  3052  0235  0824               	movf	atoi@a+1,w
  3053  0236  00F3               	movwf	___wmul@multiplier+1
  3054  0237  0823               	movf	atoi@a,w
  3055  0238  00F2               	movwf	___wmul@multiplier
  3056  0239  300A               	movlw	10
  3057  023A  00F4               	movwf	___wmul@multiplicand
  3058  023B  3000               	movlw	0
  3059  023C  00F5               	movwf	___wmul@multiplicand+1
  3060  023D  3183  2383  3181   	fcall	___wmul
  3061  0240  0020               	movlb	0	; select bank0
  3062  0241  0825               	movf	atoi@s,w
  3063  0242  0086               	movwf	6
  3064  0243  0187               	clrf	7
  3065  0244  0801               	movf	1,w
  3066  0245  0772               	addwf	?___wmul,w
  3067  0246  00A0               	movwf	??_atoi
  3068  0247  0873               	movf	?___wmul+1,w
  3069  0248  1803               	skipnc
  3070  0249  0A73               	incf	?___wmul+1,w
  3071  024A  00A1               	movwf	??_atoi+1
  3072  024B  0820               	movf	??_atoi,w
  3073  024C  3ED0               	addlw	208
  3074  024D  00A3               	movwf	atoi@a
  3075  024E  30FF               	movlw	255
  3076  024F  3D21               	addwfc	??_atoi+1,w
  3077  0250  00A4               	movwf	atoi@a+1
  3078  0251  2A27               	goto	l1916
  3079  0252                     l1920:	
  3080  0252  0020               	movlb	0	; select bank0
  3081  0253  0822               	movf	atoi@sign,w
  3082  0254  1903               	btfsc	3,2
  3083  0255  2A62               	goto	l1926
  3084  0256  0923               	comf	atoi@a,w
  3085  0257  00A0               	movwf	??_atoi
  3086  0258  0924               	comf	atoi@a+1,w
  3087  0259  00A1               	movwf	??_atoi+1
  3088  025A  0AA0               	incf	??_atoi,f
  3089  025B  1903               	skipnz
  3090  025C  0AA1               	incf	??_atoi+1,f
  3091  025D  0820               	movf	??_atoi,w
  3092  025E  00F8               	movwf	?_atoi
  3093  025F  0821               	movf	??_atoi+1,w
  3094  0260  00F9               	movwf	?_atoi+1
  3095  0261  0008               	return
  3096  0262                     l1926:	
  3097  0262  0824               	movf	atoi@a+1,w
  3098  0263  00F9               	movwf	?_atoi+1
  3099  0264  0823               	movf	atoi@a,w
  3100  0265  00F8               	movwf	?_atoi
  3101  0266  0008               	return
  3102  0267                     __end_of_atoi:	
  3103                           
  3104                           	psect	text8
  3105  03FD                     __ptext8:	
  3106 ;; *************** function _isdigit *****************
  3107 ;; Defined at:
  3108 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  c               1    wreg     unsigned char 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  c               1    3[COMMON] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3125 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3126 ;;Total ram usage:        2 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    2
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_atoi
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _isdigit
  3138  03FD                     _isdigit:	
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3142                           ;isdigit@c stored from wreg
  3143  03FD  00F3               	movwf	isdigit@c
  3144  03FE  01F2               	clrf	_isdigit$781
  3145  03FF  303A               	movlw	58
  3146  0400  0273               	subwf	isdigit@c,w
  3147  0401  1803               	skipnc
  3148  0402  2C09               	goto	l1510
  3149  0403  3030               	movlw	48
  3150  0404  0273               	subwf	isdigit@c,w
  3151  0405  1C03               	skipc
  3152  0406  2C09               	goto	l1510
  3153  0407  01F2               	clrf	_isdigit$781
  3154  0408  0AF2               	incf	_isdigit$781,f
  3155  0409                     l1510:	
  3156  0409  0C72               	rrf	_isdigit$781,w
  3157  040A  0008               	return
  3158  040B                     __end_of_isdigit:	
  3159                           
  3160                           	psect	text9
  3161  0383                     __ptext9:	
  3162 ;; *************** function ___wmul *****************
  3163 ;; Defined at:
  3164 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  multiplier      2    2[COMMON] unsigned int 
  3167 ;;  multiplicand    2    4[COMMON] unsigned int 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  product         2    6[COMMON] unsigned int 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  2    2[COMMON] unsigned int 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3183 ;;Total ram usage:        6 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    2
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_atoi
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           
  3194                           ;psect for function ___wmul
  3195  0383                     ___wmul:	
  3196                           
  3197                           ;incstack = 0
  3198                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3199  0383  01F6               	clrf	___wmul@product
  3200  0384  01F7               	clrf	___wmul@product+1
  3201  0385                     l1490:	
  3202  0385  1C72               	btfss	___wmul@multiplier,0
  3203  0386  2B8B               	goto	l417
  3204  0387  0874               	movf	___wmul@multiplicand,w
  3205  0388  07F6               	addwf	___wmul@product,f
  3206  0389  0875               	movf	___wmul@multiplicand+1,w
  3207  038A  3DF7               	addwfc	___wmul@product+1,f
  3208  038B                     l417:	
  3209  038B  3001               	movlw	1
  3210  038C                     u765:	
  3211  038C  35F4               	lslf	___wmul@multiplicand,f
  3212  038D  0DF5               	rlf	___wmul@multiplicand+1,f
  3213  038E  0B89               	decfsz	9,f
  3214  038F  2B8C               	goto	u765
  3215  0390  3001               	movlw	1
  3216  0391                     u775:	
  3217  0391  36F3               	lsrf	___wmul@multiplier+1,f
  3218  0392  0CF2               	rrf	___wmul@multiplier,f
  3219  0393  0B89               	decfsz	9,f
  3220  0394  2B91               	goto	u775
  3221  0395  0872               	movf	___wmul@multiplier,w
  3222  0396  0473               	iorwf	___wmul@multiplier+1,w
  3223  0397  1D03               	btfss	3,2
  3224  0398  2B85               	goto	l1490
  3225  0399  0877               	movf	___wmul@product+1,w
  3226  039A  00F3               	movwf	?___wmul+1
  3227  039B  0876               	movf	___wmul@product,w
  3228  039C  00F2               	movwf	?___wmul
  3229  039D  0008               	return
  3230  039E                     __end_of___wmul:	
  3231                           
  3232                           	psect	text10
  3233  047B                     __ptext10:	
  3234 ;; *************** function _TMR0_HasOverflowOccured *****************
  3235 ;; Defined at:
  3236 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      unsigned char 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;Total ram usage:        0 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    2
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_main
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           
  3265                           ;psect for function _TMR0_HasOverflowOccured
  3266  047B                     _TMR0_HasOverflowOccured:	
  3267                           
  3268                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  3272  047B  0C0B               	rrf	11,w	;volatile
  3273  047C  0C89               	rrf	9,f
  3274  047D  3901               	andlw	1
  3275  047E  0008               	return
  3276  047F                     __end_of_TMR0_HasOverflowOccured:	
  3277                           
  3278                           	psect	text11
  3279  03EB                     __ptext11:	
  3280 ;; *************** function _SYSTEM_Initialize *****************
  3281 ;; Defined at:
  3282 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, status,2, status,0, pclath, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3300 ;;Total ram usage:        0 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    3
  3303 ;; This function calls:
  3304 ;;		_ADC_Initialize
  3305 ;;		_EUSART_Initialize
  3306 ;;		_OSCILLATOR_Initialize
  3307 ;;		_PIN_MANAGER_Initialize
  3308 ;;		_TMR0_Initialize
  3309 ;;		_WDT_Initialize
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           
  3316                           ;psect for function _SYSTEM_Initialize
  3317  03EB                     _SYSTEM_Initialize:	
  3318                           
  3319                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3323  03EB  3183  23D3  3183   	fcall	_PIN_MANAGER_Initialize
  3324                           
  3325                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3326  03EE  3184  246A  3183   	fcall	_OSCILLATOR_Initialize
  3327                           
  3328                           ;mcc.c: 74: WDT_Initialize();
  3329  03F1  3184  247F  3183   	fcall	_WDT_Initialize
  3330                           
  3331                           ;mcc.c: 75: TMR0_Initialize();
  3332  03F4  3184  240B  3183   	fcall	_TMR0_Initialize
  3333                           
  3334                           ;mcc.c: 76: ADC_Initialize();
  3335  03F7  3184  2444  3183   	fcall	_ADC_Initialize
  3336                           
  3337                           ;mcc.c: 77: EUSART_Initialize();
  3338  03FA  3183  23B9         	fcall	_EUSART_Initialize
  3339  03FC  0008               	return
  3340  03FD                     __end_of_SYSTEM_Initialize:	
  3341                           
  3342                           	psect	text12
  3343  047F                     __ptext12:	
  3344 ;; *************** function _WDT_Initialize *****************
  3345 ;; Defined at:
  3346 ;;		line 88 in file "mcc_generated_files/mcc.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3364 ;;Total ram usage:        0 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    2
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_SYSTEM_Initialize
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           
  3375                           ;psect for function _WDT_Initialize
  3376  047F                     _WDT_Initialize:	
  3377                           
  3378                           ;mcc.c: 91: WDTCON = 0x16;
  3379                           
  3380                           ;incstack = 0
  3381                           ; Regs used in _WDT_Initialize: [wreg]
  3382  047F  3016               	movlw	22
  3383  0480  0021               	movlb	1	; select bank1
  3384  0481  0097               	movwf	23	;volatile
  3385  0482  0008               	return
  3386  0483                     __end_of_WDT_Initialize:	
  3387                           
  3388                           	psect	text13
  3389  040B                     __ptext13:	
  3390 ;; *************** function _TMR0_Initialize *****************
  3391 ;; Defined at:
  3392 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;Total ram usage:        1 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    2
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_SYSTEM_Initialize
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _TMR0_Initialize
  3422  040B                     _TMR0_Initialize:	
  3423                           
  3424                           ;tmr0.c: 67: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD2 & 0x3F);
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3428  040B  0021               	movlb	1	; select bank1
  3429  040C  0815               	movf	21,w	;volatile
  3430  040D  39C0               	andlw	192
  3431  040E  3812               	iorlw	18
  3432  040F  0095               	movwf	21	;volatile
  3433                           
  3434                           ;tmr0.c: 70: TMR0 = 0x06;
  3435  0410  3006               	movlw	6
  3436  0411  0020               	movlb	0	; select bank0
  3437  0412  0095               	movwf	21	;volatile
  3438                           
  3439                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3440  0413  3006               	movlw	6
  3441  0414  00F2               	movwf	??_TMR0_Initialize
  3442  0415  0872               	movf	??_TMR0_Initialize,w
  3443  0416  00E7               	movwf	_timer0ReloadVal	;volatile
  3444                           
  3445                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3446  0417  110B               	bcf	11,2	;volatile
  3447  0418  0008               	return
  3448  0419                     __end_of_TMR0_Initialize:	
  3449                           
  3450                           	psect	text14
  3451  03D3                     __ptext14:	
  3452 ;; *************** function _PIN_MANAGER_Initialize *****************
  3453 ;; Defined at:
  3454 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    2
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_SYSTEM_Initialize
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           
  3483                           ;psect for function _PIN_MANAGER_Initialize
  3484  03D3                     _PIN_MANAGER_Initialize:	
  3485                           
  3486                           ;pin_manager.c: 57: LATA = 0x00;
  3487                           
  3488                           ;incstack = 0
  3489                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3490  03D3  0022               	movlb	2	; select bank2
  3491  03D4  018C               	clrf	12	;volatile
  3492                           
  3493                           ;pin_manager.c: 58: LATC = 0x00;
  3494  03D5  018E               	clrf	14	;volatile
  3495                           
  3496                           ;pin_manager.c: 63: TRISA = 0x3F;
  3497  03D6  303F               	movlw	63
  3498  03D7  0021               	movlb	1	; select bank1
  3499  03D8  008C               	movwf	12	;volatile
  3500                           
  3501                           ;pin_manager.c: 64: TRISC = 0x3F;
  3502  03D9  303F               	movlw	63
  3503  03DA  008E               	movwf	14	;volatile
  3504                           
  3505                           ;pin_manager.c: 69: ANSELC = 0x0F;
  3506  03DB  300F               	movlw	15
  3507  03DC  0023               	movlb	3	; select bank3
  3508  03DD  008E               	movwf	14	;volatile
  3509                           
  3510                           ;pin_manager.c: 70: ANSELA = 0x17;
  3511  03DE  3017               	movlw	23
  3512  03DF  008C               	movwf	12	;volatile
  3513                           
  3514                           ;pin_manager.c: 75: WPUA = 0x28;
  3515  03E0  3028               	movlw	40
  3516  03E1  0024               	movlb	4	; select bank4
  3517  03E2  008C               	movwf	12	;volatile
  3518                           
  3519                           ;pin_manager.c: 76: WPUC = 0x30;
  3520  03E3  3030               	movlw	48
  3521  03E4  008E               	movwf	14	;volatile
  3522                           
  3523                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  3524  03E5  0021               	movlb	1	; select bank1
  3525  03E6  1395               	bcf	21,7	;volatile
  3526                           
  3527                           ;pin_manager.c: 83: APFCON1 = 0x00;
  3528  03E7  0022               	movlb	2	; select bank2
  3529  03E8  019E               	clrf	30	;volatile
  3530                           
  3531                           ;pin_manager.c: 84: APFCON0 = 0x00;
  3532  03E9  019D               	clrf	29	;volatile
  3533  03EA  0008               	return
  3534  03EB                     __end_of_PIN_MANAGER_Initialize:	
  3535                           
  3536                           	psect	text15
  3537  046A                     __ptext15:	
  3538 ;; *************** function _OSCILLATOR_Initialize *****************
  3539 ;; Defined at:
  3540 ;;		line 80 in file "mcc_generated_files/mcc.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3558 ;;Total ram usage:        0 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    2
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_SYSTEM_Initialize
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           
  3569                           ;psect for function _OSCILLATOR_Initialize
  3570  046A                     _OSCILLATOR_Initialize:	
  3571                           
  3572                           ;mcc.c: 83: OSCCON = 0x5A;
  3573                           
  3574                           ;incstack = 0
  3575                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3576  046A  305A               	movlw	90
  3577  046B  0021               	movlb	1	; select bank1
  3578  046C  0099               	movwf	25	;volatile
  3579                           
  3580                           ;mcc.c: 85: OSCTUNE = 0x00;
  3581  046D  0198               	clrf	24	;volatile
  3582  046E  0008               	return
  3583  046F                     __end_of_OSCILLATOR_Initialize:	
  3584                           
  3585                           	psect	text16
  3586  03B9                     __ptext16:	
  3587 ;; *************** function _EUSART_Initialize *****************
  3588 ;; Defined at:
  3589 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg, status,2
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3605 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3607 ;;Total ram usage:        1 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    2
  3610 ;; This function calls:
  3611 ;;		Nothing
  3612 ;; This function is called by:
  3613 ;;		_SYSTEM_Initialize
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           
  3618                           ;psect for function _EUSART_Initialize
  3619  03B9                     _EUSART_Initialize:	
  3620                           
  3621                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  3622                           
  3623                           ;incstack = 0
  3624                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3625  03B9  0021               	movlb	1	; select bank1
  3626  03BA  1291               	bcf	17,5	;volatile
  3627                           
  3628                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  3629  03BB  1211               	bcf	17,4	;volatile
  3630                           
  3631                           ;eusart.c: 84: BAUDCON = 0x08;
  3632  03BC  3008               	movlw	8
  3633  03BD  0023               	movlb	3	; select bank3
  3634  03BE  009F               	movwf	31	;volatile
  3635                           
  3636                           ;eusart.c: 87: RCSTA = 0x80;
  3637  03BF  3080               	movlw	128
  3638  03C0  009D               	movwf	29	;volatile
  3639                           
  3640                           ;eusart.c: 90: TXSTA = 0x04;
  3641  03C1  3004               	movlw	4
  3642  03C2  009E               	movwf	30	;volatile
  3643                           
  3644                           ;eusart.c: 93: SPBRGL = 0x19;
  3645  03C3  3019               	movlw	25
  3646  03C4  009B               	movwf	27	;volatile
  3647                           
  3648                           ;eusart.c: 96: SPBRGH = 0x00;
  3649  03C5  019C               	clrf	28	;volatile
  3650                           
  3651                           ;eusart.c: 100: eusartTxHead = 0;
  3652  03C6  01FB               	clrf	_eusartTxHead	;volatile
  3653                           
  3654                           ;eusart.c: 101: eusartTxTail = 0;
  3655  03C7  01FA               	clrf	_eusartTxTail	;volatile
  3656                           
  3657                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3658  03C8  3008               	movlw	8
  3659  03C9  00F2               	movwf	??_EUSART_Initialize
  3660  03CA  0872               	movf	??_EUSART_Initialize,w
  3661  03CB  0020               	movlb	0	; select bank0
  3662  03CC  00E8               	movwf	_eusartTxBufferRemaining	;volatile
  3663                           
  3664                           ;eusart.c: 104: eusartRxHead = 0;
  3665  03CD  01DE               	clrf	_eusartRxHead	;volatile
  3666                           
  3667                           ;eusart.c: 105: eusartRxTail = 0;
  3668  03CE  01DD               	clrf	_eusartRxTail	;volatile
  3669                           
  3670                           ;eusart.c: 106: eusartRxCount = 0;
  3671  03CF  01DC               	clrf	_eusartRxCount	;volatile
  3672                           
  3673                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3674  03D0  0021               	movlb	1	; select bank1
  3675  03D1  1691               	bsf	17,5	;volatile
  3676  03D2  0008               	return
  3677  03D3                     __end_of_EUSART_Initialize:	
  3678                           
  3679                           	psect	text17
  3680  0444                     __ptext17:	
  3681 ;; *************** function _ADC_Initialize *****************
  3682 ;; Defined at:
  3683 ;;		line 64 in file "mcc_generated_files/adc.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;		None
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;		None
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  1    wreg      void 
  3690 ;; Registers used:
  3691 ;;		wreg, status,2
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;Total ram usage:        0 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    2
  3704 ;; This function calls:
  3705 ;;		Nothing
  3706 ;; This function is called by:
  3707 ;;		_SYSTEM_Initialize
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _ADC_Initialize
  3713  0444                     _ADC_Initialize:	
  3714                           
  3715                           ;adc.c: 69: ADCON0 = 0x01;
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3719  0444  3001               	movlw	1
  3720  0445  0021               	movlb	1	; select bank1
  3721  0446  009D               	movwf	29	;volatile
  3722                           
  3723                           ;adc.c: 72: ADCON1 = 0xF0;
  3724  0447  30F0               	movlw	240
  3725  0448  009E               	movwf	30	;volatile
  3726                           
  3727                           ;adc.c: 75: ADRESL = 0x00;
  3728  0449  019B               	clrf	27	;volatile
  3729                           
  3730                           ;adc.c: 78: ADRESH = 0x00;
  3731  044A  019C               	clrf	28	;volatile
  3732  044B  0008               	return
  3733  044C                     __end_of_ADC_Initialize:	
  3734                           
  3735                           	psect	text18
  3736  0329                     __ptext18:	
  3737 ;; *************** function _EUSART_Read *****************
  3738 ;; Defined at:
  3739 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  readValue       1    3[COMMON] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      unsigned char 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3757 ;;Total ram usage:        2 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    2
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;;		_getch
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           
  3769                           ;psect for function _EUSART_Read
  3770  0329                     _EUSART_Read:	
  3771                           
  3772                           ;eusart.c: 114: uint8_t readValue = 0;
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3776  0329  01F3               	clrf	EUSART_Read@readValue
  3777                           
  3778                           ;eusart.c: 115: RCSTAbits.CREN = 1;
  3779  032A  0023               	movlb	3	; select bank3
  3780  032B  161D               	bsf	29,4	;volatile
  3781  032C                     l1594:	
  3782                           ;eusart.c: 118: {
  3783                           
  3784                           ;eusart.c: 117: while(0 == eusartRxCount)
  3785                           
  3786  032C  0020               	movlb	0	; select bank0
  3787  032D  085C               	movf	_eusartRxCount,w	;volatile
  3788  032E  1903               	btfsc	3,2
  3789  032F  2B2C               	goto	l1594
  3790                           
  3791                           ;eusart.c: 119: }
  3792                           ;eusart.c: 121: readValue = eusartRxBuffer[eusartRxTail++];
  3793  0330  085D               	movf	_eusartRxTail,w
  3794  0331  3E4B               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3795  0332  0086               	movwf	6
  3796  0333  0187               	clrf	7
  3797  0334  0801               	movf	1,w
  3798  0335  00F2               	movwf	??_EUSART_Read
  3799  0336  0872               	movf	??_EUSART_Read,w
  3800  0337  00F3               	movwf	EUSART_Read@readValue
  3801  0338  3001               	movlw	1
  3802  0339  00F2               	movwf	??_EUSART_Read
  3803  033A  0872               	movf	??_EUSART_Read,w
  3804  033B  07DD               	addwf	_eusartRxTail,f	;volatile
  3805                           
  3806                           ;eusart.c: 122: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3807  033C  3008               	movlw	8
  3808  033D  025D               	subwf	_eusartRxTail,w	;volatile
  3809  033E  1803               	btfsc	3,0
  3810                           
  3811                           ;eusart.c: 123: {
  3812                           ;eusart.c: 124: eusartRxTail = 0;
  3813  033F  01DD               	clrf	_eusartRxTail	;volatile
  3814                           
  3815                           ;eusart.c: 125: }
  3816                           ;eusart.c: 126: PIE1bits.RCIE = 0;
  3817  0340  0021               	movlb	1	; select bank1
  3818  0341  1291               	bcf	17,5	;volatile
  3819                           
  3820                           ;eusart.c: 127: eusartRxCount--;
  3821  0342  3001               	movlw	1
  3822  0343  0020               	movlb	0	; select bank0
  3823  0344  02DC               	subwf	_eusartRxCount,f	;volatile
  3824                           
  3825                           ;eusart.c: 128: PIE1bits.RCIE = 1;
  3826  0345  0021               	movlb	1	; select bank1
  3827  0346  1691               	bsf	17,5	;volatile
  3828                           
  3829                           ;eusart.c: 130: return readValue;
  3830  0347  0873               	movf	EUSART_Read@readValue,w
  3831  0348  0008               	return
  3832  0349                     __end_of_EUSART_Read:	
  3833                           
  3834                           	psect	text19
  3835  0349                     __ptext19:	
  3836 ;; *************** function _DATAEE_WriteByte *****************
  3837 ;; Defined at:
  3838 ;;		line 180 in file "mcc_generated_files/memory.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  bAdd            1    wreg     unsigned char 
  3841 ;;  bData           1    2[COMMON] unsigned char 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  bAdd            1    3[COMMON] unsigned char 
  3844 ;;  GIEBitValue     1    4[COMMON] unsigned char 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3854 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;Total ram usage:        3 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    2
  3861 ;; This function calls:
  3862 ;;		Nothing
  3863 ;; This function is called by:
  3864 ;;		_main
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _DATAEE_WriteByte
  3870  0349                     _DATAEE_WriteByte:	
  3871                           
  3872                           ;incstack = 0
  3873                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  3874                           ;DATAEE_WriteByte@bAdd stored from wreg
  3875  0349  00F3               	movwf	DATAEE_WriteByte@bAdd
  3876                           
  3877                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  3878  034A  01F4               	clrf	DATAEE_WriteByte@GIEBitValue
  3879                           
  3880                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  3881  034B  0873               	movf	DATAEE_WriteByte@bAdd,w
  3882  034C  0023               	movlb	3	; select bank3
  3883  034D  0091               	movwf	17	;volatile
  3884                           
  3885                           ;memory.c: 185: EEDATL = bData;
  3886  034E  0872               	movf	DATAEE_WriteByte@bData,w
  3887  034F  0093               	movwf	19	;volatile
  3888                           
  3889                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  3890  0350  1395               	bcf	21,7	;volsfr
  3891                           
  3892                           ;memory.c: 187: EECON1bits.CFGS = 0;
  3893  0351  1315               	bcf	21,6	;volsfr
  3894                           
  3895                           ;memory.c: 188: EECON1bits.WREN = 1;
  3896  0352  1515               	bsf	21,2	;volsfr
  3897                           
  3898                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  3899  0353  3000               	movlw	0
  3900  0354  1B8B               	btfsc	11,7	;volatile
  3901  0355  3001               	movlw	1
  3902  0356  00F4               	movwf	DATAEE_WriteByte@GIEBitValue
  3903                           
  3904                           ;memory.c: 191: INTCONbits.GIE = 0;
  3905  0357  138B               	bcf	11,7	;volatile
  3906                           
  3907                           ;memory.c: 192: EECON2 = 0x55;
  3908  0358  3055               	movlw	85
  3909  0359  0096               	movwf	22	;volsfr
  3910                           
  3911                           ;memory.c: 193: EECON2 = 0xAA;
  3912  035A  30AA               	movlw	170
  3913  035B  0096               	movwf	22	;volsfr
  3914                           
  3915                           ;memory.c: 194: EECON1bits.WR = 1;
  3916  035C  1495               	bsf	21,1	;volsfr
  3917  035D                     l241:	
  3918                           ;memory.c: 197: {
  3919                           
  3920                           ;memory.c: 196: while (EECON1bits.WR)
  3921                           
  3922  035D  1895               	btfsc	21,1	;volsfr
  3923  035E  2B5D               	goto	l241
  3924                           
  3925                           ;memory.c: 198: }
  3926                           ;memory.c: 200: EECON1bits.WREN = 0;
  3927  035F  1115               	bcf	21,2	;volsfr
  3928                           
  3929                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  3930  0360  0C74               	rrf	DATAEE_WriteByte@GIEBitValue,w
  3931  0361  1C03               	skipc
  3932  0362  138B               	bcf	11,7	;volatile
  3933  0363  1803               	skipnc
  3934  0364  178B               	bsf	11,7	;volatile
  3935  0365  0008               	return
  3936  0366                     __end_of_DATAEE_WriteByte:	
  3937                           
  3938                           	psect	text20
  3939  0426                     __ptext20:	
  3940 ;; *************** function _DATAEE_ReadByte *****************
  3941 ;; Defined at:
  3942 ;;		line 204 in file "mcc_generated_files/memory.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  bAdd            1    wreg     unsigned char 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  bAdd            1    2[COMMON] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      unsigned char 
  3949 ;; Registers used:
  3950 ;;		wreg
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;Total ram usage:        1 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    2
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_main
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           
  3971                           ;psect for function _DATAEE_ReadByte
  3972  0426                     _DATAEE_ReadByte:	
  3973                           
  3974                           ;incstack = 0
  3975                           ; Regs used in _DATAEE_ReadByte: [wreg]
  3976                           ;DATAEE_ReadByte@bAdd stored from wreg
  3977  0426  00F2               	movwf	DATAEE_ReadByte@bAdd
  3978                           
  3979                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  3980  0427  0872               	movf	DATAEE_ReadByte@bAdd,w
  3981  0428  0023               	movlb	3	; select bank3
  3982  0429  0091               	movwf	17	;volatile
  3983                           
  3984                           ;memory.c: 207: EECON1bits.CFGS = 0;
  3985  042A  1315               	bcf	21,6	;volsfr
  3986                           
  3987                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  3988  042B  1395               	bcf	21,7	;volsfr
  3989                           
  3990                           ;memory.c: 209: EECON1bits.RD = 1;
  3991  042C  1415               	bsf	21,0	;volsfr
  3992                           
  3993                           ;memory.c: 210: __nop();
  3994  042D  0000               	nop
  3995                           
  3996                           ;memory.c: 211: __nop();
  3997  042E  0000               	nop
  3998                           
  3999                           ;memory.c: 213: return (EEDATL);
  4000  042F  0023               	movlb	3	; select bank3
  4001  0430  0813               	movf	19,w	;volatile
  4002  0431  0008               	return
  4003  0432                     __end_of_DATAEE_ReadByte:	
  4004                           
  4005                           	psect	text21
  4006  0489                     __ptext21:	
  4007 ;; *************** function _ADC_StartConversion *****************
  4008 ;; Defined at:
  4009 ;;		line 90 in file "mcc_generated_files/adc.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;		None
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		None
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;Total ram usage:        0 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    2
  4030 ;; This function calls:
  4031 ;;		Nothing
  4032 ;; This function is called by:
  4033 ;;		_main
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function _ADC_StartConversion
  4039  0489                     _ADC_StartConversion:	
  4040                           
  4041                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _ADC_StartConversion: []
  4045  0489  0021               	movlb	1	; select bank1
  4046  048A  149D               	bsf	29,1	;volatile
  4047  048B  0008               	return
  4048  048C                     __end_of_ADC_StartConversion:	
  4049                           
  4050                           	psect	text22
  4051  0419                     __ptext22:	
  4052 ;; *************** function _ADC_SelectChannel *****************
  4053 ;; Defined at:
  4054 ;;		line 82 in file "mcc_generated_files/adc.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  channel         1    wreg     enum E2692
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  channel         1    3[COMMON] enum E2692
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;Total ram usage:        2 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    2
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_main
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           
  4083                           ;psect for function _ADC_SelectChannel
  4084  0419                     _ADC_SelectChannel:	
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4088                           ;ADC_SelectChannel@channel stored from wreg
  4089  0419  00F3               	movwf	ADC_SelectChannel@channel
  4090                           
  4091                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4092  041A  0873               	movf	ADC_SelectChannel@channel,w
  4093  041B  00F2               	movwf	??_ADC_SelectChannel
  4094  041C  0DF2               	rlf	??_ADC_SelectChannel,f
  4095  041D  0DF2               	rlf	??_ADC_SelectChannel,f
  4096  041E  0021               	movlb	1	; select bank1
  4097  041F  081D               	movf	29,w	;volatile
  4098  0420  0672               	xorwf	??_ADC_SelectChannel,w
  4099  0421  3983               	andlw	-125
  4100  0422  0672               	xorwf	??_ADC_SelectChannel,w
  4101  0423  009D               	movwf	29	;volatile
  4102                           
  4103                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4104  0424  141D               	bsf	29,0	;volatile
  4105  0425  0008               	return
  4106  0426                     __end_of_ADC_SelectChannel:	
  4107                           
  4108                           	psect	text23
  4109  044C                     __ptext23:	
  4110 ;; *************** function _ADC_IsConversionDone *****************
  4111 ;; Defined at:
  4112 ;;		line 97 in file "mcc_generated_files/adc.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;		None
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      unsigned char 
  4119 ;; Registers used:
  4120 ;;		wreg, status,0
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;Total ram usage:        0 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    2
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_main
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           
  4141                           ;psect for function _ADC_IsConversionDone
  4142  044C                     _ADC_IsConversionDone:	
  4143                           
  4144                           ;adc.c: 100: return ((bool)(!ADCON0bits.GO_nDONE));
  4145                           
  4146                           ;incstack = 0
  4147                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4148  044C  1003               	clrc
  4149  044D  0021               	movlb	1	; select bank1
  4150  044E  1C9D               	btfss	29,1	;volatile
  4151  044F  1403               	setc
  4152  0450  3000               	movlw	0
  4153  0451  3D09               	addwfc	9,w
  4154  0452  0008               	return
  4155  0453                     __end_of_ADC_IsConversionDone:	
  4156                           
  4157                           	psect	text24
  4158  045F                     __ptext24:	
  4159 ;; *************** function _ADC_GetConversionResult *****************
  4160 ;; Defined at:
  4161 ;;		line 103 in file "mcc_generated_files/adc.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  2    2[COMMON] unsigned int 
  4168 ;; Registers used:
  4169 ;;		wreg
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4175 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;Total ram usage:        2 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    2
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_main
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _ADC_GetConversionResult
  4191  045F                     _ADC_GetConversionResult:	
  4192                           
  4193                           ;adc.c: 106: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4197  045F  0021               	movlb	1	; select bank1
  4198  0460  081C               	movf	28,w	;volatile
  4199  0461  00F3               	movwf	?_ADC_GetConversionResult+1
  4200  0462  081B               	movf	27,w	;volatile
  4201  0463  00F2               	movwf	?_ADC_GetConversionResult
  4202  0464  0008               	return
  4203  0465                     __end_of_ADC_GetConversionResult:	
  4204                           
  4205                           	psect	intentry
  4206  0004                     __pintentry:	
  4207 ;; *************** function _INTERRUPT_InterruptManager *****************
  4208 ;; Defined at:
  4209 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        1 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    1
  4230 ;; This function calls:
  4231 ;;		_EUSART_Receive_ISR
  4232 ;;		_EUSART_Transmit_ISR
  4233 ;; This function is called by:
  4234 ;;		Interrupt level 1
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238  0004                     _INTERRUPT_InterruptManager:	
  4239                           
  4240                           ;incstack = 0
  4241  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4242                           
  4243                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4244  0005  3180               	pagesel	$
  4245  0006  0020               	movlb	0	; select bank0
  4246  0007  087F               	movf	127,w
  4247  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  4248                           
  4249                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4250  0009  1F0B               	btfss	11,6	;volatile
  4251  000A  2815               	goto	i1l43
  4252  000B  0021               	movlb	1	; select bank1
  4253  000C  1E11               	btfss	17,4	;volatile
  4254  000D  2815               	goto	i1l43
  4255  000E  0020               	movlb	0	; select bank0
  4256  000F  1E11               	btfss	17,4	;volatile
  4257  0010  2815               	goto	i1l43
  4258                           
  4259                           ;interrupt_manager.c: 55: {
  4260                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  4261  0011  3183  2366  3180   	fcall	_EUSART_Transmit_ISR
  4262                           
  4263                           ;interrupt_manager.c: 57: }
  4264  0014  281F               	goto	i1l47
  4265  0015                     i1l43:	
  4266                           
  4267                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4268  0015  1F0B               	btfss	11,6	;volatile
  4269  0016  281F               	goto	i1l47
  4270  0017  0021               	movlb	1	; select bank1
  4271  0018  1E91               	btfss	17,5	;volatile
  4272  0019  281F               	goto	i1l47
  4273  001A  0020               	movlb	0	; select bank0
  4274  001B  1E91               	btfss	17,5	;volatile
  4275  001C  281F               	goto	i1l47
  4276                           
  4277                           ;interrupt_manager.c: 59: {
  4278                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  4279  001D  3183  239E         	fcall	_EUSART_Receive_ISR
  4280  001F                     i1l47:	
  4281                           ;interrupt_manager.c: 62: else
  4282                           ;interrupt_manager.c: 63: {
  4283                           
  4284                           ;interrupt_manager.c: 61: }
  4285                           
  4286  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  4287  0020  0020               	movlb	0	; select bank0
  4288  0021  00FF               	movwf	127
  4289  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4290  0023  0009               	retfie
  4291  0024                     __end_of_INTERRUPT_InterruptManager:	
  4292                           
  4293                           	psect	text26
  4294  0366                     __ptext26:	
  4295 ;; *************** function _EUSART_Transmit_ISR *****************
  4296 ;; Defined at:
  4297 ;;		line 166 in file "mcc_generated_files/eusart.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;Total ram usage:        1 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_INTERRUPT_InterruptManager
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _EUSART_Transmit_ISR
  4326  0366                     _EUSART_Transmit_ISR:	
  4327                           
  4328                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4329                           
  4330                           ;incstack = 0
  4331                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4332  0366  3008               	movlw	8
  4333  0367  0020               	movlb	0	; select bank0
  4334  0368  0268               	subwf	_eusartTxBufferRemaining,w	;volatile
  4335  0369  1803               	skipnc
  4336  036A  2B80               	goto	i1l136
  4337                           
  4338                           ;eusart.c: 171: {
  4339                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
  4340  036B  087A               	movf	_eusartTxTail,w
  4341  036C  3E53               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4342  036D  0086               	movwf	6
  4343  036E  0187               	clrf	7
  4344  036F  0801               	movf	1,w
  4345  0370  0023               	movlb	3	; select bank3
  4346  0371  009A               	movwf	26	;volatile
  4347  0372  3001               	movlw	1
  4348  0373  00F0               	movwf	??_EUSART_Transmit_ISR
  4349  0374  0870               	movf	??_EUSART_Transmit_ISR,w
  4350  0375  07FA               	addwf	_eusartTxTail,f	;volatile
  4351                           
  4352                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4353  0376  3008               	movlw	8
  4354  0377  027A               	subwf	_eusartTxTail,w	;volatile
  4355  0378  1803               	btfsc	3,0
  4356                           
  4357                           ;eusart.c: 174: {
  4358                           ;eusart.c: 175: eusartTxTail = 0;
  4359  0379  01FA               	clrf	_eusartTxTail	;volatile
  4360                           
  4361                           ;eusart.c: 176: }
  4362                           ;eusart.c: 177: eusartTxBufferRemaining++;
  4363  037A  3001               	movlw	1
  4364  037B  00F0               	movwf	??_EUSART_Transmit_ISR
  4365  037C  0870               	movf	??_EUSART_Transmit_ISR,w
  4366  037D  0020               	movlb	0	; select bank0
  4367  037E  07E8               	addwf	_eusartTxBufferRemaining,f	;volatile
  4368                           
  4369                           ;eusart.c: 178: }
  4370  037F  0008               	return
  4371  0380                     i1l136:	
  4372                           
  4373                           ;eusart.c: 179: else
  4374                           ;eusart.c: 180: {
  4375                           ;eusart.c: 181: PIE1bits.TXIE = 0;
  4376  0380  0021               	movlb	1	; select bank1
  4377  0381  1211               	bcf	17,4	;volatile
  4378  0382  0008               	return
  4379  0383                     __end_of_EUSART_Transmit_ISR:	
  4380                           
  4381                           	psect	text27
  4382  039E                     __ptext27:	
  4383 ;; *************** function _EUSART_Receive_ISR *****************
  4384 ;; Defined at:
  4385 ;;		line 185 in file "mcc_generated_files/eusart.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;Total ram usage:        1 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_INTERRUPT_InterruptManager
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           
  4413                           ;psect for function _EUSART_Receive_ISR
  4414  039E                     _EUSART_Receive_ISR:	
  4415                           
  4416                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4420  039E  0023               	movlb	3	; select bank3
  4421  039F  1C9D               	btfss	29,1	;volatile
  4422  03A0  2BA3               	goto	i1l1578
  4423                           
  4424                           ;eusart.c: 189: {
  4425                           ;eusart.c: 192: RCSTAbits.CREN = 0;
  4426  03A1  121D               	bcf	29,4	;volatile
  4427                           
  4428                           ;eusart.c: 193: RCSTAbits.CREN = 1;
  4429  03A2  161D               	bsf	29,4	;volatile
  4430  03A3                     i1l1578:	
  4431                           
  4432                           ;eusart.c: 194: }
  4433                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
  4434  03A3  0819               	movf	25,w	;volatile
  4435  03A4  00F0               	movwf	??_EUSART_Receive_ISR
  4436  03A5  0020               	movlb	0	; select bank0
  4437  03A6  085E               	movf	_eusartRxHead,w
  4438  03A7  3E4B               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4439  03A8  0086               	movwf	6
  4440  03A9  0187               	clrf	7
  4441  03AA  0870               	movf	??_EUSART_Receive_ISR,w
  4442  03AB  0081               	movwf	1
  4443  03AC  3001               	movlw	1
  4444  03AD  00F0               	movwf	??_EUSART_Receive_ISR
  4445  03AE  0870               	movf	??_EUSART_Receive_ISR,w
  4446  03AF  07DE               	addwf	_eusartRxHead,f	;volatile
  4447                           
  4448                           ;eusart.c: 198: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4449  03B0  3008               	movlw	8
  4450  03B1  025E               	subwf	_eusartRxHead,w	;volatile
  4451  03B2  1803               	btfsc	3,0
  4452                           
  4453                           ;eusart.c: 199: {
  4454                           ;eusart.c: 200: eusartRxHead = 0;
  4455  03B3  01DE               	clrf	_eusartRxHead	;volatile
  4456                           
  4457                           ;eusart.c: 201: }
  4458                           ;eusart.c: 202: eusartRxCount++;
  4459  03B4  3001               	movlw	1
  4460  03B5  00F0               	movwf	??_EUSART_Receive_ISR
  4461  03B6  0870               	movf	??_EUSART_Receive_ISR,w
  4462  03B7  07DC               	addwf	_eusartRxCount,f	;volatile
  4463  03B8  0008               	return
  4464  03B9                     __end_of_EUSART_Receive_ISR:	
  4465  007E                     btemp	set	126	;btemp
  4466  007E                     int$flags	set	126
  4467  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    14
    Data        8
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     43      73
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> main@buf(BANK0[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 8
		 -> main@buf(BANK0[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _main->_atoi
    _printf->___lwdiv
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0    3898
                                             20 BANK0     23    23      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                        _EUSART_Read
                  _SYSTEM_Initialize
            _TMR0_HasOverflowOccured
                               _atoi
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (1) _strncmp                                              7     2      5     518
                                              2 COMMON     7     2      5
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    1459
                                              6 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     721
                                              8 COMMON     2     0      2
                                              0 BANK0      6     6      0
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     196
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_SelectChannel                                    2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_IsConversionDone
   _ADC_SelectChannel
   _ADC_StartConversion
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART_Read
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _TMR0_HasOverflowOccured
   _atoi
     ___wmul
     _isdigit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART_Write
   _strncmp

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2B      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      55      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      55      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Feb 17 13:30:35 2018

    __end_of_TMR0_HasOverflowOccured 047F                          __CFG_CP$OFF 0000  
                ___wmul@multiplicand 0074                      _timer0ReloadVal 0067  
                        __CFG_LVP$ON 0000                                  l124 0312  
                                l241 035D                                  l333 01FB  
                                l417 038B                         __CFG_CPD$OFF 0000  
                                u825 02B0                                  u765 038C  
                                u845 02BA                                  u775 0391  
                                u855 02C4                                  u865 02CC  
                                _tmr 005B                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       ?_EUSART_Read 0070                                 l2020 00D3  
                               l2014 00AE                                 l2040 00FD  
                               l2050 011B                                 l2034 00EB  
                               l1420 0307                                 l2044 010F  
                               l1510 0409                                 l2062 0138  
                               l2056 0120                                 l1434 0326  
                               l1532 02CB                                 l1524 02AD  
                               l1526 02B9                                 l1710 0299  
                               l1536 02D4                                 l1490 0385  
                               l1706 0282                                 l1714 0267  
                               l1900 01FE                                 l1716 02A2  
                               l1910 0220                                 l1902 020A  
                               l1920 0252                                 l1594 032C  
                               l1916 0227                                 l1926 0262  
                               l1918 022B                                 l1942 017E  
                               l1952 0194                                 l1936 0165  
                               l1882 02E0                                 l1884 02EC  
                               l1892 0301                                 l1964 01B9  
                               l1974 01C6                                 l1958 019A  
                               l1888 02F8                                 l1968 01C1  
                               l1976 0149                                 l1898 0205  
                               l1994 0066                                 STR_1 0486  
                               STR_2 0483                                 STR_3 0477  
                               STR_4 0473                                 u1405 02F9  
                               _LATA 010C                                 _LATC 010E  
                               u1515 01AF                                 u1375 02E3  
                               u1560 004F                                 u1395 02F2  
                               i1l43 0015                                 i1l47 001F  
                               _TMR0 0015                                 _WPUA 020C  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _atoi 01FC  
                               _main 003F                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 start 0024  
                      __CFG_MCLRE$ON 0000                         main@channels 0046  
          __size_of_DATAEE_WriteByte 001D              __end_of_TMR0_Initialize 0419  
                      __CFG_PLLEN$ON 0000                        ?_EUSART_Write 0070  
     __size_of_OSCILLATOR_Initialize 0005        __end_of_OSCILLATOR_Initialize 046F  
                              ?_atoi 0078                                ?_main 0070  
                      __CFG_WDTE$OFF 0000                      __end_of___lwdiv 02D9  
                              i1l136 0380                      __end_of___lwmod 0306  
                              _RCREG 0199                                _RCSTA 019D  
                              _TRISA 008C                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
   __size_of_ADC_GetConversionResult 0006                      _DATAEE_ReadByte 0426  
                    __end_of_dpowers 043C                       _WDT_Initialize 047F  
                    __end_of_isdigit 040B                                atoi@a 0023  
                              atoi@s 0025                                _putch 0465  
                              main@c 0045                                main@i 004A  
                  __end_of_ANALOG_IN 0473                                status 0003  
                              wtemp0 007E                      __end_of_strncmp 02A5  
                    __initialization 0026                         __end_of_atoi 0267  
                       __end_of_main 0144                       ??_EUSART_Write 0072  
        ?_INTERRUPT_InterruptManager 0070                               ??_atoi 0020  
                             ??_main 0034               __end_of_WDT_Initialize 0483  
      __size_of_ADC_IsConversionDone 0007                               _ADCON0 009D  
                             _ADCON1 009E                               _ADRESH 009C  
                             _EEADRH 0192                               _ADRESL 009B  
                             _EEADRL 0191                               _EEDATH 0194  
                             _EEDATL 0193                               _EECON2 0196  
                             _ANSELA 018C                               ?_putch 0070  
                             _ANSELC 018E                               i1l1578 03A3  
                             _OSCCON 0099     __size_of_TMR0_HasOverflowOccured 0004  
                             _TMR0IF 005A                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                               ___wmul 0383  
                     __CFG_STVREN$ON 0000                            ??___lwdiv 0076  
                          ??___lwmod 0024                  _EUSART_Transmit_ISR 0366  
                   ?_TMR0_Initialize 0070                               _printf 0144  
            __end_of_DATAEE_ReadByte 0432                            ??_isdigit 0072  
                    ?_WDT_Initialize 0070                            ??_strncmp 0077  
               ?_EUSART_Transmit_ISR 0070                 __size_of_EUSART_Read 0020  
                  _SYSTEM_Initialize 03EB              __end_of__initialization 003B  
                 ?_SYSTEM_Initialize 0070         __size_of_ADC_StartConversion 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 043C  
                ??_SYSTEM_Initialize 0073                     _DATAEE_WriteByte 0349  
                      __end_of_putch 046A              _ADC_GetConversionResult 045F  
                     _OPTION_REGbits 0095            __end_of_SYSTEM_Initialize 03FD  
              ??_EUSART_Transmit_ISR 0070                              ??_putch 0074  
                         __pbssBANK0 004B                 __end_of_EUSART_Write 0329  
        __size_of_EUSART_Receive_ISR 001B                           __pmaintext 003F  
                            ?___wmul 0072                           __pintentry 0004  
                            _BAUDCON 019F                              _APFCON0 011D  
                            _APFCON1 011E                              ?_printf 0026  
            __size_of_ADC_Initialize 0008                     ?_DATAEE_ReadByte 0070  
                      _eusartRxCount 005C                              _OSCTUNE 0098  
            _TMR0_HasOverflowOccured 047B                 DATAEE_WriteByte@bAdd 0073  
                          _ANALOG_IN 046F                      __size_of___wmul 001B  
                            ___lwdiv 02A5                              ___lwmod 02D9  
          ??_ADC_GetConversionResult 0074                              __ptext1 0267  
                            __ptext2 0144                              __ptext3 0465  
                            __ptext4 0306                              __ptext5 02D9  
                            __ptext6 02A5                              __ptext7 01FC  
                            __ptext8 03FD                              __ptext9 0383  
                    __size_of_printf 00B8                              _dpowers 0432  
              _OSCILLATOR_Initialize 046A                              _isdigit 03FD  
           ??_PIN_MANAGER_Initialize 0072                              main@buf 003D  
                            main@cnt 0047           __size_of_SYSTEM_Initialize 0012  
                            clrloop0 045A                              _strncmp 0267  
               end_of_initialization 003B                              init_ram 0453  
                            initloop 0454                    _EUSART_Initialize 03B9  
       __end_of_ADC_IsConversionDone 0453                   ?_EUSART_Initialize 0070  
                          _RCSTAbits 019D                              printf@c 0033  
                            printf@f 0026                  ??_EUSART_Initialize 0072  
                   ??_WDT_Initialize 0072                     __CFG_FOSC$INTOSC 0000  
              __size_of_EUSART_Write 0023                  _ADC_StartConversion 0489  
          ??_TMR0_HasOverflowOccured 0072             __end_of_DATAEE_WriteByte 0366  
          __end_of_EUSART_Initialize 03D3                 ?_ADC_StartConversion 0070  
                     __end_of___wmul 039E                         _EUSART_Write 0306  
                     _ADC_Initialize 0444               ?_OSCILLATOR_Initialize 0070  
                     __end_of_printf 01FC                  start_initialization 0026  
           __size_of_TMR0_Initialize 000E      __size_of_PIN_MANAGER_Initialize 0018  
                      ??_EUSART_Read 0072                          putch@txData 0074  
                DATAEE_ReadByte@bAdd 0072                ??_ADC_StartConversion 0072  
                           ??___wmul 0076               __end_of_ADC_Initialize 044C  
                        __pdataBANK0 005F                             ??_printf 002A  
        __end_of_EUSART_Transmit_ISR 0383                          __pbssCOMMON 007A  
                          ___latbits 0002                        __pcstackBANK0 0020  
               _ADC_IsConversionDone 044C           __end_of_EUSART_Receive_ISR 03B9  
         __size_of_EUSART_Initialize 001A                  __end_of_EUSART_Read 0349  
                          __pnvBANK0 0067                     ___lwdiv@dividend 0074  
             _PIN_MANAGER_Initialize 03D3                 EUSART_Read@readValue 0073  
                  _ADC_SelectChannel 0419                             ?___lwdiv 0072  
                           ?___lwmod 0020                      ?_ADC_Initialize 0070  
                       _eusartRxHead 005E                   ?_ADC_SelectChannel 0070  
                       _eusartTxHead 007B                         _eusartRxTail 005D  
                       _eusartTxTail 007A         ??_INTERRUPT_InterruptManager 0071  
            _eusartTxBufferRemaining 0068                             ?_isdigit 0070  
                ??_ADC_SelectChannel 0072                ?_ADC_IsConversionDone 0070  
                   ___lwdiv@quotient 0077             __size_of_DATAEE_ReadByte 000C  
                           ?_strncmp 0072                       __size_of_putch 0005  
                     _eusartRxBuffer 004B                    ??_TMR0_Initialize 0072  
                     _eusartTxBuffer 0053                       ___wmul@product 0076  
                          clear_ram0 0459                             _PIE1bits 0091  
          __end_of_ADC_SelectChannel 0426  __size_of_INTERRUPT_InterruptManager 0020  
                           _PIR1bits 0011                            main@F3040 005F  
                         _ADCON0bits 009D                    ___wmul@multiplier 0072  
           ADC_SelectChannel@channel 0073                           printf@flag 002F  
                         printf@prec 0030                            main@level 0035  
                          main@t_max 0048                DATAEE_WriteByte@bData 0072  
                        _EUSART_Read 0329                    ?_DATAEE_WriteByte 0072  
                 ??_DATAEE_WriteByte 0073                           _EECON1bits 0195  
           ?_ADC_GetConversionResult 0072              ??_OSCILLATOR_Initialize 0072  
                   __size_of___lwdiv 0034                     __size_of___lwmod 002D  
                        _isdigit$781 0072               ??_ADC_IsConversionDone 0072  
                   __size_of_isdigit 000E                      ___lwdiv@divisor 0072  
                    ___lwdiv@counter 0079                             __ptext10 047B  
                           __ptext11 03EB                             __ptext20 0426  
                           __ptext12 047F                             __ptext21 0489  
                           __ptext13 040B                             __ptext22 0419  
                           __ptext14 03D3                             __ptext23 044C  
                           __ptext15 046A                             __ptext24 045F  
                           __ptext16 03B9                             __ptext17 0444  
                           __ptext26 0366                             __ptext18 0329  
                           __ptext27 039E                             __ptext19 0349  
        DATAEE_WriteByte@GIEBitValue 0074                     __size_of_strncmp 003E  
                      __size_of_atoi 006B                        __size_of_main 0105  
                         strncmp@len 0075                    ??_DATAEE_ReadByte 0072  
         __size_of_ADC_SelectChannel 000D                             int$flags 007E  
                           atoi@sign 0022   __end_of_INTERRUPT_InterruptManager 0024  
         _INTERRUPT_InterruptManager 0004                            printf@val 0031  
                           main@mask 0049             ?_TMR0_HasOverflowOccured 0070  
                         _INTCONbits 000B                             isdigit@c 0073  
            __size_of_WDT_Initialize 0004                             intlevel1 0000  
        __end_of_ADC_StartConversion 048C                     ___lwmod@dividend 0022  
            ?_PIN_MANAGER_Initialize 0070      __end_of_ADC_GetConversionResult 0465  
                  __CFG_CLKOUTEN$OFF 0000                            strncmp@s1 0072  
                          strncmp@s2 0074                     ??_ADC_Initialize 0072  
                           printf@ap 002E                   _EUSART_Receive_ISR 039E  
                      __pstringtext1 0432                        __pstringtext2 046F  
                      __pstringtext3 0473                        __pstringtext4 0477  
                      __pstringtext5 0483                        __pstringtext6 0486  
                      __pstringtext7 0000                           _OPTION_REG 0095  
                ?_EUSART_Receive_ISR 0070                      ___lwmod@divisor 0020  
                    _TMR0_Initialize 040B                      ___lwmod@counter 0025  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 001D  
     __end_of_PIN_MANAGER_Initialize 03EB                 ??_EUSART_Receive_ISR 0070  
